!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC3AudioFileServerMediaSubsession	AC3AudioFileServerMediaSubsession.cpp	/^::AC3AudioFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:AC3AudioFileServerMediaSubsession
createNew	AC3AudioFileServerMediaSubsession.cpp	/^AC3AudioFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:AC3AudioFileServerMediaSubsession
createNewRTPSink	AC3AudioFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:AC3AudioFileServerMediaSubsession
createNewStreamSource	AC3AudioFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:AC3AudioFileServerMediaSubsession
~AC3AudioFileServerMediaSubsession	AC3AudioFileServerMediaSubsession.cpp	/^AC3AudioFileServerMediaSubsession::~AC3AudioFileServerMediaSubsession() {$/;"	f	class:AC3AudioFileServerMediaSubsession
AC3AudioRTPSink	AC3AudioRTPSink.cpp	/^AC3AudioRTPSink::AC3AudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:AC3AudioRTPSink
createNew	AC3AudioRTPSink.cpp	/^AC3AudioRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:AC3AudioRTPSink
doSpecialFrameHandling	AC3AudioRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:AC3AudioRTPSink
frameCanAppearAfterPacketStart	AC3AudioRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:AC3AudioRTPSink
specialHeaderSize	AC3AudioRTPSink.cpp	/^unsigned AC3AudioRTPSink::specialHeaderSize() const {$/;"	f	class:AC3AudioRTPSink
~AC3AudioRTPSink	AC3AudioRTPSink.cpp	/^AC3AudioRTPSink::~AC3AudioRTPSink() {$/;"	f	class:AC3AudioRTPSink
AC3AudioRTPSource	AC3AudioRTPSource.cpp	/^AC3AudioRTPSource::AC3AudioRTPSource(UsageEnvironment& env,$/;"	f	class:AC3AudioRTPSource
MIMEtype	AC3AudioRTPSource.cpp	/^char const* AC3AudioRTPSource::MIMEtype() const {$/;"	f	class:AC3AudioRTPSource
createNew	AC3AudioRTPSource.cpp	/^AC3AudioRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:AC3AudioRTPSource
processSpecialHeader	AC3AudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:AC3AudioRTPSource
~AC3AudioRTPSource	AC3AudioRTPSource.cpp	/^AC3AudioRTPSource::~AC3AudioRTPSource() {$/;"	f	class:AC3AudioRTPSource
AC3AudioStreamFramer	AC3AudioStreamFramer.cpp	/^AC3AudioStreamFramer::AC3AudioStreamFramer(UsageEnvironment& env,$/;"	f	class:AC3AudioStreamFramer
AC3AudioStreamParser	AC3AudioStreamFramer.cpp	/^::AC3AudioStreamParser(AC3AudioStreamFramer* usingSource,$/;"	f	class:AC3AudioStreamParser
AC3AudioStreamParser	AC3AudioStreamFramer.cpp	/^class AC3AudioStreamParser: public StreamParser {$/;"	c	file:
AC3FrameParams	AC3AudioStreamFramer.cpp	/^  AC3FrameParams() : samplingFreq(0) {}$/;"	f	class:AC3FrameParams
AC3FrameParams	AC3AudioStreamFramer.cpp	/^class AC3FrameParams {$/;"	c	file:
MILLION	AC3AudioStreamFramer.cpp	127;"	d	file:
afterGettingSavedFrame	AC3AudioStreamFramer.cpp	/^::afterGettingSavedFrame(void* clientData, unsigned frameSize,$/;"	f	class:AC3AudioStreamParser
afterGettingSavedFrame1	AC3AudioStreamFramer.cpp	/^::afterGettingSavedFrame1(unsigned frameSize) {$/;"	f	class:AC3AudioStreamParser
createNew	AC3AudioStreamFramer.cpp	/^AC3AudioStreamFramer::createNew(UsageEnvironment& env,$/;"	f	class:AC3AudioStreamFramer
currentFrame	AC3AudioStreamFramer.cpp	/^  AC3FrameParams const& currentFrame() const { return fCurrentFrame; }$/;"	f	class:AC3AudioStreamParser
currentFramePlayTime	AC3AudioStreamFramer.cpp	/^struct timeval AC3AudioStreamFramer::currentFramePlayTime() const {$/;"	f	class:AC3AudioStreamFramer
doGetNextFrame	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamFramer::doGetNextFrame() {$/;"	f	class:AC3AudioStreamFramer
fCurrentFrame	AC3AudioStreamFramer.cpp	/^  AC3FrameParams fCurrentFrame;$/;"	m	class:AC3AudioStreamParser	file:
fHaveParsedAFrame	AC3AudioStreamFramer.cpp	/^  Boolean fHaveParsedAFrame;$/;"	m	class:AC3AudioStreamParser	file:
fMaxSize	AC3AudioStreamFramer.cpp	/^  unsigned fMaxSize;$/;"	m	class:AC3AudioStreamParser	file:
fSavedFrame	AC3AudioStreamFramer.cpp	/^  unsigned char* fSavedFrame;$/;"	m	class:AC3AudioStreamParser	file:
fSavedFrameFlag	AC3AudioStreamFramer.cpp	/^  char fSavedFrameFlag;$/;"	m	class:AC3AudioStreamParser	file:
fSavedFrameSize	AC3AudioStreamFramer.cpp	/^  unsigned fSavedFrameSize;$/;"	m	class:AC3AudioStreamParser	file:
fTo	AC3AudioStreamFramer.cpp	/^  unsigned char* fTo;$/;"	m	class:AC3AudioStreamParser	file:
fUsingSource	AC3AudioStreamFramer.cpp	/^  AC3AudioStreamFramer* fUsingSource;$/;"	m	class:AC3AudioStreamParser	file:
flushInput	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamFramer::flushInput() {$/;"	f	class:AC3AudioStreamFramer
frameSize	AC3AudioStreamFramer.cpp	/^  unsigned kbps, samplingFreq, frameSize;$/;"	m	class:AC3FrameParams	file:
handleNewData	AC3AudioStreamFramer.cpp	/^::handleNewData(unsigned char* ptr, unsigned size) {$/;"	f	class:AC3AudioStreamFramer
handleNewData	AC3AudioStreamFramer.cpp	/^::handleNewData(void* clientData, unsigned char* ptr, unsigned size,$/;"	f	class:AC3AudioStreamFramer
haveParsedAFrame	AC3AudioStreamFramer.cpp	/^  Boolean haveParsedAFrame() const { return fHaveParsedAFrame; }$/;"	f	class:AC3AudioStreamParser
hdr0	AC3AudioStreamFramer.cpp	/^  unsigned hdr0, hdr1;$/;"	m	class:AC3FrameParams	file:
hdr1	AC3AudioStreamFramer.cpp	/^  unsigned hdr0, hdr1;$/;"	m	class:AC3FrameParams	file:
kbps	AC3AudioStreamFramer.cpp	/^  unsigned kbps, samplingFreq, frameSize;$/;"	m	class:AC3FrameParams	file:
kbpsTable	AC3AudioStreamFramer.cpp	/^static int const kbpsTable[] = {32,  40,  48,  56,  64,  80,  96, 112,$/;"	v	file:
onSavedFrameClosure	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamParser::onSavedFrameClosure(void* clientData) {$/;"	f	class:AC3AudioStreamParser
onSavedFrameClosure1	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamParser::onSavedFrameClosure1() {$/;"	f	class:AC3AudioStreamParser
parseFrame	AC3AudioStreamFramer.cpp	/^unsigned AC3AudioStreamParser::parseFrame(unsigned& numTruncatedBytes) {$/;"	f	class:AC3AudioStreamParser
parseNextFrame	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamFramer::parseNextFrame() {$/;"	f	class:AC3AudioStreamFramer
readAndSaveAFrame	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamParser::readAndSaveAFrame() {$/;"	f	class:AC3AudioStreamParser
registerReadInterest	AC3AudioStreamFramer.cpp	/^void AC3AudioStreamParser::registerReadInterest(unsigned char* to,$/;"	f	class:AC3AudioStreamParser
samplingFreq	AC3AudioStreamFramer.cpp	/^  unsigned kbps, samplingFreq, frameSize;$/;"	m	class:AC3FrameParams	file:
samplingRate	AC3AudioStreamFramer.cpp	/^unsigned AC3AudioStreamFramer::samplingRate() {$/;"	f	class:AC3AudioStreamFramer
setParamsFromHeader	AC3AudioStreamFramer.cpp	/^void AC3FrameParams::setParamsFromHeader() {$/;"	f	class:AC3FrameParams
testStreamCode	AC3AudioStreamFramer.cpp	/^::testStreamCode(unsigned char ourStreamCode,$/;"	f	class:AC3AudioStreamParser
~AC3AudioStreamFramer	AC3AudioStreamFramer.cpp	/^AC3AudioStreamFramer::~AC3AudioStreamFramer() {$/;"	f	class:AC3AudioStreamFramer
~AC3AudioStreamParser	AC3AudioStreamFramer.cpp	/^AC3AudioStreamParser::~AC3AudioStreamParser() {$/;"	f	class:AC3AudioStreamParser
ADTSAudioFileServerMediaSubsession	ADTSAudioFileServerMediaSubsession.cpp	/^::ADTSAudioFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:ADTSAudioFileServerMediaSubsession
createNew	ADTSAudioFileServerMediaSubsession.cpp	/^ADTSAudioFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:ADTSAudioFileServerMediaSubsession
createNewRTPSink	ADTSAudioFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:ADTSAudioFileServerMediaSubsession
createNewStreamSource	ADTSAudioFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:ADTSAudioFileServerMediaSubsession
~ADTSAudioFileServerMediaSubsession	ADTSAudioFileServerMediaSubsession.cpp	/^::~ADTSAudioFileServerMediaSubsession() {$/;"	f	class:ADTSAudioFileServerMediaSubsession
ADTSAudioFileSource	ADTSAudioFileSource.cpp	/^::ADTSAudioFileSource(UsageEnvironment& env, FILE* fid, u_int8_t profile,$/;"	f	class:ADTSAudioFileSource
createNew	ADTSAudioFileSource.cpp	/^ADTSAudioFileSource::createNew(UsageEnvironment& env, char const* fileName) {$/;"	f	class:ADTSAudioFileSource
doGetNextFrame	ADTSAudioFileSource.cpp	/^void ADTSAudioFileSource::doGetNextFrame() {$/;"	f	class:ADTSAudioFileSource
samplingFrequencyTable	ADTSAudioFileSource.cpp	/^static unsigned const samplingFrequencyTable[16] = {$/;"	v	file:
~ADTSAudioFileSource	ADTSAudioFileSource.cpp	/^ADTSAudioFileSource::~ADTSAudioFileSource() {$/;"	f	class:ADTSAudioFileSource
AMRAudioFileServerMediaSubsession	AMRAudioFileServerMediaSubsession.cpp	/^::AMRAudioFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:AMRAudioFileServerMediaSubsession
createNew	AMRAudioFileServerMediaSubsession.cpp	/^AMRAudioFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:AMRAudioFileServerMediaSubsession
createNewRTPSink	AMRAudioFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:AMRAudioFileServerMediaSubsession
createNewStreamSource	AMRAudioFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:AMRAudioFileServerMediaSubsession
~AMRAudioFileServerMediaSubsession	AMRAudioFileServerMediaSubsession.cpp	/^::~AMRAudioFileServerMediaSubsession() {$/;"	f	class:AMRAudioFileServerMediaSubsession
AMRAudioFileSink	AMRAudioFileSink.cpp	/^::AMRAudioFileSink(UsageEnvironment& env, FILE* fid, unsigned bufferSize,$/;"	f	class:AMRAudioFileSink
afterGettingFrame	AMRAudioFileSink.cpp	/^void AMRAudioFileSink::afterGettingFrame(unsigned frameSize,$/;"	f	class:AMRAudioFileSink
createNew	AMRAudioFileSink.cpp	/^AMRAudioFileSink::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:AMRAudioFileSink
sourceIsCompatibleWithUs	AMRAudioFileSink.cpp	/^Boolean AMRAudioFileSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:AMRAudioFileSink
~AMRAudioFileSink	AMRAudioFileSink.cpp	/^AMRAudioFileSink::~AMRAudioFileSink() {$/;"	f	class:AMRAudioFileSink
AMRAudioFileSource	AMRAudioFileSource.cpp	/^::AMRAudioFileSource(UsageEnvironment& env, FILE* fid,$/;"	f	class:AMRAudioFileSource
FT_INVALID	AMRAudioFileSource.cpp	100;"	d	file:
createNew	AMRAudioFileSource.cpp	/^AMRAudioFileSource::createNew(UsageEnvironment& env, char const* fileName) {$/;"	f	class:AMRAudioFileSource
doGetNextFrame	AMRAudioFileSource.cpp	/^void AMRAudioFileSource::doGetNextFrame() {$/;"	f	class:AMRAudioFileSource
frameSize	AMRAudioFileSource.cpp	/^static unsigned short const frameSize[16] = {$/;"	v	file:
frameSizeWideband	AMRAudioFileSource.cpp	/^static unsigned short const frameSizeWideband[16] = {$/;"	v	file:
~AMRAudioFileSource	AMRAudioFileSource.cpp	/^AMRAudioFileSource::~AMRAudioFileSource() {$/;"	f	class:AMRAudioFileSource
AMRAudioRTPSink	AMRAudioRTPSink.cpp	/^::AMRAudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:AMRAudioRTPSink
auxSDPLine	AMRAudioRTPSink.cpp	/^char const* AMRAudioRTPSink::auxSDPLine() {$/;"	f	class:AMRAudioRTPSink
createNew	AMRAudioRTPSink.cpp	/^AMRAudioRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:AMRAudioRTPSink
doSpecialFrameHandling	AMRAudioRTPSink.cpp	/^void AMRAudioRTPSink::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:AMRAudioRTPSink
frameCanAppearAfterPacketStart	AMRAudioRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:AMRAudioRTPSink
sourceIsCompatibleWithUs	AMRAudioRTPSink.cpp	/^Boolean AMRAudioRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:AMRAudioRTPSink
specialHeaderSize	AMRAudioRTPSink.cpp	/^unsigned AMRAudioRTPSink::specialHeaderSize() const {$/;"	f	class:AMRAudioRTPSink
~AMRAudioRTPSink	AMRAudioRTPSink.cpp	/^AMRAudioRTPSink::~AMRAudioRTPSink() {$/;"	f	class:AMRAudioRTPSink
AMRBufferedPacket	AMRAudioRTPSource.cpp	/^AMRBufferedPacket::AMRBufferedPacket(RawAMRRTPSource& ourSource)$/;"	f	class:AMRBufferedPacket
AMRBufferedPacket	AMRAudioRTPSource.cpp	/^class AMRBufferedPacket: public BufferedPacket {$/;"	c	file:
AMRBufferedPacketFactory	AMRAudioRTPSource.cpp	/^class AMRBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
AMRDeinterleaver	AMRAudioRTPSource.cpp	/^AMRDeinterleaver::AMRDeinterleaver(UsageEnvironment& env,$/;"	f	class:AMRDeinterleaver
AMRDeinterleaver	AMRAudioRTPSource.cpp	/^class AMRDeinterleaver: public AMRAudioSource {$/;"	c	file:
AMRDeinterleavingBuffer	AMRAudioRTPSource.cpp	/^::AMRDeinterleavingBuffer(unsigned numChannels, unsigned maxInterleaveGroupSize)$/;"	f	class:AMRDeinterleavingBuffer
AMRDeinterleavingBuffer	AMRAudioRTPSource.cpp	/^class AMRDeinterleavingBuffer {$/;"	c	file:
AMR_MAX_FRAME_SIZE	AMRAudioRTPSource.cpp	378;"	d	file:
FT_INVALID	AMRAudioRTPSource.cpp	328;"	d	file:
FT_NO_DATA	AMRAudioRTPSource.cpp	226;"	d	file:
FT_SPEECH_LOST	AMRAudioRTPSource.cpp	225;"	d	file:
FrameDescriptor	AMRAudioRTPSource.cpp	/^  class FrameDescriptor {$/;"	c	class:AMRDeinterleavingBuffer	file:
FrameDescriptor	AMRAudioRTPSource.cpp	/^AMRDeinterleavingBuffer::FrameDescriptor::FrameDescriptor()$/;"	f	class:AMRDeinterleavingBuffer::FrameDescriptor
ILL	AMRAudioRTPSource.cpp	/^  unsigned char ILL() const { return fILL; }$/;"	f	class:RawAMRRTPSource
ILP	AMRAudioRTPSource.cpp	/^  unsigned char ILP() const { return fILP; }$/;"	f	class:RawAMRRTPSource
MAX_INTERLEAVING_GROUP_SIZE	AMRAudioRTPSource.cpp	110;"	d	file:
MAX_NUM_CHANNELS	AMRAudioRTPSource.cpp	109;"	d	file:
MIMEtype	AMRAudioRTPSource.cpp	/^char const* RawAMRRTPSource::MIMEtype() const {$/;"	f	class:RawAMRRTPSource
RawAMRRTPSource	AMRAudioRTPSource.cpp	/^::RawAMRRTPSource(UsageEnvironment& env,$/;"	f	class:RawAMRRTPSource
RawAMRRTPSource	AMRAudioRTPSource.cpp	/^class RawAMRRTPSource: public MultiFramedRTPSource {$/;"	c	file:
TOC	AMRAudioRTPSource.cpp	/^  unsigned char* TOC() const { return fTOC; } \/\/ FT+Q value for each TOC entry$/;"	f	class:RawAMRRTPSource
TOCSize	AMRAudioRTPSource.cpp	/^  unsigned TOCSize() const { return fTOCSize; } \/\/ total # of frames in the last pkt$/;"	f	class:RawAMRRTPSource
afterGettingFrame	AMRAudioRTPSource.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:AMRDeinterleaver
afterGettingFrame1	AMRAudioRTPSource.cpp	/^::afterGettingFrame1(unsigned frameSize, struct timeval presentationTime) {$/;"	f	class:AMRDeinterleaver
createNew	AMRAudioRTPSource.cpp	/^::createNew(UsageEnvironment& env,$/;"	f	class:AMRDeinterleaver
createNew	AMRAudioRTPSource.cpp	/^AMRAudioRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:AMRAudioRTPSource
createNew	AMRAudioRTPSource.cpp	/^RawAMRRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:RawAMRRTPSource
createNewBuffer	AMRAudioRTPSource.cpp	/^unsigned char* AMRDeinterleavingBuffer::createNewBuffer() {$/;"	f	class:AMRDeinterleavingBuffer
createNewPacket	AMRAudioRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:AMRBufferedPacketFactory
deliverIncomingFrame	AMRAudioRTPSource.cpp	/^::deliverIncomingFrame(unsigned frameSize, RawAMRRTPSource* source,$/;"	f	class:AMRDeinterleavingBuffer
doGetNextFrame	AMRAudioRTPSource.cpp	/^void AMRDeinterleaver::doGetNextFrame() {$/;"	f	class:AMRDeinterleaver
doStopGettingFrames	AMRAudioRTPSource.cpp	/^void AMRDeinterleaver::doStopGettingFrames() {$/;"	f	class:AMRDeinterleaver
fCRCsArePresent	AMRAudioRTPSource.cpp	/^  Boolean fIsWideband, fIsOctetAligned, fIsInterleaved, fCRCsArePresent;$/;"	m	class:RawAMRRTPSource	file:
fDeinterleavingBuffer	AMRAudioRTPSource.cpp	/^  class AMRDeinterleavingBuffer* fDeinterleavingBuffer;$/;"	m	class:AMRDeinterleaver	typeref:class:AMRDeinterleaver::AMRDeinterleavingBuffer	file:
fFrameIndex	AMRAudioRTPSource.cpp	/^  unsigned fFrameIndex;$/;"	m	class:RawAMRRTPSource	file:
fFrames	AMRAudioRTPSource.cpp	/^  FrameDescriptor* fFrames[2];$/;"	m	class:AMRDeinterleavingBuffer	file:
fHaveSeenPackets	AMRAudioRTPSource.cpp	/^  Boolean fHaveSeenPackets;$/;"	m	class:AMRDeinterleavingBuffer	file:
fILL	AMRAudioRTPSource.cpp	/^  unsigned char fILL, fILP;$/;"	m	class:RawAMRRTPSource	file:
fILL	AMRAudioRTPSource.cpp	/^  unsigned char fILL;$/;"	m	class:AMRDeinterleavingBuffer	file:
fILP	AMRAudioRTPSource.cpp	/^  unsigned char fILL, fILP;$/;"	m	class:RawAMRRTPSource	file:
fIncomingBankId	AMRAudioRTPSource.cpp	/^  unsigned char fIncomingBankId; \/\/ toggles between 0 and 1$/;"	m	class:AMRDeinterleavingBuffer	file:
fIncomingBinMax	AMRAudioRTPSource.cpp	/^  unsigned char fIncomingBinMax; \/\/ in the incoming bank$/;"	m	class:AMRDeinterleavingBuffer	file:
fInputBuffer	AMRAudioRTPSource.cpp	/^  unsigned char* fInputBuffer;$/;"	m	class:AMRDeinterleavingBuffer	file:
fInputSource	AMRAudioRTPSource.cpp	/^  RawAMRRTPSource* fInputSource;$/;"	m	class:AMRDeinterleaver	file:
fIsInterleaved	AMRAudioRTPSource.cpp	/^  Boolean fIsWideband, fIsOctetAligned, fIsInterleaved, fCRCsArePresent;$/;"	m	class:RawAMRRTPSource	file:
fIsOctetAligned	AMRAudioRTPSource.cpp	/^  Boolean fIsWideband, fIsOctetAligned, fIsInterleaved, fCRCsArePresent;$/;"	m	class:RawAMRRTPSource	file:
fIsSynchronized	AMRAudioRTPSource.cpp	/^    Boolean fIsSynchronized;$/;"	m	class:AMRDeinterleavingBuffer::FrameDescriptor	file:
fIsSynchronized	AMRAudioRTPSource.cpp	/^  Boolean fIsSynchronized;$/;"	m	class:RawAMRRTPSource	file:
fIsWideband	AMRAudioRTPSource.cpp	/^  Boolean fIsWideband, fIsOctetAligned, fIsInterleaved, fCRCsArePresent;$/;"	m	class:RawAMRRTPSource	file:
fLastPacketSeqNumForGroup	AMRAudioRTPSource.cpp	/^  u_int16_t fLastPacketSeqNumForGroup;$/;"	m	class:AMRDeinterleavingBuffer	file:
fLastRetrievedPresentationTime	AMRAudioRTPSource.cpp	/^  struct timeval fLastRetrievedPresentationTime;$/;"	m	class:AMRDeinterleavingBuffer	typeref:struct:AMRDeinterleavingBuffer::timeval	file:
fMaxInterleaveGroupSize	AMRAudioRTPSource.cpp	/^  unsigned fNumChannels, fMaxInterleaveGroupSize;$/;"	m	class:AMRDeinterleavingBuffer	file:
fNeedAFrame	AMRAudioRTPSource.cpp	/^  Boolean fNeedAFrame;$/;"	m	class:AMRDeinterleaver	file:
fNextOutgoingBin	AMRAudioRTPSource.cpp	/^  unsigned char fNextOutgoingBin;$/;"	m	class:AMRDeinterleavingBuffer	file:
fNumChannels	AMRAudioRTPSource.cpp	/^  unsigned fNumChannels, fMaxInterleaveGroupSize;$/;"	m	class:AMRDeinterleavingBuffer	file:
fNumSuccessiveSyncedFrames	AMRAudioRTPSource.cpp	/^  unsigned fNumSuccessiveSyncedFrames;$/;"	m	class:AMRDeinterleavingBuffer	file:
fOurSource	AMRAudioRTPSource.cpp	/^  RawAMRRTPSource& fOurSource;$/;"	m	class:AMRBufferedPacket	file:
fOutgoingBinMax	AMRAudioRTPSource.cpp	/^  unsigned char fOutgoingBinMax; \/\/ in the outgoing bank$/;"	m	class:AMRDeinterleavingBuffer	file:
fTOC	AMRAudioRTPSource.cpp	/^  unsigned char* fTOC;$/;"	m	class:RawAMRRTPSource	file:
fTOCSize	AMRAudioRTPSource.cpp	/^  unsigned fTOCSize;$/;"	m	class:RawAMRRTPSource	file:
frameBitsFromFT	AMRAudioRTPSource.cpp	/^static unsigned short const frameBitsFromFT[16] = {$/;"	v	file:
frameBitsFromFTWideband	AMRAudioRTPSource.cpp	/^static unsigned short const frameBitsFromFTWideband[16] = {$/;"	v	file:
frameBytesFromFT	AMRAudioRTPSource.cpp	/^static unsigned short const frameBytesFromFT[16] = {$/;"	v	file:
frameBytesFromFTWideband	AMRAudioRTPSource.cpp	/^static unsigned short const frameBytesFromFTWideband[16] = {$/;"	v	file:
frameData	AMRAudioRTPSource.cpp	/^    unsigned char* frameData;$/;"	m	class:AMRDeinterleavingBuffer::FrameDescriptor	file:
frameHeader	AMRAudioRTPSource.cpp	/^    u_int8_t frameHeader;$/;"	m	class:AMRDeinterleavingBuffer::FrameDescriptor	file:
frameIndex	AMRAudioRTPSource.cpp	/^  unsigned& frameIndex() { return fFrameIndex; } \/\/ index of frame-block within pkt$/;"	f	class:RawAMRRTPSource
frameSize	AMRAudioRTPSource.cpp	/^    unsigned frameSize;$/;"	m	class:AMRDeinterleavingBuffer::FrameDescriptor	file:
hasBeenSynchronizedUsingRTCP	AMRAudioRTPSource.cpp	/^Boolean RawAMRRTPSource::hasBeenSynchronizedUsingRTCP() {$/;"	f	class:RawAMRRTPSource
inputBuffer	AMRAudioRTPSource.cpp	/^  unsigned char* inputBuffer() { return fInputBuffer; }$/;"	f	class:AMRDeinterleavingBuffer
inputBufferSize	AMRAudioRTPSource.cpp	/^  unsigned inputBufferSize() const { return AMR_MAX_FRAME_SIZE; }$/;"	f	class:AMRDeinterleavingBuffer
isSynchronized	AMRAudioRTPSource.cpp	/^  Boolean& isSynchronized() { return fIsSynchronized; }$/;"	f	class:RawAMRRTPSource
isWideband	AMRAudioRTPSource.cpp	/^  Boolean isWideband() const { return fIsWideband; }$/;"	f	class:RawAMRRTPSource
nextEnclosedFrameSize	AMRAudioRTPSource.cpp	/^  nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:AMRBufferedPacket
presentationTime	AMRAudioRTPSource.cpp	/^    struct timeval presentationTime;$/;"	m	class:AMRDeinterleavingBuffer::FrameDescriptor	typeref:struct:AMRDeinterleavingBuffer::FrameDescriptor::timeval	file:
processSpecialHeader	AMRAudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:RawAMRRTPSource
retrieveFrame	AMRAudioRTPSource.cpp	/^::retrieveFrame(unsigned char* to, unsigned maxSize,$/;"	f	class:AMRDeinterleavingBuffer
uSecsPerFrame	AMRAudioRTPSource.cpp	/^static unsigned const uSecsPerFrame = 20000; \/\/ 20 ms$/;"	v	file:
unpackBandwidthEfficientData	AMRAudioRTPSource.cpp	/^static void unpackBandwidthEfficientData(BufferedPacket* packet,$/;"	f	file:
~AMRBufferedPacket	AMRAudioRTPSource.cpp	/^AMRBufferedPacket::~AMRBufferedPacket() {$/;"	f	class:AMRBufferedPacket
~AMRDeinterleaver	AMRAudioRTPSource.cpp	/^AMRDeinterleaver::~AMRDeinterleaver() {$/;"	f	class:AMRDeinterleaver
~AMRDeinterleavingBuffer	AMRAudioRTPSource.cpp	/^AMRDeinterleavingBuffer::~AMRDeinterleavingBuffer() {$/;"	f	class:AMRDeinterleavingBuffer
~FrameDescriptor	AMRAudioRTPSource.cpp	/^AMRDeinterleavingBuffer::FrameDescriptor::~FrameDescriptor() {$/;"	f	class:AMRDeinterleavingBuffer::FrameDescriptor
~RawAMRRTPSource	AMRAudioRTPSource.cpp	/^RawAMRRTPSource::~RawAMRRTPSource() {$/;"	f	class:RawAMRRTPSource
AMRAudioSource	AMRAudioSource.cpp	/^AMRAudioSource::AMRAudioSource(UsageEnvironment& env,$/;"	f	class:AMRAudioSource
MIMEtype	AMRAudioSource.cpp	/^char const* AMRAudioSource::MIMEtype() const {$/;"	f	class:AMRAudioSource
isAMRAudioSource	AMRAudioSource.cpp	/^Boolean AMRAudioSource::isAMRAudioSource() const {$/;"	f	class:AMRAudioSource
~AMRAudioSource	AMRAudioSource.cpp	/^AMRAudioSource::~AMRAudioSource() {$/;"	f	class:AMRAudioSource
AVIF_COPYRIGHTED	AVIFileSink.cpp	673;"	d	file:
AVIF_HASINDEX	AVIFileSink.cpp	668;"	d	file:
AVIF_ISINTERLEAVED	AVIFileSink.cpp	670;"	d	file:
AVIF_MUSTUSEINDEX	AVIFileSink.cpp	669;"	d	file:
AVIF_TRUSTCKTYPE	AVIFileSink.cpp	671;"	d	file:
AVIF_WASCAPTUREFILE	AVIFileSink.cpp	672;"	d	file:
AVIFileSink	AVIFileSink.cpp	/^AVIFileSink::AVIFileSink(UsageEnvironment& env,$/;"	f	class:AVIFileSink
AVIIndexRecord	AVIFileSink.cpp	/^  AVIIndexRecord(unsigned chunkId, unsigned flags, unsigned offset, unsigned size)$/;"	f	class:AVIIndexRecord
AVIIndexRecord	AVIFileSink.cpp	/^class AVIIndexRecord {$/;"	c	file:
AVISubsessionIOState	AVIFileSink.cpp	/^AVISubsessionIOState::AVISubsessionIOState(AVIFileSink& sink,$/;"	f	class:AVISubsessionIOState
AVISubsessionIOState	AVIFileSink.cpp	/^class AVISubsessionIOState {$/;"	c	file:
AVI_MASTER_INDEX_SIZE	AVIFileSink.cpp	762;"	d	file:
JUNK	AVIFileSink.cpp	/^addFileHeader1(JUNK);$/;"	v
SubsessionBuffer	AVIFileSink.cpp	/^  SubsessionBuffer(unsigned bufferSize)$/;"	f	class:SubsessionBuffer
SubsessionBuffer	AVIFileSink.cpp	/^class SubsessionBuffer {$/;"	c	file:
add4ByteString	AVIFileSink.cpp	/^unsigned AVIFileSink::add4ByteString(char const* str) {$/;"	f	class:AVIFileSink
addBytes	AVIFileSink.cpp	/^  void addBytes(unsigned numBytes) { fBytesInUse += numBytes; }$/;"	f	class:SubsessionBuffer
addFileHeader	AVIFileSink.cpp	610;"	d	file:
addFileHeader1	AVIFileSink.cpp	618;"	d	file:
addFileHeaderEnd	AVIFileSink.cpp	625;"	d	file:
addHalfWord	AVIFileSink.cpp	/^unsigned AVIFileSink::addHalfWord(unsigned short halfWord) {$/;"	f	class:AVIFileSink
addIndexRecord	AVIFileSink.cpp	/^void AVIFileSink::addIndexRecord(AVIIndexRecord* newIndexRecord) {$/;"	f	class:AVIFileSink
addWord	AVIFileSink.cpp	/^unsigned AVIFileSink::addWord(unsigned word) {$/;"	f	class:AVIFileSink
addZeroWords	AVIFileSink.cpp	/^unsigned AVIFileSink::addZeroWords(unsigned numWords) {$/;"	f	class:AVIFileSink
afterGettingFrame	AVIFileSink.cpp	/^::afterGettingFrame(void* clientData, unsigned packetDataSize,$/;"	f	class:AVIFileSink
afterGettingFrame	AVIFileSink.cpp	/^void AVISubsessionIOState::afterGettingFrame(unsigned packetDataSize,$/;"	f	class:AVISubsessionIOState
avih	AVIFileSink.cpp	/^addFileHeader1(avih);$/;"	v
bytesAvailable	AVIFileSink.cpp	/^  unsigned bytesAvailable() const { return fBufferSize - fBytesInUse; }$/;"	f	class:SubsessionBuffer
bytesInUse	AVIFileSink.cpp	/^  unsigned bytesInUse() const { return fBytesInUse; }$/;"	f	class:SubsessionBuffer
chunkId	AVIFileSink.cpp	/^  unsigned chunkId() const { return fChunkId; }$/;"	f	class:AVIIndexRecord
completeOutputFile	AVIFileSink.cpp	/^void AVIFileSink::completeOutputFile() {$/;"	f	class:AVIFileSink
continuePlaying	AVIFileSink.cpp	/^Boolean AVIFileSink::continuePlaying() {$/;"	f	class:AVIFileSink
createNew	AVIFileSink.cpp	/^::createNew(UsageEnvironment& env, MediaSession& inputSession,$/;"	f	class:AVIFileSink
dataEnd	AVIFileSink.cpp	/^  unsigned char* dataEnd() { return &fData[fBytesInUse]; }$/;"	f	class:SubsessionBuffer
dataStart	AVIFileSink.cpp	/^  unsigned char* dataStart() { return &fData[0]; }$/;"	f	class:SubsessionBuffer
envir	AVIFileSink.cpp	/^  UsageEnvironment& envir() const { return fOurSink.envir(); }$/;"	f	class:AVISubsessionIOState
fAVICodecHandlerType	AVIFileSink.cpp	/^  unsigned fAVICodecHandlerType;$/;"	m	class:AVISubsessionIOState	file:
fAVIRate	AVIFileSink.cpp	/^  unsigned fAVIRate;$/;"	m	class:AVISubsessionIOState	file:
fAVISamplingFrequency	AVIFileSink.cpp	/^  unsigned fAVISamplingFrequency; \/\/ for audio$/;"	m	class:AVISubsessionIOState	file:
fAVIScale	AVIFileSink.cpp	/^  unsigned fAVIScale;$/;"	m	class:AVISubsessionIOState	file:
fAVISize	AVIFileSink.cpp	/^  unsigned fAVISize;$/;"	m	class:AVISubsessionIOState	file:
fAVISubsessionTag	AVIFileSink.cpp	/^  unsigned fAVISubsessionTag;$/;"	m	class:AVISubsessionIOState	file:
fBuffer	AVIFileSink.cpp	/^  SubsessionBuffer *fBuffer, *fPrevBuffer;$/;"	m	class:AVISubsessionIOState	file:
fBufferSize	AVIFileSink.cpp	/^  unsigned fBufferSize;$/;"	m	class:SubsessionBuffer	file:
fBytesInUse	AVIFileSink.cpp	/^  unsigned fBytesInUse;$/;"	m	class:SubsessionBuffer	file:
fChunkId	AVIFileSink.cpp	/^  unsigned fChunkId;$/;"	m	class:AVIIndexRecord	file:
fData	AVIFileSink.cpp	/^  unsigned char* fData;$/;"	m	class:SubsessionBuffer	file:
fFlags	AVIFileSink.cpp	/^  unsigned fFlags;$/;"	m	class:AVIIndexRecord	file:
fIsAudio	AVIFileSink.cpp	/^  Boolean fIsVideo, fIsAudio, fIsByteSwappedAudio;$/;"	m	class:AVISubsessionIOState	file:
fIsByteSwappedAudio	AVIFileSink.cpp	/^  Boolean fIsVideo, fIsAudio, fIsByteSwappedAudio;$/;"	m	class:AVISubsessionIOState	file:
fIsVideo	AVIFileSink.cpp	/^  Boolean fIsVideo, fIsAudio, fIsByteSwappedAudio;$/;"	m	class:AVISubsessionIOState	file:
fLastPacketRTPSeqNum	AVIFileSink.cpp	/^  unsigned short fLastPacketRTPSeqNum;$/;"	m	class:AVISubsessionIOState	file:
fMaxBytesPerSecond	AVIFileSink.cpp	/^  unsigned fMaxBytesPerSecond;$/;"	m	class:AVISubsessionIOState	file:
fNext	AVIFileSink.cpp	/^  AVIIndexRecord* fNext;$/;"	m	class:AVIIndexRecord	file:
fNumFrames	AVIFileSink.cpp	/^  unsigned fNumFrames;$/;"	m	class:AVISubsessionIOState	file:
fOffset	AVIFileSink.cpp	/^  unsigned fOffset;$/;"	m	class:AVIIndexRecord	file:
fOurSink	AVIFileSink.cpp	/^  AVIFileSink& fOurSink;$/;"	m	class:AVISubsessionIOState	file:
fOurSourceIsActive	AVIFileSink.cpp	/^  Boolean fOurSourceIsActive;$/;"	m	class:AVISubsessionIOState	file:
fOurSubsession	AVIFileSink.cpp	/^  MediaSubsession& fOurSubsession;$/;"	m	class:AVISubsessionIOState	file:
fPresentationTime	AVIFileSink.cpp	/^  struct timeval fPresentationTime;$/;"	m	class:SubsessionBuffer	typeref:struct:SubsessionBuffer::timeval	file:
fPrevBuffer	AVIFileSink.cpp	/^  SubsessionBuffer *fBuffer, *fPrevBuffer;$/;"	m	class:AVISubsessionIOState	file:
fPrevPresentationTime	AVIFileSink.cpp	/^  struct timeval fPrevPresentationTime;$/;"	m	class:AVISubsessionIOState	typeref:struct:AVISubsessionIOState::timeval	file:
fSTRHFrameCountPosition	AVIFileSink.cpp	/^  unsigned fSTRHFrameCountPosition;$/;"	m	class:AVISubsessionIOState	file:
fSize	AVIFileSink.cpp	/^  unsigned fSize;$/;"	m	class:AVIIndexRecord	file:
fWAVCodecTag	AVIFileSink.cpp	/^  u_int16_t fWAVCodecTag; \/\/ for audio$/;"	m	class:AVISubsessionIOState	file:
flags	AVIFileSink.cpp	/^  unsigned flags() const { return fFlags; }$/;"	f	class:AVIIndexRecord
fourChar	AVIFileSink.cpp	26;"	d	file:
next	AVIFileSink.cpp	/^  AVIIndexRecord*& next() { return fNext; }$/;"	f	class:AVIIndexRecord
offset	AVIFileSink.cpp	/^  unsigned offset() const { return fOffset; }$/;"	f	class:AVIIndexRecord
onRTCPBye	AVIFileSink.cpp	/^void AVIFileSink::onRTCPBye(void* clientData) {$/;"	f	class:AVIFileSink
onSourceClosure	AVIFileSink.cpp	/^void AVIFileSink::onSourceClosure(void* clientData) {$/;"	f	class:AVIFileSink
onSourceClosure	AVIFileSink.cpp	/^void AVISubsessionIOState::onSourceClosure() {$/;"	f	class:AVISubsessionIOState
onSourceClosure1	AVIFileSink.cpp	/^void AVIFileSink::onSourceClosure1() {$/;"	f	class:AVIFileSink
presentationTime	AVIFileSink.cpp	/^  struct timeval const& presentationTime() const {return fPresentationTime;}$/;"	f	class:SubsessionBuffer
reset	AVIFileSink.cpp	/^  void reset() { fBytesInUse = 0; }$/;"	f	class:SubsessionBuffer
setAVIstate	AVIFileSink.cpp	/^void AVISubsessionIOState::setAVIstate(unsigned subsessionIndex) {$/;"	f	class:AVISubsessionIOState
setPresentationTime	AVIFileSink.cpp	/^  void setPresentationTime(struct timeval const& presentationTime) {$/;"	f	class:SubsessionBuffer
setWord	AVIFileSink.cpp	/^void AVIFileSink::setWord(unsigned filePosn, unsigned size) {$/;"	f	class:AVIFileSink
size	AVIFileSink.cpp	/^  unsigned size() const { return fSize; }$/;"	f	class:AVIIndexRecord
startPlaying	AVIFileSink.cpp	/^Boolean AVIFileSink::startPlaying(afterPlayingFunc* afterFunc,$/;"	f	class:AVIFileSink
strf	AVIFileSink.cpp	/^addFileHeader1(strf);$/;"	v
strh	AVIFileSink.cpp	/^addFileHeader1(strh);$/;"	v
subsession	AVIFileSink.cpp	/^    MediaSubsession* subsession;$/;"	v
subsessionCount	AVIFileSink.cpp	/^    unsigned subsessionCount = 0;$/;"	v
useFrame	AVIFileSink.cpp	/^void AVISubsessionIOState::useFrame(SubsessionBuffer& buffer) {$/;"	f	class:AVISubsessionIOState
usecPerFrame	AVIFileSink.cpp	/^    unsigned usecPerFrame = fMovieFPS == 0 ? 0 : 1000000\/fMovieFPS;$/;"	v
~AVIFileSink	AVIFileSink.cpp	/^AVIFileSink::~AVIFileSink() {$/;"	f	class:AVIFileSink
~AVISubsessionIOState	AVIFileSink.cpp	/^AVISubsessionIOState::~AVISubsessionIOState() {$/;"	f	class:AVISubsessionIOState
~SubsessionBuffer	AVIFileSink.cpp	/^  virtual ~SubsessionBuffer() { delete[] fData; }$/;"	f	class:SubsessionBuffer
AudioInputDevice	AudioInputDevice.cpp	/^::AudioInputDevice(UsageEnvironment& env, unsigned char bitsPerSample,$/;"	f	class:AudioInputDevice
AudioPortNames	AudioInputDevice.cpp	/^AudioPortNames::AudioPortNames()$/;"	f	class:AudioPortNames
allowedDeviceNames	AudioInputDevice.cpp	/^char** AudioInputDevice::allowedDeviceNames = NULL;$/;"	m	class:AudioInputDevice	file:
~AudioInputDevice	AudioInputDevice.cpp	/^AudioInputDevice::~AudioInputDevice() {$/;"	f	class:AudioInputDevice
~AudioPortNames	AudioInputDevice.cpp	/^AudioPortNames::~AudioPortNames() {$/;"	f	class:AudioPortNames
AudioRTPSink	AudioRTPSink.cpp	/^AudioRTPSink::AudioRTPSink(UsageEnvironment& env,$/;"	f	class:AudioRTPSink
sdpMediaType	AudioRTPSink.cpp	/^char const* AudioRTPSink::sdpMediaType() const {$/;"	f	class:AudioRTPSink
~AudioRTPSink	AudioRTPSink.cpp	/^AudioRTPSink::~AudioRTPSink() {$/;"	f	class:AudioRTPSink
base64Char	Base64.cpp	/^static const char base64Char[] =$/;"	v	file:
base64Decode	Base64.cpp	/^unsigned char* base64Decode(char const* in, unsigned inSize,$/;"	f
base64Decode	Base64.cpp	/^unsigned char* base64Decode(char const* in, unsigned& resultSize,$/;"	f
base64DecodeTable	Base64.cpp	/^static char base64DecodeTable[256];$/;"	v	file:
base64Encode	Base64.cpp	/^char* base64Encode(char const* origSigned, unsigned origLength) {$/;"	f
initBase64DecodeTable	Base64.cpp	/^static void initBase64DecodeTable() {$/;"	f	file:
BasicUDPSink	BasicUDPSink.cpp	/^BasicUDPSink::BasicUDPSink(UsageEnvironment& env, Groupsock* gs,$/;"	f	class:BasicUDPSink
afterGettingFrame	BasicUDPSink.cpp	/^void BasicUDPSink::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:BasicUDPSink
afterGettingFrame1	BasicUDPSink.cpp	/^void BasicUDPSink::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:BasicUDPSink
continuePlaying	BasicUDPSink.cpp	/^Boolean BasicUDPSink::continuePlaying() {$/;"	f	class:BasicUDPSink
continuePlaying1	BasicUDPSink.cpp	/^void BasicUDPSink::continuePlaying1() {$/;"	f	class:BasicUDPSink
createNew	BasicUDPSink.cpp	/^BasicUDPSink* BasicUDPSink::createNew(UsageEnvironment& env, Groupsock* gs,$/;"	f	class:BasicUDPSink
sendNext	BasicUDPSink.cpp	/^void BasicUDPSink::sendNext(void* firstArg) {$/;"	f	class:BasicUDPSink
~BasicUDPSink	BasicUDPSink.cpp	/^BasicUDPSink::~BasicUDPSink() {$/;"	f	class:BasicUDPSink
BasicUDPSource	BasicUDPSource.cpp	/^BasicUDPSource::BasicUDPSource(UsageEnvironment& env, Groupsock* inputGS)$/;"	f	class:BasicUDPSource
createNew	BasicUDPSource.cpp	/^BasicUDPSource* BasicUDPSource::createNew(UsageEnvironment& env,$/;"	f	class:BasicUDPSource
doGetNextFrame	BasicUDPSource.cpp	/^void BasicUDPSource::doGetNextFrame() {$/;"	f	class:BasicUDPSource
doStopGettingFrames	BasicUDPSource.cpp	/^void BasicUDPSource::doStopGettingFrames() {$/;"	f	class:BasicUDPSource
incomingPacketHandler	BasicUDPSource.cpp	/^void BasicUDPSource::incomingPacketHandler(BasicUDPSource* source, int \/*mask*\/){$/;"	f	class:BasicUDPSource
incomingPacketHandler1	BasicUDPSource.cpp	/^void BasicUDPSource::incomingPacketHandler1() {$/;"	f	class:BasicUDPSource
~BasicUDPSource	BasicUDPSource.cpp	/^BasicUDPSource::~BasicUDPSource(){$/;"	f	class:BasicUDPSource
BitVector	BitVector.cpp	/^BitVector::BitVector(unsigned char* baseBytePtr,$/;"	f	class:BitVector
MAX_LENGTH	BitVector.cpp	41;"	d	file:
get1Bit	BitVector.cpp	/^unsigned BitVector::get1Bit() {$/;"	f	class:BitVector
getBits	BitVector.cpp	/^unsigned BitVector::getBits(unsigned numBits) {$/;"	f	class:BitVector
get_expGolomb	BitVector.cpp	/^unsigned BitVector::get_expGolomb() {$/;"	f	class:BitVector
put1Bit	BitVector.cpp	/^void BitVector::put1Bit(unsigned bit) {$/;"	f	class:BitVector
putBits	BitVector.cpp	/^void BitVector::putBits(unsigned from, unsigned numBits) {$/;"	f	class:BitVector
setup	BitVector.cpp	/^void BitVector::setup(unsigned char* baseBytePtr,$/;"	f	class:BitVector
shiftBits	BitVector.cpp	/^void shiftBits(unsigned char* toBasePtr, unsigned toBitOffset,$/;"	f
singleBitMask	BitVector.cpp	/^static unsigned char const singleBitMask[8]$/;"	v	file:
skipBits	BitVector.cpp	/^void BitVector::skipBits(unsigned numBits) {$/;"	f	class:BitVector
ByteStreamFileSource	ByteStreamFileSource.cpp	/^ByteStreamFileSource::ByteStreamFileSource(UsageEnvironment& env, FILE* fid,$/;"	f	class:ByteStreamFileSource
createNew	ByteStreamFileSource.cpp	/^ByteStreamFileSource::createNew(UsageEnvironment& env, FILE* fid,$/;"	f	class:ByteStreamFileSource
createNew	ByteStreamFileSource.cpp	/^ByteStreamFileSource::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:ByteStreamFileSource
doGetNextFrame	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::doGetNextFrame() {$/;"	f	class:ByteStreamFileSource
doReadFromFile	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::doReadFromFile() {$/;"	f	class:ByteStreamFileSource
doStopGettingFrames	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::doStopGettingFrames() {$/;"	f	class:ByteStreamFileSource
fileReadableHandler	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::fileReadableHandler(ByteStreamFileSource* source, int \/*mask*\/) {$/;"	f	class:ByteStreamFileSource
seekToByteAbsolute	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::seekToByteAbsolute(u_int64_t byteNumber, u_int64_t numBytesToStream) {$/;"	f	class:ByteStreamFileSource
seekToByteRelative	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::seekToByteRelative(int64_t offset, u_int64_t numBytesToStream) {$/;"	f	class:ByteStreamFileSource
seekToEnd	ByteStreamFileSource.cpp	/^void ByteStreamFileSource::seekToEnd() {$/;"	f	class:ByteStreamFileSource
~ByteStreamFileSource	ByteStreamFileSource.cpp	/^ByteStreamFileSource::~ByteStreamFileSource() {$/;"	f	class:ByteStreamFileSource
ByteStreamMemoryBufferSource	ByteStreamMemoryBufferSource.cpp	/^ByteStreamMemoryBufferSource::ByteStreamMemoryBufferSource(UsageEnvironment& env,$/;"	f	class:ByteStreamMemoryBufferSource
createNew	ByteStreamMemoryBufferSource.cpp	/^ByteStreamMemoryBufferSource::createNew(UsageEnvironment& env,$/;"	f	class:ByteStreamMemoryBufferSource
doGetNextFrame	ByteStreamMemoryBufferSource.cpp	/^void ByteStreamMemoryBufferSource::doGetNextFrame() {$/;"	f	class:ByteStreamMemoryBufferSource
seekToByteAbsolute	ByteStreamMemoryBufferSource.cpp	/^void ByteStreamMemoryBufferSource::seekToByteAbsolute(u_int64_t byteNumber, u_int64_t numBytesToStream) {$/;"	f	class:ByteStreamMemoryBufferSource
seekToByteRelative	ByteStreamMemoryBufferSource.cpp	/^void ByteStreamMemoryBufferSource::seekToByteRelative(int64_t offset, u_int64_t numBytesToStream) {$/;"	f	class:ByteStreamMemoryBufferSource
~ByteStreamMemoryBufferSource	ByteStreamMemoryBufferSource.cpp	/^ByteStreamMemoryBufferSource::~ByteStreamMemoryBufferSource() {$/;"	f	class:ByteStreamMemoryBufferSource
ByteStreamMultiFileSource	ByteStreamMultiFileSource.cpp	/^::ByteStreamMultiFileSource(UsageEnvironment& env, char const** fileNameArray,$/;"	f	class:ByteStreamMultiFileSource
afterGettingFrame	ByteStreamMultiFileSource.cpp	/^  ::afterGettingFrame(void* clientData,$/;"	f	class:ByteStreamMultiFileSource
createNew	ByteStreamMultiFileSource.cpp	/^::createNew(UsageEnvironment& env, char const** fileNameArray,$/;"	f	class:ByteStreamMultiFileSource
doGetNextFrame	ByteStreamMultiFileSource.cpp	/^void ByteStreamMultiFileSource::doGetNextFrame() {$/;"	f	class:ByteStreamMultiFileSource
onSourceClosure	ByteStreamMultiFileSource.cpp	/^void ByteStreamMultiFileSource::onSourceClosure(void* clientData) {$/;"	f	class:ByteStreamMultiFileSource
onSourceClosure1	ByteStreamMultiFileSource.cpp	/^void ByteStreamMultiFileSource::onSourceClosure1() {$/;"	f	class:ByteStreamMultiFileSource
~ByteStreamMultiFileSource	ByteStreamMultiFileSource.cpp	/^ByteStreamMultiFileSource::~ByteStreamMultiFileSource() {$/;"	f	class:ByteStreamMultiFileSource
DVVideoFileServerMediaSubsession	DVVideoFileServerMediaSubsession.cpp	/^::DVVideoFileServerMediaSubsession(UsageEnvironment& env, char const* fileName, Boolean reuseFirstSource)$/;"	f	class:DVVideoFileServerMediaSubsession
createNew	DVVideoFileServerMediaSubsession.cpp	/^DVVideoFileServerMediaSubsession::createNew(UsageEnvironment& env, char const* fileName, Boolean reuseFirstSource) {$/;"	f	class:DVVideoFileServerMediaSubsession
createNewRTPSink	DVVideoFileServerMediaSubsession.cpp	/^RTPSink* DVVideoFileServerMediaSubsession::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:DVVideoFileServerMediaSubsession
createNewStreamSource	DVVideoFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:DVVideoFileServerMediaSubsession
duration	DVVideoFileServerMediaSubsession.cpp	/^float DVVideoFileServerMediaSubsession::duration() const {$/;"	f	class:DVVideoFileServerMediaSubsession
getAuxSDPLine	DVVideoFileServerMediaSubsession.cpp	/^char const* DVVideoFileServerMediaSubsession::getAuxSDPLine(RTPSink* rtpSink, FramedSource* inputSource) {$/;"	f	class:DVVideoFileServerMediaSubsession
seekStreamSource	DVVideoFileServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double streamDuration, u_int64_t& numBytes) {$/;"	f	class:DVVideoFileServerMediaSubsession
setStreamSourceDuration	DVVideoFileServerMediaSubsession.cpp	/^::setStreamSourceDuration(FramedSource* inputSource, double streamDuration, u_int64_t& numBytes) {$/;"	f	class:DVVideoFileServerMediaSubsession
~DVVideoFileServerMediaSubsession	DVVideoFileServerMediaSubsession.cpp	/^DVVideoFileServerMediaSubsession::~DVVideoFileServerMediaSubsession() {$/;"	f	class:DVVideoFileServerMediaSubsession
DVVideoRTPSink	DVVideoRTPSink.cpp	/^::DVVideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat)$/;"	f	class:DVVideoRTPSink
auxSDPLine	DVVideoRTPSink.cpp	/^char const* DVVideoRTPSink::auxSDPLine() {$/;"	f	class:DVVideoRTPSink
auxSDPLineFromFramer	DVVideoRTPSink.cpp	/^char const* DVVideoRTPSink::auxSDPLineFromFramer(DVVideoStreamFramer* framerSource) {$/;"	f	class:DVVideoRTPSink
computeOverflowForNewFrame	DVVideoRTPSink.cpp	/^unsigned DVVideoRTPSink::computeOverflowForNewFrame(unsigned newFrameSize) const {$/;"	f	class:DVVideoRTPSink
createNew	DVVideoRTPSink.cpp	/^DVVideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat) {$/;"	f	class:DVVideoRTPSink
doSpecialFrameHandling	DVVideoRTPSink.cpp	/^void DVVideoRTPSink::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:DVVideoRTPSink
sourceIsCompatibleWithUs	DVVideoRTPSink.cpp	/^Boolean DVVideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:DVVideoRTPSink
~DVVideoRTPSink	DVVideoRTPSink.cpp	/^DVVideoRTPSink::~DVVideoRTPSink() {$/;"	f	class:DVVideoRTPSink
DVVideoRTPSource	DVVideoRTPSource.cpp	/^DVVideoRTPSource::DVVideoRTPSource(UsageEnvironment& env,$/;"	f	class:DVVideoRTPSource
DV_DIF_BLOCK_SIZE	DVVideoRTPSource.cpp	42;"	d	file:
DV_SECTION_HEADER	DVVideoRTPSource.cpp	43;"	d	file:
MIMEtype	DVVideoRTPSource.cpp	/^char const* DVVideoRTPSource::MIMEtype() const {$/;"	f	class:DVVideoRTPSource
createNew	DVVideoRTPSource.cpp	/^DVVideoRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:DVVideoRTPSource
processSpecialHeader	DVVideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:DVVideoRTPSource
~DVVideoRTPSource	DVVideoRTPSource.cpp	/^DVVideoRTPSource::~DVVideoRTPSource() {$/;"	f	class:DVVideoRTPSource
DVData	DVVideoStreamFramer.cpp	143;"	d	file:
DVSectionId	DVVideoStreamFramer.cpp	142;"	d	file:
DVVideoProfile	DVVideoStreamFramer.cpp	/^struct DVVideoProfile {$/;"	s	file:
DVVideoStreamFramer	DVVideoStreamFramer.cpp	/^DVVideoStreamFramer::DVVideoStreamFramer(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:DVVideoStreamFramer
DV_PACK_HEADER_10	DVVideoStreamFramer.cpp	146;"	d	file:
DV_PACK_HEADER_12	DVVideoStreamFramer.cpp	147;"	d	file:
DV_PACK_VIDEO_SOURCE	DVVideoStreamFramer.cpp	150;"	d	file:
DV_SECTION_HEADER	DVVideoStreamFramer.cpp	145;"	d	file:
DV_SECTION_VAUX_MAX	DVVideoStreamFramer.cpp	149;"	d	file:
DV_SECTION_VAUX_MIN	DVVideoStreamFramer.cpp	148;"	d	file:
DV_SMALLEST_POSSIBLE_FRAME_SIZE	DVVideoStreamFramer.cpp	124;"	d	file:
MILLION	DVVideoStreamFramer.cpp	152;"	d	file:
afterGettingFrame	DVVideoStreamFramer.cpp	/^void DVVideoStreamFramer::afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes, struct timeval presentationTime) {$/;"	f	class:DVVideoStreamFramer
afterGettingFrame	DVVideoStreamFramer.cpp	/^void DVVideoStreamFramer::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:DVVideoStreamFramer
apt	DVVideoStreamFramer.cpp	/^  unsigned apt;$/;"	m	struct:DVVideoProfile	file:
channelCount	DVVideoStreamFramer.cpp	/^  unsigned channelCount;$/;"	m	struct:DVVideoProfile	file:
createNew	DVVideoStreamFramer.cpp	/^DVVideoStreamFramer::createNew(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:DVVideoStreamFramer
doGetNextFrame	DVVideoStreamFramer.cpp	/^void DVVideoStreamFramer::doGetNextFrame() {$/;"	f	class:DVVideoStreamFramer
dvFrameSize	DVVideoStreamFramer.cpp	/^  unsigned dvFrameSize; \/\/ in bytes (== sequenceCount*channelCount*(DV_NUM_BLOCKS_PER_SEQUENCE*DV_DIF_BLOCK_SIZE i.e. 12000))$/;"	m	struct:DVVideoProfile	file:
frameDuration	DVVideoStreamFramer.cpp	/^  double frameDuration; \/\/ duration of the above, in microseconds.  (1000000\/this == frame rate)$/;"	m	struct:DVVideoProfile	file:
getAndDeliverData	DVVideoStreamFramer.cpp	/^void DVVideoStreamFramer::getAndDeliverData() {$/;"	f	class:DVVideoStreamFramer
getFrameParameters	DVVideoStreamFramer.cpp	/^Boolean DVVideoStreamFramer::getFrameParameters(unsigned& frameSize, double& frameDuration) {$/;"	f	class:DVVideoStreamFramer
getProfile	DVVideoStreamFramer.cpp	/^void DVVideoStreamFramer::getProfile() {$/;"	f	class:DVVideoStreamFramer
isDVVideoStreamFramer	DVVideoStreamFramer.cpp	/^Boolean DVVideoStreamFramer::isDVVideoStreamFramer() const {$/;"	f	class:DVVideoStreamFramer
name	DVVideoStreamFramer.cpp	/^  char const* name;$/;"	m	struct:DVVideoProfile	file:
profileName	DVVideoStreamFramer.cpp	/^char const* DVVideoStreamFramer::profileName() {$/;"	f	class:DVVideoStreamFramer
profiles	DVVideoStreamFramer.cpp	/^static DVVideoProfile const profiles[] = {$/;"	v	file:
sType	DVVideoStreamFramer.cpp	/^  unsigned sType;$/;"	m	struct:DVVideoProfile	file:
sequenceCount	DVVideoStreamFramer.cpp	/^  unsigned sequenceCount;$/;"	m	struct:DVVideoProfile	file:
~DVVideoStreamFramer	DVVideoStreamFramer.cpp	/^DVVideoStreamFramer::~DVVideoStreamFramer() {$/;"	f	class:DVVideoStreamFramer
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
DeviceSource	DeviceSource.cpp	/^DeviceSource::DeviceSource(UsageEnvironment& env,$/;"	f	class:DeviceSource
createNew	DeviceSource.cpp	/^DeviceSource::createNew(UsageEnvironment& env,$/;"	f	class:DeviceSource
deliverFrame	DeviceSource.cpp	/^void DeviceSource::deliverFrame() {$/;"	f	class:DeviceSource
deliverFrame0	DeviceSource.cpp	/^void DeviceSource::deliverFrame0(void* clientData) {$/;"	f	class:DeviceSource
doGetNextFrame	DeviceSource.cpp	/^void DeviceSource::doGetNextFrame() {$/;"	f	class:DeviceSource
eventTriggerId	DeviceSource.cpp	/^EventTriggerId DeviceSource::eventTriggerId = 0;$/;"	m	class:DeviceSource	file:
referenceCount	DeviceSource.cpp	/^unsigned DeviceSource::referenceCount = 0;$/;"	m	class:DeviceSource	file:
signalNewFrameData	DeviceSource.cpp	/^void signalNewFrameData() {$/;"	f
~DeviceSource	DeviceSource.cpp	/^DeviceSource::~DeviceSource() {$/;"	f	class:DeviceSource
Authenticator	DigestAuthentication.cpp	/^Authenticator::Authenticator() {$/;"	f	class:Authenticator
Authenticator	DigestAuthentication.cpp	/^Authenticator::Authenticator(char const* username, char const* password, Boolean passwordIsMD5) {$/;"	f	class:Authenticator
Authenticator	DigestAuthentication.cpp	/^Authenticator::Authenticator(const Authenticator& orig) {$/;"	f	class:Authenticator
assign	DigestAuthentication.cpp	/^void Authenticator::assign(char const* realm, char const* nonce,$/;"	f	class:Authenticator
assignRealmAndNonce	DigestAuthentication.cpp	/^void Authenticator::assignRealmAndNonce(char const* realm, char const* nonce) {$/;"	f	class:Authenticator
assignUsernameAndPassword	DigestAuthentication.cpp	/^void Authenticator::assignUsernameAndPassword(char const* username, char const* password, Boolean passwordIsMD5) {$/;"	f	class:Authenticator
computeDigestResponse	DigestAuthentication.cpp	/^char const* Authenticator::computeDigestResponse(char const* cmd,$/;"	f	class:Authenticator
operator <	DigestAuthentication.cpp	/^Boolean Authenticator::operator<(const Authenticator* rightSide) {$/;"	f	class:Authenticator
operator =	DigestAuthentication.cpp	/^Authenticator& Authenticator::operator=(const Authenticator& rightSide) {$/;"	f	class:Authenticator
reclaimDigestResponse	DigestAuthentication.cpp	/^void Authenticator::reclaimDigestResponse(char const* responseStr) const {$/;"	f	class:Authenticator
reset	DigestAuthentication.cpp	/^void Authenticator::reset() {$/;"	f	class:Authenticator
resetRealmAndNonce	DigestAuthentication.cpp	/^void Authenticator::resetRealmAndNonce() {$/;"	f	class:Authenticator
resetUsernameAndPassword	DigestAuthentication.cpp	/^void Authenticator::resetUsernameAndPassword() {$/;"	f	class:Authenticator
setRealmAndNonce	DigestAuthentication.cpp	/^void Authenticator::setRealmAndNonce(char const* realm, char const* nonce) {$/;"	f	class:Authenticator
setRealmAndRandomNonce	DigestAuthentication.cpp	/^void Authenticator::setRealmAndRandomNonce(char const* realm) {$/;"	f	class:Authenticator
setUsernameAndPassword	DigestAuthentication.cpp	/^void Authenticator::setUsernameAndPassword(char const* username,$/;"	f	class:Authenticator
~Authenticator	DigestAuthentication.cpp	/^Authenticator::~Authenticator() {$/;"	f	class:Authenticator
EBMLDataSize	EBMLNumber.cpp	/^EBMLDataSize::EBMLDataSize()$/;"	f	class:EBMLDataSize
EBMLId	EBMLNumber.cpp	/^EBMLId::EBMLId()$/;"	f	class:EBMLId
EBMLNumber	EBMLNumber.cpp	/^EBMLNumber::EBMLNumber(Boolean stripLeading1)$/;"	f	class:EBMLNumber
hexString	EBMLNumber.cpp	/^char* EBMLNumber::hexString() const {$/;"	f	class:EBMLNumber
stringName	EBMLNumber.cpp	/^char const* EBMLId::stringName() const {$/;"	f	class:EBMLId
val	EBMLNumber.cpp	/^u_int64_t EBMLNumber::val() const {$/;"	f	class:EBMLNumber
~EBMLDataSize	EBMLNumber.cpp	/^EBMLDataSize::~EBMLDataSize() {$/;"	f	class:EBMLDataSize
~EBMLId	EBMLNumber.cpp	/^EBMLId::~EBMLId() {$/;"	f	class:EBMLId
~EBMLNumber	EBMLNumber.cpp	/^EBMLNumber::~EBMLNumber() {$/;"	f	class:EBMLNumber
EBMLDataSize	EBMLNumber.hh	/^class EBMLDataSize: public EBMLNumber {$/;"	c
EBMLId	EBMLNumber.hh	/^class EBMLId: public EBMLNumber {$/;"	c
EBMLNumber	EBMLNumber.hh	/^class EBMLNumber {$/;"	c
EBML_NUMBER_MAX_LEN	EBMLNumber.hh	28;"	d
MATROSKA_ID_ATTACHED_FILE	EBMLNumber.hh	110;"	d
MATROSKA_ID_ATTACHMENTS	EBMLNumber.hh	109;"	d
MATROSKA_ID_AUDIO	EBMLNumber.hh	98;"	d
MATROSKA_ID_BIT_DEPTH	EBMLNumber.hh	102;"	d
MATROSKA_ID_BLOCK	EBMLNumber.hh	69;"	d
MATROSKA_ID_BLOCK_DURATION	EBMLNumber.hh	70;"	d
MATROSKA_ID_BLOCK_GROUP	EBMLNumber.hh	68;"	d
MATROSKA_ID_CHANNELS	EBMLNumber.hh	101;"	d
MATROSKA_ID_CLUSTER	EBMLNumber.hh	63;"	d
MATROSKA_ID_CODEC	EBMLNumber.hh	87;"	d
MATROSKA_ID_CODEC_DECODE_ALL	EBMLNumber.hh	90;"	d
MATROSKA_ID_CODEC_DELAY	EBMLNumber.hh	125;"	d
MATROSKA_ID_CODEC_NAME	EBMLNumber.hh	89;"	d
MATROSKA_ID_CODEC_PRIVATE	EBMLNumber.hh	88;"	d
MATROSKA_ID_CONTENT_COMPRESSION	EBMLNumber.hh	105;"	d
MATROSKA_ID_CONTENT_COMP_ALGO	EBMLNumber.hh	106;"	d
MATROSKA_ID_CONTENT_COMP_SETTINGS	EBMLNumber.hh	107;"	d
MATROSKA_ID_CONTENT_ENCODING	EBMLNumber.hh	104;"	d
MATROSKA_ID_CONTENT_ENCODINGS	EBMLNumber.hh	103;"	d
MATROSKA_ID_CONTENT_ENCRYPTION	EBMLNumber.hh	108;"	d
MATROSKA_ID_CRC_32	EBMLNumber.hh	49;"	d
MATROSKA_ID_CUES	EBMLNumber.hh	116;"	d
MATROSKA_ID_CUE_BLOCK_NUMBER	EBMLNumber.hh	122;"	d
MATROSKA_ID_CUE_CLUSTER_POSITION	EBMLNumber.hh	121;"	d
MATROSKA_ID_CUE_POINT	EBMLNumber.hh	117;"	d
MATROSKA_ID_CUE_TIME	EBMLNumber.hh	118;"	d
MATROSKA_ID_CUE_TRACK	EBMLNumber.hh	120;"	d
MATROSKA_ID_CUE_TRACK_POSITIONS	EBMLNumber.hh	119;"	d
MATROSKA_ID_DATE_UTC	EBMLNumber.hh	59;"	d
MATROSKA_ID_DEFAULT_DURATION	EBMLNumber.hh	82;"	d
MATROSKA_ID_DISCARD_PADDING	EBMLNumber.hh	126;"	d
MATROSKA_ID_DISPLAY_HEIGHT	EBMLNumber.hh	96;"	d
MATROSKA_ID_DISPLAY_UNIT	EBMLNumber.hh	97;"	d
MATROSKA_ID_DISPLAY_WIDTH	EBMLNumber.hh	95;"	d
MATROSKA_ID_DURATION	EBMLNumber.hh	58;"	d
MATROSKA_ID_EBML	EBMLNumber.hh	47;"	d
MATROSKA_ID_FILE_DATA	EBMLNumber.hh	114;"	d
MATROSKA_ID_FILE_DESCRIPTION	EBMLNumber.hh	111;"	d
MATROSKA_ID_FILE_MIME_TYPE	EBMLNumber.hh	113;"	d
MATROSKA_ID_FILE_NAME	EBMLNumber.hh	112;"	d
MATROSKA_ID_FILE_UID	EBMLNumber.hh	115;"	d
MATROSKA_ID_FLAG_DEFAULT	EBMLNumber.hh	78;"	d
MATROSKA_ID_FLAG_ENABLED	EBMLNumber.hh	77;"	d
MATROSKA_ID_FLAG_FORCED	EBMLNumber.hh	79;"	d
MATROSKA_ID_FLAG_INTERLACED	EBMLNumber.hh	92;"	d
MATROSKA_ID_FLAG_LACING	EBMLNumber.hh	80;"	d
MATROSKA_ID_INFO	EBMLNumber.hh	55;"	d
MATROSKA_ID_LANGUAGE	EBMLNumber.hh	86;"	d
MATROSKA_ID_MAX_BLOCK_ADDITION_ID	EBMLNumber.hh	84;"	d
MATROSKA_ID_MIN_CACHE	EBMLNumber.hh	81;"	d
MATROSKA_ID_MUXING_APP	EBMLNumber.hh	61;"	d
MATROSKA_ID_NAME	EBMLNumber.hh	85;"	d
MATROSKA_ID_OUTPUT_SAMPLING_FREQUENCY	EBMLNumber.hh	100;"	d
MATROSKA_ID_PIXEL_HEIGHT	EBMLNumber.hh	94;"	d
MATROSKA_ID_PIXEL_WIDTH	EBMLNumber.hh	93;"	d
MATROSKA_ID_POSITION	EBMLNumber.hh	65;"	d
MATROSKA_ID_PREV_SIZE	EBMLNumber.hh	66;"	d
MATROSKA_ID_REFERENCE_BLOCK	EBMLNumber.hh	71;"	d
MATROSKA_ID_SAMPLING_FREQUENCY	EBMLNumber.hh	99;"	d
MATROSKA_ID_SEEK	EBMLNumber.hh	52;"	d
MATROSKA_ID_SEEK_HEAD	EBMLNumber.hh	51;"	d
MATROSKA_ID_SEEK_ID	EBMLNumber.hh	53;"	d
MATROSKA_ID_SEEK_POSITION	EBMLNumber.hh	54;"	d
MATROSKA_ID_SEEK_PRE_ROLL	EBMLNumber.hh	124;"	d
MATROSKA_ID_SEGMENT	EBMLNumber.hh	50;"	d
MATROSKA_ID_SEGMENT_UID	EBMLNumber.hh	56;"	d
MATROSKA_ID_SIMPLEBLOCK	EBMLNumber.hh	67;"	d
MATROSKA_ID_TAGS	EBMLNumber.hh	123;"	d
MATROSKA_ID_TIMECODE	EBMLNumber.hh	64;"	d
MATROSKA_ID_TIMECODE_SCALE	EBMLNumber.hh	57;"	d
MATROSKA_ID_TITLE	EBMLNumber.hh	60;"	d
MATROSKA_ID_TRACKS	EBMLNumber.hh	72;"	d
MATROSKA_ID_TRACK_ENTRY	EBMLNumber.hh	73;"	d
MATROSKA_ID_TRACK_NUMBER	EBMLNumber.hh	74;"	d
MATROSKA_ID_TRACK_TIMECODE_SCALE	EBMLNumber.hh	83;"	d
MATROSKA_ID_TRACK_TYPE	EBMLNumber.hh	76;"	d
MATROSKA_ID_TRACK_UID	EBMLNumber.hh	75;"	d
MATROSKA_ID_VIDEO	EBMLNumber.hh	91;"	d
MATROSKA_ID_VOID	EBMLNumber.hh	48;"	d
MATROSKA_ID_WRITING_APP	EBMLNumber.hh	62;"	d
_EBML_NUMBER_HH	EBMLNumber.hh	22;"	d
data	EBMLNumber.hh	/^  u_int8_t data[EBML_NUMBER_MAX_LEN];$/;"	m	class:EBMLNumber
len	EBMLNumber.hh	/^  unsigned len;$/;"	m	class:EBMLNumber
operator !=	EBMLNumber.hh	/^  Boolean operator!=(u_int64_t arg2) const { return !(*this == arg2); }$/;"	f	class:EBMLNumber
operator ==	EBMLNumber.hh	/^  Boolean operator==(u_int64_t arg2) const { return val() == arg2; }$/;"	f	class:EBMLNumber
stripLeading1	EBMLNumber.hh	/^  Boolean stripLeading1;$/;"	m	class:EBMLNumber
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
FileServerMediaSubsession	FileServerMediaSubsession.cpp	/^::FileServerMediaSubsession(UsageEnvironment& env, char const* fileName,$/;"	f	class:FileServerMediaSubsession
~FileServerMediaSubsession	FileServerMediaSubsession.cpp	/^FileServerMediaSubsession::~FileServerMediaSubsession() {$/;"	f	class:FileServerMediaSubsession
FileSink	FileSink.cpp	/^FileSink::FileSink(UsageEnvironment& env, FILE* fid, unsigned bufferSize,$/;"	f	class:FileSink
addData	FileSink.cpp	/^void FileSink::addData(unsigned char const* data, unsigned dataSize,$/;"	f	class:FileSink
afterGettingFrame	FileSink.cpp	/^void FileSink::afterGettingFrame(unsigned frameSize,$/;"	f	class:FileSink
afterGettingFrame	FileSink.cpp	/^void FileSink::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:FileSink
continuePlaying	FileSink.cpp	/^Boolean FileSink::continuePlaying() {$/;"	f	class:FileSink
createNew	FileSink.cpp	/^FileSink* FileSink::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:FileSink
~FileSink	FileSink.cpp	/^FileSink::~FileSink() {$/;"	f	class:FileSink
FramedFileSource	FramedFileSource.cpp	/^FramedFileSource::FramedFileSource(UsageEnvironment& env, FILE* fid)$/;"	f	class:FramedFileSource
~FramedFileSource	FramedFileSource.cpp	/^FramedFileSource::~FramedFileSource() {$/;"	f	class:FramedFileSource
FramedFilter	FramedFilter.cpp	/^FramedFilter::FramedFilter(UsageEnvironment& env,$/;"	f	class:FramedFilter
MIMEtype	FramedFilter.cpp	/^char const* FramedFilter::MIMEtype() const {$/;"	f	class:FramedFilter
detachInputSource	FramedFilter.cpp	/^void FramedFilter::detachInputSource() {$/;"	f	class:FramedFilter
doStopGettingFrames	FramedFilter.cpp	/^void FramedFilter::doStopGettingFrames() {$/;"	f	class:FramedFilter
getAttributes	FramedFilter.cpp	/^void FramedFilter::getAttributes() const {$/;"	f	class:FramedFilter
~FramedFilter	FramedFilter.cpp	/^FramedFilter::~FramedFilter() {$/;"	f	class:FramedFilter
FramedSource	FramedSource.cpp	/^FramedSource::FramedSource(UsageEnvironment& env)$/;"	f	class:FramedSource
afterGetting	FramedSource.cpp	/^void FramedSource::afterGetting(FramedSource* source) {$/;"	f	class:FramedSource
doStopGettingFrames	FramedSource.cpp	/^void FramedSource::doStopGettingFrames() {$/;"	f	class:FramedSource
getNextFrame	FramedSource.cpp	/^void FramedSource::getNextFrame(unsigned char* to, unsigned maxSize,$/;"	f	class:FramedSource
handleClosure	FramedSource.cpp	/^void FramedSource::handleClosure() {$/;"	f	class:FramedSource
handleClosure	FramedSource.cpp	/^void FramedSource::handleClosure(void* clientData) {$/;"	f	class:FramedSource
isFramedSource	FramedSource.cpp	/^Boolean FramedSource::isFramedSource() const {$/;"	f	class:FramedSource
lookupByName	FramedSource.cpp	/^Boolean FramedSource::lookupByName(UsageEnvironment& env, char const* sourceName,$/;"	f	class:FramedSource
maxFrameSize	FramedSource.cpp	/^unsigned FramedSource::maxFrameSize() const {$/;"	f	class:FramedSource
stopGettingFrames	FramedSource.cpp	/^void FramedSource::stopGettingFrames() {$/;"	f	class:FramedSource
~FramedSource	FramedSource.cpp	/^FramedSource::~FramedSource() {$/;"	f	class:FramedSource
GSMAudioRTPSink	GSMAudioRTPSink.cpp	/^GSMAudioRTPSink::GSMAudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs)$/;"	f	class:GSMAudioRTPSink
createNew	GSMAudioRTPSink.cpp	/^GSMAudioRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs) {$/;"	f	class:GSMAudioRTPSink
frameCanAppearAfterPacketStart	GSMAudioRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:GSMAudioRTPSink
~GSMAudioRTPSink	GSMAudioRTPSink.cpp	/^GSMAudioRTPSink::~GSMAudioRTPSink() {$/;"	f	class:GSMAudioRTPSink
ClientConnection	GenericMediaServer.cpp	/^::ClientConnection(GenericMediaServer& ourServer, int clientSocket, struct sockaddr_in clientAddr)$/;"	f	class:GenericMediaServer::ClientConnection
ClientSession	GenericMediaServer.cpp	/^::ClientSession(GenericMediaServer& ourServer, u_int32_t sessionId)$/;"	f	class:GenericMediaServer::ClientSession
GenericMediaServer	GenericMediaServer.cpp	/^::GenericMediaServer(UsageEnvironment& env, int ourSocket, Port ourPort,$/;"	f	class:GenericMediaServer
LISTEN_BACKLOG_SIZE	GenericMediaServer.cpp	140;"	d	file:
ServerMediaSessionIterator	GenericMediaServer.cpp	/^::ServerMediaSessionIterator(GenericMediaServer& server)$/;"	f	class:GenericMediaServer::ServerMediaSessionIterator
UserAuthenticationDatabase	GenericMediaServer.cpp	/^UserAuthenticationDatabase::UserAuthenticationDatabase(char const* realm,$/;"	f	class:UserAuthenticationDatabase
addServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::addServerMediaSession(ServerMediaSession* serverMediaSession) {$/;"	f	class:GenericMediaServer
addUserRecord	GenericMediaServer.cpp	/^void UserAuthenticationDatabase::addUserRecord(char const* username,$/;"	f	class:UserAuthenticationDatabase
cleanup	GenericMediaServer.cpp	/^void GenericMediaServer::cleanup() {$/;"	f	class:GenericMediaServer
closeAllClientSessionsForServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::closeAllClientSessionsForServerMediaSession(ServerMediaSession* serverMediaSession) {$/;"	f	class:GenericMediaServer
closeAllClientSessionsForServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::closeAllClientSessionsForServerMediaSession(char const* streamName) {$/;"	f	class:GenericMediaServer
closeSockets	GenericMediaServer.cpp	/^void GenericMediaServer::ClientConnection::closeSockets() {$/;"	f	class:GenericMediaServer::ClientConnection
createNewClientSessionWithId	GenericMediaServer.cpp	/^GenericMediaServer::ClientSession* GenericMediaServer::createNewClientSessionWithId() {$/;"	f	class:GenericMediaServer
deleteServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::deleteServerMediaSession(ServerMediaSession* serverMediaSession) {$/;"	f	class:GenericMediaServer
deleteServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::deleteServerMediaSession(char const* streamName) {$/;"	f	class:GenericMediaServer
incomingConnectionHandler	GenericMediaServer.cpp	/^void GenericMediaServer::incomingConnectionHandler() {      $/;"	f	class:GenericMediaServer
incomingConnectionHandler	GenericMediaServer.cpp	/^void GenericMediaServer::incomingConnectionHandler(void* instance, int \/*mask*\/) {  \/\/供 env.taskScheduler() 回调的$/;"	f	class:GenericMediaServer
incomingConnectionHandlerOnSocket	GenericMediaServer.cpp	/^void GenericMediaServer::incomingConnectionHandlerOnSocket(int serverSocket) {$/;"	f	class:GenericMediaServer
incomingRequestHandler	GenericMediaServer.cpp	/^void GenericMediaServer::ClientConnection::incomingRequestHandler() {$/;"	f	class:GenericMediaServer::ClientConnection
incomingRequestHandler	GenericMediaServer.cpp	/^void GenericMediaServer::ClientConnection::incomingRequestHandler(void* instance, int \/*mask*\/) { 	\/\/envir().taskScheduler() 的回调，用于处理client请求$/;"	f	class:GenericMediaServer::ClientConnection
livenessTimeoutTask	GenericMediaServer.cpp	/^void GenericMediaServer::ClientSession::livenessTimeoutTask(ClientSession* clientSession) {$/;"	f	class:GenericMediaServer::ClientSession
lookupClientSession	GenericMediaServer.cpp	/^GenericMediaServer::lookupClientSession(char const* sessionIdStr) {$/;"	f	class:GenericMediaServer
lookupClientSession	GenericMediaServer.cpp	/^GenericMediaServer::lookupClientSession(u_int32_t sessionId) {$/;"	f	class:GenericMediaServer
lookupPassword	GenericMediaServer.cpp	/^char const* UserAuthenticationDatabase::lookupPassword(char const* username) {$/;"	f	class:UserAuthenticationDatabase
lookupServerMediaSession	GenericMediaServer.cpp	/^::lookupServerMediaSession(char const* streamName, Boolean \/*isFirstLookupInSession*\/) {$/;"	f	class:GenericMediaServer
next	GenericMediaServer.cpp	/^ServerMediaSession* GenericMediaServer::ServerMediaSessionIterator::next() {$/;"	f	class:GenericMediaServer::ServerMediaSessionIterator
noteClientLiveness	GenericMediaServer.cpp	/^void GenericMediaServer::ClientSession::noteClientLiveness(ClientSession* clientSession) {$/;"	f	class:GenericMediaServer::ClientSession
noteLiveness	GenericMediaServer.cpp	/^void GenericMediaServer::ClientSession::noteLiveness() {$/;"	f	class:GenericMediaServer::ClientSession
removeServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::removeServerMediaSession(ServerMediaSession* serverMediaSession) {$/;"	f	class:GenericMediaServer
removeServerMediaSession	GenericMediaServer.cpp	/^void GenericMediaServer::removeServerMediaSession(char const* streamName) {$/;"	f	class:GenericMediaServer
removeUserRecord	GenericMediaServer.cpp	/^void UserAuthenticationDatabase::removeUserRecord(char const* username) {$/;"	f	class:UserAuthenticationDatabase
resetRequestBuffer	GenericMediaServer.cpp	/^void GenericMediaServer::ClientConnection::resetRequestBuffer() {$/;"	f	class:GenericMediaServer::ClientConnection
setUpOurSocket	GenericMediaServer.cpp	/^int GenericMediaServer::setUpOurSocket(UsageEnvironment& env, Port& ourPort) {$/;"	f	class:GenericMediaServer
snprintf	GenericMediaServer.cpp	25;"	d	file:
~ClientConnection	GenericMediaServer.cpp	/^GenericMediaServer::ClientConnection::~ClientConnection() {$/;"	f	class:GenericMediaServer::ClientConnection
~ClientSession	GenericMediaServer.cpp	/^GenericMediaServer::ClientSession::~ClientSession() {$/;"	f	class:GenericMediaServer::ClientSession
~GenericMediaServer	GenericMediaServer.cpp	/^GenericMediaServer::~GenericMediaServer() {$/;"	f	class:GenericMediaServer
~ServerMediaSessionIterator	GenericMediaServer.cpp	/^GenericMediaServer::ServerMediaSessionIterator::~ServerMediaSessionIterator() {$/;"	f	class:GenericMediaServer::ServerMediaSessionIterator
~UserAuthenticationDatabase	GenericMediaServer.cpp	/^UserAuthenticationDatabase::~UserAuthenticationDatabase() {$/;"	f	class:UserAuthenticationDatabase
H261VideoRTPSource	H261VideoRTPSource.cpp	/^::H261VideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H261VideoRTPSource
MIMEtype	H261VideoRTPSource.cpp	/^char const* H261VideoRTPSource::MIMEtype() const {$/;"	f	class:H261VideoRTPSource
createNew	H261VideoRTPSource.cpp	/^H261VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H261VideoRTPSource
processSpecialHeader	H261VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:H261VideoRTPSource
~H261VideoRTPSource	H261VideoRTPSource.cpp	/^H261VideoRTPSource::~H261VideoRTPSource() {$/;"	f	class:H261VideoRTPSource
H263plusVideoFileServerMediaSubsession	H263plusVideoFileServerMediaSubsession.cpp	/^::H263plusVideoFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:H263plusVideoFileServerMediaSubsession
createNew	H263plusVideoFileServerMediaSubsession.cpp	/^H263plusVideoFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:H263plusVideoFileServerMediaSubsession
createNewRTPSink	H263plusVideoFileServerMediaSubsession.cpp	/^RTPSink* H263plusVideoFileServerMediaSubsession::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:H263plusVideoFileServerMediaSubsession
createNewStreamSource	H263plusVideoFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:H263plusVideoFileServerMediaSubsession
~H263plusVideoFileServerMediaSubsession	H263plusVideoFileServerMediaSubsession.cpp	/^H263plusVideoFileServerMediaSubsession::~H263plusVideoFileServerMediaSubsession() {$/;"	f	class:H263plusVideoFileServerMediaSubsession
H263plusVideoRTPSink	H263plusVideoRTPSink.cpp	/^::H263plusVideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H263plusVideoRTPSink
createNew	H263plusVideoRTPSink.cpp	/^H263plusVideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H263plusVideoRTPSink
doSpecialFrameHandling	H263plusVideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:H263plusVideoRTPSink
frameCanAppearAfterPacketStart	H263plusVideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:H263plusVideoRTPSink
specialHeaderSize	H263plusVideoRTPSink.cpp	/^unsigned H263plusVideoRTPSink::specialHeaderSize() const {$/;"	f	class:H263plusVideoRTPSink
~H263plusVideoRTPSink	H263plusVideoRTPSink.cpp	/^H263plusVideoRTPSink::~H263plusVideoRTPSink() {$/;"	f	class:H263plusVideoRTPSink
H263plusVideoRTPSource	H263plusVideoRTPSource.cpp	/^::H263plusVideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H263plusVideoRTPSource
MIMEtype	H263plusVideoRTPSource.cpp	/^char const* H263plusVideoRTPSource::MIMEtype() const {$/;"	f	class:H263plusVideoRTPSource
createNew	H263plusVideoRTPSource.cpp	/^H263plusVideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H263plusVideoRTPSource
processSpecialHeader	H263plusVideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:H263plusVideoRTPSource
~H263plusVideoRTPSource	H263plusVideoRTPSource.cpp	/^H263plusVideoRTPSource::~H263plusVideoRTPSource() {$/;"	f	class:H263plusVideoRTPSource
H263plusVideoStreamFramer	H263plusVideoStreamFramer.cpp	/^H263plusVideoStreamFramer::H263plusVideoStreamFramer($/;"	f	class:H263plusVideoStreamFramer
continueReadProcessing	H263plusVideoStreamFramer.cpp	/^void H263plusVideoStreamFramer::continueReadProcessing($/;"	f	class:H263plusVideoStreamFramer
continueReadProcessing	H263plusVideoStreamFramer.cpp	/^void H263plusVideoStreamFramer::continueReadProcessing()$/;"	f	class:H263plusVideoStreamFramer
createNew	H263plusVideoStreamFramer.cpp	/^H263plusVideoStreamFramer* H263plusVideoStreamFramer::createNew($/;"	f	class:H263plusVideoStreamFramer
doGetNextFrame	H263plusVideoStreamFramer.cpp	/^void H263plusVideoStreamFramer::doGetNextFrame()$/;"	f	class:H263plusVideoStreamFramer
isH263plusVideoStreamFramer	H263plusVideoStreamFramer.cpp	/^Boolean H263plusVideoStreamFramer::isH263plusVideoStreamFramer() const$/;"	f	class:H263plusVideoStreamFramer
~H263plusVideoStreamFramer	H263plusVideoStreamFramer.cpp	/^H263plusVideoStreamFramer::~H263plusVideoStreamFramer()$/;"	f	class:H263plusVideoStreamFramer
CalculateDuration	H263plusVideoStreamParser.cpp	/^u_int64_t H263plusVideoStreamParser::CalculateDuration(u_int8_t trDiff)$/;"	f	class:H263plusVideoStreamParser
GetMaxBitrate	H263plusVideoStreamParser.cpp	/^void H263plusVideoStreamParser::GetMaxBitrate( MaxBitrate_CTX *ctx,$/;"	f	class:H263plusVideoStreamParser
GetTRDifference	H263plusVideoStreamParser.cpp	/^u_int8_t H263plusVideoStreamParser::GetTRDifference($/;"	f	class:H263plusVideoStreamParser
GetWidthAndHeight	H263plusVideoStreamParser.cpp	/^bool H263plusVideoStreamParser::GetWidthAndHeight( u_int8_t  fmt,$/;"	f	class:H263plusVideoStreamParser
H263plusVideoStreamParser	H263plusVideoStreamParser.cpp	/^H263plusVideoStreamParser::H263plusVideoStreamParser($/;"	f	class:H263plusVideoStreamParser
ParseShortHeader	H263plusVideoStreamParser.cpp	/^bool H263plusVideoStreamParser::ParseShortHeader($/;"	f	class:H263plusVideoStreamParser
parse	H263plusVideoStreamParser.cpp	/^unsigned H263plusVideoStreamParser::parse(u_int64_t & currentDuration)$/;"	f	class:H263plusVideoStreamParser
parseH263Frame	H263plusVideoStreamParser.cpp	/^int H263plusVideoStreamParser::parseH263Frame( )$/;"	f	class:H263plusVideoStreamParser
registerReadInterest	H263plusVideoStreamParser.cpp	/^void H263plusVideoStreamParser::registerReadInterest($/;"	f	class:H263plusVideoStreamParser
restoreSavedParserState	H263plusVideoStreamParser.cpp	/^void H263plusVideoStreamParser::restoreSavedParserState()$/;"	f	class:H263plusVideoStreamParser
setParseState	H263plusVideoStreamParser.cpp	/^void H263plusVideoStreamParser::setParseState()$/;"	f	class:H263plusVideoStreamParser
~H263plusVideoStreamParser	H263plusVideoStreamParser.cpp	/^H263plusVideoStreamParser::~H263plusVideoStreamParser()$/;"	f	class:H263plusVideoStreamParser
ADDITIONAL_BYTES_NEEDED	H263plusVideoStreamParser.hh	48;"	d
H263INFO	H263plusVideoStreamParser.hh	/^} H263INFO;$/;"	t	typeref:struct:_H263INFO
H263_BASIC_FRAME_RATE	H263plusVideoStreamParser.hh	34;"	d
H263_BUFFER_SIZE	H263plusVideoStreamParser.hh	44;"	d
H263_DEFAULT_CBR_TOLERANCE	H263plusVideoStreamParser.hh	51;"	d
H263_REQUIRE_HEADER_SIZE_BYTES	H263plusVideoStreamParser.hh	37;"	d
H263_STARTCODE_SIZE_BYTES	H263plusVideoStreamParser.hh	40;"	d
H263_TIMESCALE	H263plusVideoStreamParser.hh	31;"	d
H263plusVideoStreamParser	H263plusVideoStreamParser.hh	/^class H263plusVideoStreamParser : public StreamParser {$/;"	c
MaxBitrate_CTX	H263plusVideoStreamParser.hh	/^} MaxBitrate_CTX;$/;"	t	typeref:struct:_MaxBitrate_CTX
_H263INFO	H263plusVideoStreamParser.hh	/^typedef struct _H263INFO {$/;"	s
_H263PLUS_VIDEO_STREAM_PARSER_HH	H263plusVideoStreamParser.hh	23;"	d
_MaxBitrate_CTX	H263plusVideoStreamParser.hh	/^typedef struct _MaxBitrate_CTX {$/;"	s
bitrateTable	H263plusVideoStreamParser.hh	/^  u_int32_t  bitrateTable[H263_BASIC_FRAME_RATE];\/\/ Window of 1 second$/;"	m	struct:_MaxBitrate_CTX
fCurrentInfo	H263plusVideoStreamParser.hh	/^   H263INFO       fCurrentInfo;    \/\/ Holds information about the current frame$/;"	m	class:H263plusVideoStreamParser
fLimit	H263plusVideoStreamParser.hh	/^   unsigned char* fLimit;$/;"	m	class:H263plusVideoStreamParser
fMaxBitrateCtx	H263plusVideoStreamParser.hh	/^   MaxBitrate_CTX fMaxBitrateCtx;  \/\/ Context for the GetMaxBitrate function$/;"	m	class:H263plusVideoStreamParser
fMaxSize	H263plusVideoStreamParser.hh	/^   unsigned       fMaxSize;$/;"	m	class:H263plusVideoStreamParser
fNextHeader	H263plusVideoStreamParser.hh	/^   u_int8_t       fNextHeader[H263_REQUIRE_HEADER_SIZE_BYTES];$/;"	m	class:H263plusVideoStreamParser
fNextInfo	H263plusVideoStreamParser.hh	/^   H263INFO       fNextInfo;       \/\/ Holds information about the next frame$/;"	m	class:H263plusVideoStreamParser
fNumTruncatedBytes	H263plusVideoStreamParser.hh	/^   unsigned       fNumTruncatedBytes;$/;"	m	class:H263plusVideoStreamParser
fSavedNumTruncatedBytes	H263plusVideoStreamParser.hh	/^   unsigned       fSavedNumTruncatedBytes;$/;"	m	class:H263plusVideoStreamParser
fSavedTo	H263plusVideoStreamParser.hh	/^   unsigned char* fSavedTo;$/;"	m	class:H263plusVideoStreamParser
fStartOfFrame	H263plusVideoStreamParser.hh	/^   unsigned char* fStartOfFrame;$/;"	m	class:H263plusVideoStreamParser
fStates	H263plusVideoStreamParser.hh	/^   char           fStates[3][256];$/;"	m	class:H263plusVideoStreamParser
fTo	H263plusVideoStreamParser.hh	/^   unsigned char* fTo;$/;"	m	class:H263plusVideoStreamParser
fUsingSource	H263plusVideoStreamParser.hh	/^   class H263plusVideoStreamFramer* fUsingSource;$/;"	m	class:H263plusVideoStreamParser	typeref:class:H263plusVideoStreamParser::H263plusVideoStreamFramer
fcurrentPT	H263plusVideoStreamParser.hh	/^  u_int64_t fcurrentPT;   \/\/ The current frame's presentation time in milli-seconds$/;"	m	class:H263plusVideoStreamParser
fnextTR	H263plusVideoStreamParser.hh	/^  u_int32_t fnextTR;   \/\/ The next frame's presentation time in TR units$/;"	m	class:H263plusVideoStreamParser
height	H263plusVideoStreamParser.hh	/^  u_int16_t height;             \/\/ Height of the picture$/;"	m	struct:_H263INFO
isSyncFrame	H263plusVideoStreamParser.hh	/^  bool      isSyncFrame;        \/\/ Frame type (true = I frame = "sync" frame)$/;"	m	struct:_H263INFO
maxBitrate	H263plusVideoStreamParser.hh	/^  u_int32_t  maxBitrate;                 \/\/ The up-to-date maximum bitrate$/;"	m	struct:_MaxBitrate_CTX
numTruncatedBytes	H263plusVideoStreamParser.hh	/^   unsigned numTruncatedBytes() const { return fNumTruncatedBytes; }  \/\/ The number of truncated bytes (if any)$/;"	f	class:H263plusVideoStreamParser
tableIndex	H263plusVideoStreamParser.hh	/^  u_int32_t  tableIndex;                 \/\/ The next TR unit to update$/;"	m	struct:_MaxBitrate_CTX
tr	H263plusVideoStreamParser.hh	/^  u_int8_t  tr;                 \/\/ Temporal Reference, used in duration calculation$/;"	m	struct:_H263INFO
width	H263plusVideoStreamParser.hh	/^  u_int16_t width;              \/\/ Width of the picture$/;"	m	struct:_H263INFO
windowBitrate	H263plusVideoStreamParser.hh	/^  u_int32_t  windowBitrate;              \/\/ The bitrate of the current window$/;"	m	struct:_MaxBitrate_CTX
H264VideoFileServerMediaSubsession	H264VideoFileServerMediaSubsession.cpp	/^H264VideoFileServerMediaSubsession::H264VideoFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:H264VideoFileServerMediaSubsession
afterPlayingDummy	H264VideoFileServerMediaSubsession.cpp	/^static void afterPlayingDummy(void* clientData) {$/;"	f	file:
afterPlayingDummy1	H264VideoFileServerMediaSubsession.cpp	/^void H264VideoFileServerMediaSubsession::afterPlayingDummy1() {$/;"	f	class:H264VideoFileServerMediaSubsession
checkForAuxSDPLine	H264VideoFileServerMediaSubsession.cpp	/^static void checkForAuxSDPLine(void* clientData) {$/;"	f	file:
checkForAuxSDPLine1	H264VideoFileServerMediaSubsession.cpp	/^void H264VideoFileServerMediaSubsession::checkForAuxSDPLine1() {$/;"	f	class:H264VideoFileServerMediaSubsession
createNew	H264VideoFileServerMediaSubsession.cpp	/^H264VideoFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:H264VideoFileServerMediaSubsession
createNewRTPSink	H264VideoFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:H264VideoFileServerMediaSubsession
createNewStreamSource	H264VideoFileServerMediaSubsession.cpp	/^FramedSource* H264VideoFileServerMediaSubsession::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:H264VideoFileServerMediaSubsession
getAuxSDPLine	H264VideoFileServerMediaSubsession.cpp	/^char const* H264VideoFileServerMediaSubsession::getAuxSDPLine(RTPSink* rtpSink, FramedSource* inputSource) {$/;"	f	class:H264VideoFileServerMediaSubsession
~H264VideoFileServerMediaSubsession	H264VideoFileServerMediaSubsession.cpp	/^H264VideoFileServerMediaSubsession::~H264VideoFileServerMediaSubsession() {$/;"	f	class:H264VideoFileServerMediaSubsession
H264VideoFileSink	H264VideoFileSink.cpp	/^::H264VideoFileSink(UsageEnvironment& env, FILE* fid,$/;"	f	class:H264VideoFileSink
createNew	H264VideoFileSink.cpp	/^H264VideoFileSink::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:H264VideoFileSink
~H264VideoFileSink	H264VideoFileSink.cpp	/^H264VideoFileSink::~H264VideoFileSink() {$/;"	f	class:H264VideoFileSink
H264VideoRTPSink	H264VideoRTPSink.cpp	/^::H264VideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat,$/;"	f	class:H264VideoRTPSink
auxSDPLine	H264VideoRTPSink.cpp	/^char const* H264VideoRTPSink::auxSDPLine() {$/;"	f	class:H264VideoRTPSink
createNew	H264VideoRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat) {$/;"	f	class:H264VideoRTPSink
createNew	H264VideoRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat,$/;"	f	class:H264VideoRTPSink
sourceIsCompatibleWithUs	H264VideoRTPSink.cpp	/^Boolean H264VideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:H264VideoRTPSink
~H264VideoRTPSink	H264VideoRTPSink.cpp	/^H264VideoRTPSink::~H264VideoRTPSink() {$/;"	f	class:H264VideoRTPSink
H264BufferedPacket	H264VideoRTPSource.cpp	/^H264BufferedPacket::H264BufferedPacket(H264VideoRTPSource& ourSource)$/;"	f	class:H264BufferedPacket
H264BufferedPacket	H264VideoRTPSource.cpp	/^class H264BufferedPacket: public BufferedPacket {$/;"	c	file:
H264BufferedPacketFactory	H264VideoRTPSource.cpp	/^class H264BufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
H264VideoRTPSource	H264VideoRTPSource.cpp	/^::H264VideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H264VideoRTPSource
MIMEtype	H264VideoRTPSource.cpp	/^char const* H264VideoRTPSource::MIMEtype() const {$/;"	f	class:H264VideoRTPSource
createNew	H264VideoRTPSource.cpp	/^H264VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H264VideoRTPSource
createNewPacket	H264VideoRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:H264BufferedPacketFactory
fOurSource	H264VideoRTPSource.cpp	/^  H264VideoRTPSource& fOurSource;$/;"	m	class:H264BufferedPacket	file:
nextEnclosedFrameSize	H264VideoRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:H264BufferedPacket
parseSPropParameterSets	H264VideoRTPSource.cpp	/^SPropRecord* parseSPropParameterSets(char const* sPropParameterSetsStr,$/;"	f
processSpecialHeader	H264VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:H264VideoRTPSource
~H264BufferedPacket	H264VideoRTPSource.cpp	/^H264BufferedPacket::~H264BufferedPacket() {$/;"	f	class:H264BufferedPacket
~H264VideoRTPSource	H264VideoRTPSource.cpp	/^H264VideoRTPSource::~H264VideoRTPSource() {$/;"	f	class:H264VideoRTPSource
H264VideoStreamDiscreteFramer	H264VideoStreamDiscreteFramer.cpp	/^::H264VideoStreamDiscreteFramer(UsageEnvironment& env, FramedSource* inputSource)$/;"	f	class:H264VideoStreamDiscreteFramer
createNew	H264VideoStreamDiscreteFramer.cpp	/^H264VideoStreamDiscreteFramer::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:H264VideoStreamDiscreteFramer
isH264VideoStreamFramer	H264VideoStreamDiscreteFramer.cpp	/^Boolean H264VideoStreamDiscreteFramer::isH264VideoStreamFramer() const {$/;"	f	class:H264VideoStreamDiscreteFramer
~H264VideoStreamDiscreteFramer	H264VideoStreamDiscreteFramer.cpp	/^H264VideoStreamDiscreteFramer::~H264VideoStreamDiscreteFramer() {$/;"	f	class:H264VideoStreamDiscreteFramer
H264VideoStreamFramer	H264VideoStreamFramer.cpp	/^::H264VideoStreamFramer(UsageEnvironment& env, FramedSource* inputSource, Boolean createParser, Boolean includeStartCodeInOutput)$/;"	f	class:H264VideoStreamFramer
createNew	H264VideoStreamFramer.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource, Boolean includeStartCodeInOutput) {$/;"	f	class:H264VideoStreamFramer
isH264VideoStreamFramer	H264VideoStreamFramer.cpp	/^Boolean H264VideoStreamFramer::isH264VideoStreamFramer() const {$/;"	f	class:H264VideoStreamFramer
~H264VideoStreamFramer	H264VideoStreamFramer.cpp	/^H264VideoStreamFramer::~H264VideoStreamFramer() {$/;"	f	class:H264VideoStreamFramer
H264or5VideoFileSink	H264or5VideoFileSink.cpp	/^::H264or5VideoFileSink(UsageEnvironment& env, FILE* fid,$/;"	f	class:H264or5VideoFileSink
afterGettingFrame	H264or5VideoFileSink.cpp	/^void H264or5VideoFileSink::afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes, struct timeval presentationTime) {$/;"	f	class:H264or5VideoFileSink
~H264or5VideoFileSink	H264or5VideoFileSink.cpp	/^H264or5VideoFileSink::~H264or5VideoFileSink() {$/;"	f	class:H264or5VideoFileSink
H264or5Fragmenter	H264or5VideoRTPSink.cpp	/^H264or5Fragmenter::H264or5Fragmenter(int hNumber,$/;"	f	class:H264or5Fragmenter
H264or5Fragmenter	H264or5VideoRTPSink.cpp	/^class H264or5Fragmenter: public FramedFilter {$/;"	c	file:
H264or5VideoRTPSink	H264or5VideoRTPSink.cpp	/^::H264or5VideoRTPSink(int hNumber,$/;"	f	class:H264or5VideoRTPSink
afterGettingFrame	H264or5VideoRTPSink.cpp	/^void H264or5Fragmenter::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:H264or5Fragmenter
afterGettingFrame1	H264or5VideoRTPSink.cpp	/^void H264or5Fragmenter::afterGettingFrame1(unsigned frameSize,$/;"	f	class:H264or5Fragmenter
continuePlaying	H264or5VideoRTPSink.cpp	/^Boolean H264or5VideoRTPSink::continuePlaying() {$/;"	f	class:H264or5VideoRTPSink
doGetNextFrame	H264or5VideoRTPSink.cpp	/^void H264or5Fragmenter::doGetNextFrame() {$/;"	f	class:H264or5Fragmenter
doSpecialFrameHandling	H264or5VideoRTPSink.cpp	/^void H264or5VideoRTPSink::doSpecialFrameHandling(unsigned \/*fragmentationOffset*\/,$/;"	f	class:H264or5VideoRTPSink
doStopGettingFrames	H264or5VideoRTPSink.cpp	/^void H264or5Fragmenter::doStopGettingFrames() {$/;"	f	class:H264or5Fragmenter
fCurDataOffset	H264or5VideoRTPSink.cpp	/^  unsigned fCurDataOffset;$/;"	m	class:H264or5Fragmenter	file:
fHNumber	H264or5VideoRTPSink.cpp	/^  int fHNumber;$/;"	m	class:H264or5Fragmenter	file:
fInputBuffer	H264or5VideoRTPSink.cpp	/^  unsigned char* fInputBuffer;$/;"	m	class:H264or5Fragmenter	file:
fInputBufferSize	H264or5VideoRTPSink.cpp	/^  unsigned fInputBufferSize;$/;"	m	class:H264or5Fragmenter	file:
fLastFragmentCompletedNALUnit	H264or5VideoRTPSink.cpp	/^  Boolean fLastFragmentCompletedNALUnit;$/;"	m	class:H264or5Fragmenter	file:
fMaxOutputPacketSize	H264or5VideoRTPSink.cpp	/^  unsigned fMaxOutputPacketSize;$/;"	m	class:H264or5Fragmenter	file:
fNumValidDataBytes	H264or5VideoRTPSink.cpp	/^  unsigned fNumValidDataBytes;$/;"	m	class:H264or5Fragmenter	file:
fSaveNumTruncatedBytes	H264or5VideoRTPSink.cpp	/^  unsigned fSaveNumTruncatedBytes;$/;"	m	class:H264or5Fragmenter	file:
frameCanAppearAfterPacketStart	H264or5VideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:H264or5VideoRTPSink
lastFragmentCompletedNALUnit	H264or5VideoRTPSink.cpp	/^  Boolean lastFragmentCompletedNALUnit() const { return fLastFragmentCompletedNALUnit; }$/;"	f	class:H264or5Fragmenter
reset	H264or5VideoRTPSink.cpp	/^void H264or5Fragmenter::reset() {$/;"	f	class:H264or5Fragmenter
~H264or5Fragmenter	H264or5VideoRTPSink.cpp	/^H264or5Fragmenter::~H264or5Fragmenter() {$/;"	f	class:H264or5Fragmenter
~H264or5VideoRTPSink	H264or5VideoRTPSink.cpp	/^H264or5VideoRTPSink::~H264or5VideoRTPSink() {$/;"	f	class:H264or5VideoRTPSink
H264or5VideoStreamDiscreteFramer	H264or5VideoStreamDiscreteFramer.cpp	/^::H264or5VideoStreamDiscreteFramer(int hNumber, UsageEnvironment& env, FramedSource* inputSource)$/;"	f	class:H264or5VideoStreamDiscreteFramer
afterGettingFrame	H264or5VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:H264or5VideoStreamDiscreteFramer
afterGettingFrame1	H264or5VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:H264or5VideoStreamDiscreteFramer
doGetNextFrame	H264or5VideoStreamDiscreteFramer.cpp	/^void H264or5VideoStreamDiscreteFramer::doGetNextFrame() {$/;"	f	class:H264or5VideoStreamDiscreteFramer
nalUnitEndsAccessUnit	H264or5VideoStreamDiscreteFramer.cpp	/^Boolean H264or5VideoStreamDiscreteFramer::nalUnitEndsAccessUnit(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamDiscreteFramer
~H264or5VideoStreamDiscreteFramer	H264or5VideoStreamDiscreteFramer.cpp	/^H264or5VideoStreamDiscreteFramer::~H264or5VideoStreamDiscreteFramer() {$/;"	f	class:H264or5VideoStreamDiscreteFramer
CpbDpbDelaysPresentFlag	H264or5VideoStreamFramer.cpp	/^  Boolean CpbDpbDelaysPresentFlag, pic_struct_present_flag;$/;"	m	class:H264or5VideoStreamParser	file:
DEBUG_PRINT	H264or5VideoStreamFramer.cpp	299;"	d	file:
DEBUG_PRINT	H264or5VideoStreamFramer.cpp	308;"	d	file:
DEBUG_PRINT_TABS	H264or5VideoStreamFramer.cpp	298;"	d	file:
DEBUG_STR	H264or5VideoStreamFramer.cpp	300;"	d	file:
DEBUG_STR	H264or5VideoStreamFramer.cpp	310;"	d	file:
DEBUG_TAB	H264or5VideoStreamFramer.cpp	306;"	d	file:
DEBUG_TAB	H264or5VideoStreamFramer.cpp	311;"	d	file:
DebugTab	H264or5VideoStreamFramer.cpp	/^  DebugTab() {++numDebugTabs;}$/;"	f	class:DebugTab
DebugTab	H264or5VideoStreamFramer.cpp	/^class DebugTab {$/;"	c	file:
DeltaTfiDivisor	H264or5VideoStreamFramer.cpp	/^  double DeltaTfiDivisor;$/;"	m	class:H264or5VideoStreamParser	file:
H264or5VideoStreamFramer	H264or5VideoStreamFramer.cpp	/^::H264or5VideoStreamFramer(int hNumber, UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:H264or5VideoStreamFramer
H264or5VideoStreamParser	H264or5VideoStreamFramer.cpp	/^::H264or5VideoStreamParser(int hNumber, H264or5VideoStreamFramer* usingSource,$/;"	f	class:H264or5VideoStreamParser
H264or5VideoStreamParser	H264or5VideoStreamFramer.cpp	/^class H264or5VideoStreamParser: public MPEGVideoStreamParser {$/;"	c	file:
MAX_SEI_PAYLOAD_TYPE_DESCRIPTION_H264	H264or5VideoStreamFramer.cpp	772;"	d	file:
NUM_NEXT_SLICE_HEADER_BYTES_TO_ANALYZE	H264or5VideoStreamFramer.cpp	943;"	d	file:
PREFIX_SEI_NUT	H264or5VideoStreamFramer.cpp	162;"	d	file:
SEI_MAX_SIZE	H264or5VideoStreamFramer.cpp	769;"	d	file:
SPS_MAX_SIZE	H264or5VideoStreamFramer.cpp	107;"	d	file:
SUFFIX_SEI_NUT	H264or5VideoStreamFramer.cpp	163;"	d	file:
VPS_MAX_SIZE	H264or5VideoStreamFramer.cpp	96;"	d	file:
analyze_hrd_parameters	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamParser::analyze_hrd_parameters(BitVector& bv) {$/;"	f	class:H264or5VideoStreamParser
analyze_sei_data	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamParser::analyze_sei_data(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamParser
analyze_sei_payload	H264or5VideoStreamFramer.cpp	/^::analyze_sei_payload(unsigned payloadType, unsigned payloadSize, u_int8_t* payload) {$/;"	f	class:H264or5VideoStreamParser
analyze_seq_parameter_set_data	H264or5VideoStreamFramer.cpp	/^::analyze_seq_parameter_set_data(unsigned& num_units_in_tick, unsigned& time_scale) {$/;"	f	class:H264or5VideoStreamParser
analyze_video_parameter_set_data	H264or5VideoStreamFramer.cpp	/^::analyze_video_parameter_set_data(unsigned& num_units_in_tick, unsigned& time_scale) {$/;"	f	class:H264or5VideoStreamParser
analyze_vui_parameters	H264or5VideoStreamFramer.cpp	/^::analyze_vui_parameters(BitVector& bv,$/;"	f	class:H264or5VideoStreamParser
cpb_removal_delay_length_minus1	H264or5VideoStreamFramer.cpp	/^  unsigned cpb_removal_delay_length_minus1, dpb_output_delay_length_minus1;$/;"	m	class:H264or5VideoStreamParser	file:
dpb_output_delay_length_minus1	H264or5VideoStreamFramer.cpp	/^  unsigned cpb_removal_delay_length_minus1, dpb_output_delay_length_minus1;$/;"	m	class:H264or5VideoStreamParser	file:
fFirstByteOfNALUnit	H264or5VideoStreamFramer.cpp	/^  u_int8_t fFirstByteOfNALUnit;$/;"	m	class:H264or5VideoStreamParser	file:
fHNumber	H264or5VideoStreamFramer.cpp	/^  int fHNumber; \/\/ 264 or 265$/;"	m	class:H264or5VideoStreamParser	file:
fHaveSeenFirstByteOfNALUnit	H264or5VideoStreamFramer.cpp	/^  Boolean fHaveSeenFirstStartCode, fHaveSeenFirstByteOfNALUnit;$/;"	m	class:H264or5VideoStreamParser	file:
fHaveSeenFirstStartCode	H264or5VideoStreamFramer.cpp	/^  Boolean fHaveSeenFirstStartCode, fHaveSeenFirstByteOfNALUnit;$/;"	m	class:H264or5VideoStreamParser	file:
fOutputStartCodeSize	H264or5VideoStreamFramer.cpp	/^  unsigned fOutputStartCodeSize;$/;"	m	class:H264or5VideoStreamParser	file:
fParsedFrameRate	H264or5VideoStreamFramer.cpp	/^  double fParsedFrameRate;$/;"	m	class:H264or5VideoStreamParser	file:
flushInput	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamParser::flushInput() {$/;"	f	class:H264or5VideoStreamParser
isEOF	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamParser::isEOF(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamParser
isPPS	H264or5VideoStreamFramer.cpp	/^  Boolean isPPS(u_int8_t nal_unit_type) { return usingSource()->isPPS(nal_unit_type); }$/;"	f	class:H264or5VideoStreamParser	file:
isPPS	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamFramer::isPPS(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamFramer
isSEI	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamParser::isSEI(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamParser
isSPS	H264or5VideoStreamFramer.cpp	/^  Boolean isSPS(u_int8_t nal_unit_type) { return usingSource()->isSPS(nal_unit_type); }$/;"	f	class:H264or5VideoStreamParser	file:
isSPS	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamFramer::isSPS(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamFramer
isVCL	H264or5VideoStreamFramer.cpp	/^  Boolean isVCL(u_int8_t nal_unit_type) { return usingSource()->isVCL(nal_unit_type); }$/;"	f	class:H264or5VideoStreamParser	file:
isVCL	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamFramer::isVCL(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamFramer
isVPS	H264or5VideoStreamFramer.cpp	/^  Boolean isVPS(u_int8_t nal_unit_type) { return usingSource()->isVPS(nal_unit_type); }$/;"	f	class:H264or5VideoStreamParser	file:
isVPS	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamFramer::isVPS(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamFramer
nal_unit_type_description_h264	H264or5VideoStreamFramer.cpp	/^char const* nal_unit_type_description_h264[32] = {$/;"	v
nal_unit_type_description_h265	H264or5VideoStreamFramer.cpp	/^char const* nal_unit_type_description_h265[64] = {$/;"	v
numDebugTabs	H264or5VideoStreamFramer.cpp	/^static unsigned numDebugTabs = 1;$/;"	v	file:
parse	H264or5VideoStreamFramer.cpp	/^unsigned H264or5VideoStreamParser::parse() {$/;"	f	class:H264or5VideoStreamParser
pic_struct_present_flag	H264or5VideoStreamFramer.cpp	/^  Boolean CpbDpbDelaysPresentFlag, pic_struct_present_flag;$/;"	m	class:H264or5VideoStreamParser	file:
profile_tier_level	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamParser::profile_tier_level(BitVector& bv, unsigned max_sub_layers_minus1) {$/;"	f	class:H264or5VideoStreamParser
removeEmulationBytes	H264or5VideoStreamFramer.cpp	/^::removeEmulationBytes(u_int8_t* nalUnitCopy, unsigned maxSize, unsigned& nalUnitCopySize) {$/;"	f	class:H264or5VideoStreamParser
removeH264or5EmulationBytes	H264or5VideoStreamFramer.cpp	/^unsigned removeH264or5EmulationBytes(u_int8_t* to, unsigned toMaxSize,$/;"	f
saveCopyOfPPS	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamFramer::saveCopyOfPPS(u_int8_t* from, unsigned size) {$/;"	f	class:H264or5VideoStreamFramer
saveCopyOfSPS	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamFramer::saveCopyOfSPS(u_int8_t* from, unsigned size) {$/;"	f	class:H264or5VideoStreamFramer
saveCopyOfVPS	H264or5VideoStreamFramer.cpp	/^void H264or5VideoStreamFramer::saveCopyOfVPS(u_int8_t* from, unsigned size) {$/;"	f	class:H264or5VideoStreamFramer
sei_payloadType_description_h264	H264or5VideoStreamFramer.cpp	/^char const* sei_payloadType_description_h264[MAX_SEI_PAYLOAD_TYPE_DESCRIPTION_H264+1] = {$/;"	v
usingSource	H264or5VideoStreamFramer.cpp	/^  H264or5VideoStreamFramer* usingSource() {$/;"	f	class:H264or5VideoStreamParser	file:
usuallyBeginsAccessUnit	H264or5VideoStreamFramer.cpp	/^Boolean H264or5VideoStreamParser::usuallyBeginsAccessUnit(u_int8_t nal_unit_type) {$/;"	f	class:H264or5VideoStreamParser
~DebugTab	H264or5VideoStreamFramer.cpp	/^  ~DebugTab() {--numDebugTabs;}$/;"	f	class:DebugTab
~H264or5VideoStreamFramer	H264or5VideoStreamFramer.cpp	/^H264or5VideoStreamFramer::~H264or5VideoStreamFramer() {$/;"	f	class:H264or5VideoStreamFramer
~H264or5VideoStreamParser	H264or5VideoStreamFramer.cpp	/^H264or5VideoStreamParser::~H264or5VideoStreamParser() {$/;"	f	class:H264or5VideoStreamParser
H265VideoFileServerMediaSubsession	H265VideoFileServerMediaSubsession.cpp	/^H265VideoFileServerMediaSubsession::H265VideoFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:H265VideoFileServerMediaSubsession
afterPlayingDummy	H265VideoFileServerMediaSubsession.cpp	/^static void afterPlayingDummy(void* clientData) {$/;"	f	file:
afterPlayingDummy1	H265VideoFileServerMediaSubsession.cpp	/^void H265VideoFileServerMediaSubsession::afterPlayingDummy1() {$/;"	f	class:H265VideoFileServerMediaSubsession
checkForAuxSDPLine	H265VideoFileServerMediaSubsession.cpp	/^static void checkForAuxSDPLine(void* clientData) {$/;"	f	file:
checkForAuxSDPLine1	H265VideoFileServerMediaSubsession.cpp	/^void H265VideoFileServerMediaSubsession::checkForAuxSDPLine1() {$/;"	f	class:H265VideoFileServerMediaSubsession
createNew	H265VideoFileServerMediaSubsession.cpp	/^H265VideoFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:H265VideoFileServerMediaSubsession
createNewRTPSink	H265VideoFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:H265VideoFileServerMediaSubsession
createNewStreamSource	H265VideoFileServerMediaSubsession.cpp	/^FramedSource* H265VideoFileServerMediaSubsession::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:H265VideoFileServerMediaSubsession
getAuxSDPLine	H265VideoFileServerMediaSubsession.cpp	/^char const* H265VideoFileServerMediaSubsession::getAuxSDPLine(RTPSink* rtpSink, FramedSource* inputSource) {$/;"	f	class:H265VideoFileServerMediaSubsession
~H265VideoFileServerMediaSubsession	H265VideoFileServerMediaSubsession.cpp	/^H265VideoFileServerMediaSubsession::~H265VideoFileServerMediaSubsession() {$/;"	f	class:H265VideoFileServerMediaSubsession
H265VideoFileSink	H265VideoFileSink.cpp	/^::H265VideoFileSink(UsageEnvironment& env, FILE* fid,$/;"	f	class:H265VideoFileSink
createNew	H265VideoFileSink.cpp	/^H265VideoFileSink::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:H265VideoFileSink
~H265VideoFileSink	H265VideoFileSink.cpp	/^H265VideoFileSink::~H265VideoFileSink() {$/;"	f	class:H265VideoFileSink
H265VideoRTPSink	H265VideoRTPSink.cpp	/^::H265VideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat,$/;"	f	class:H265VideoRTPSink
auxSDPLine	H265VideoRTPSink.cpp	/^char const* H265VideoRTPSink::auxSDPLine() {$/;"	f	class:H265VideoRTPSink
createNew	H265VideoRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat) {$/;"	f	class:H265VideoRTPSink
createNew	H265VideoRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat,$/;"	f	class:H265VideoRTPSink
sourceIsCompatibleWithUs	H265VideoRTPSink.cpp	/^Boolean H265VideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:H265VideoRTPSink
~H265VideoRTPSink	H265VideoRTPSink.cpp	/^H265VideoRTPSink::~H265VideoRTPSink() {$/;"	f	class:H265VideoRTPSink
H265BufferedPacket	H265VideoRTPSource.cpp	/^H265BufferedPacket::H265BufferedPacket(H265VideoRTPSource& ourSource)$/;"	f	class:H265BufferedPacket
H265BufferedPacket	H265VideoRTPSource.cpp	/^class H265BufferedPacket: public BufferedPacket {$/;"	c	file:
H265BufferedPacketFactory	H265VideoRTPSource.cpp	/^class H265BufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
H265VideoRTPSource	H265VideoRTPSource.cpp	/^::H265VideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H265VideoRTPSource
MIMEtype	H265VideoRTPSource.cpp	/^char const* H265VideoRTPSource::MIMEtype() const {$/;"	f	class:H265VideoRTPSource
computeAbsDonFromDON	H265VideoRTPSource.cpp	/^void H265VideoRTPSource::computeAbsDonFromDON(u_int16_t DON) {$/;"	f	class:H265VideoRTPSource
createNew	H265VideoRTPSource.cpp	/^H265VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:H265VideoRTPSource
createNewPacket	H265VideoRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:H265BufferedPacketFactory
fOurSource	H265VideoRTPSource.cpp	/^  H265VideoRTPSource& fOurSource;$/;"	m	class:H265BufferedPacket	file:
nextEnclosedFrameSize	H265VideoRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:H265BufferedPacket
processSpecialHeader	H265VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:H265VideoRTPSource
~H265BufferedPacket	H265VideoRTPSource.cpp	/^H265BufferedPacket::~H265BufferedPacket() {$/;"	f	class:H265BufferedPacket
~H265VideoRTPSource	H265VideoRTPSource.cpp	/^H265VideoRTPSource::~H265VideoRTPSource() {$/;"	f	class:H265VideoRTPSource
H265VideoStreamDiscreteFramer	H265VideoStreamDiscreteFramer.cpp	/^::H265VideoStreamDiscreteFramer(UsageEnvironment& env, FramedSource* inputSource)$/;"	f	class:H265VideoStreamDiscreteFramer
createNew	H265VideoStreamDiscreteFramer.cpp	/^H265VideoStreamDiscreteFramer::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:H265VideoStreamDiscreteFramer
isH265VideoStreamFramer	H265VideoStreamDiscreteFramer.cpp	/^Boolean H265VideoStreamDiscreteFramer::isH265VideoStreamFramer() const {$/;"	f	class:H265VideoStreamDiscreteFramer
~H265VideoStreamDiscreteFramer	H265VideoStreamDiscreteFramer.cpp	/^H265VideoStreamDiscreteFramer::~H265VideoStreamDiscreteFramer() {$/;"	f	class:H265VideoStreamDiscreteFramer
H265VideoStreamFramer	H265VideoStreamFramer.cpp	/^::H265VideoStreamFramer(UsageEnvironment& env, FramedSource* inputSource, Boolean createParser, Boolean includeStartCodeInOutput)$/;"	f	class:H265VideoStreamFramer
createNew	H265VideoStreamFramer.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource, Boolean includeStartCodeInOutput) {$/;"	f	class:H265VideoStreamFramer
isH265VideoStreamFramer	H265VideoStreamFramer.cpp	/^Boolean H265VideoStreamFramer::isH265VideoStreamFramer() const {$/;"	f	class:H265VideoStreamFramer
~H265VideoStreamFramer	H265VideoStreamFramer.cpp	/^H265VideoStreamFramer::~H265VideoStreamFramer() {$/;"	f	class:H265VideoStreamFramer
CloseInputFile	InputFile.cpp	/^void CloseInputFile(FILE* fid) {$/;"	f
FileIsSeekable	InputFile.cpp	/^Boolean FileIsSeekable(FILE *fid) {$/;"	f
GetFileSize	InputFile.cpp	/^u_int64_t GetFileSize(char const* fileName, FILE* fid) {$/;"	f
OpenInputFile	InputFile.cpp	/^FILE* OpenInputFile(UsageEnvironment& env, char const* fileName) {$/;"	f
SeekFile64	InputFile.cpp	/^int64_t SeekFile64(FILE *fid, int64_t offset, int whence) {$/;"	f
TellFile64	InputFile.cpp	/^int64_t TellFile64(FILE *fid) {$/;"	f
JPEGVideoRTPSink	JPEGVideoRTPSink.cpp	/^::JPEGVideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs)$/;"	f	class:JPEGVideoRTPSink
createNew	JPEGVideoRTPSink.cpp	/^JPEGVideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs) {$/;"	f	class:JPEGVideoRTPSink
doSpecialFrameHandling	JPEGVideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:JPEGVideoRTPSink
frameCanAppearAfterPacketStart	JPEGVideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:JPEGVideoRTPSink
sourceIsCompatibleWithUs	JPEGVideoRTPSink.cpp	/^Boolean JPEGVideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:JPEGVideoRTPSink
specialHeaderSize	JPEGVideoRTPSink.cpp	/^unsigned JPEGVideoRTPSink::specialHeaderSize() const {$/;"	f	class:JPEGVideoRTPSink
~JPEGVideoRTPSink	JPEGVideoRTPSink.cpp	/^JPEGVideoRTPSink::~JPEGVideoRTPSink() {$/;"	f	class:JPEGVideoRTPSink
BYTE	JPEGVideoRTPSource.cpp	44;"	d	file:
DWORD	JPEGVideoRTPSource.cpp	46;"	d	file:
JPEGBufferedPacket	JPEGVideoRTPSource.cpp	/^class JPEGBufferedPacket: public BufferedPacket {$/;"	c	file:
JPEGBufferedPacketFactory	JPEGVideoRTPSource.cpp	/^class JPEGBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
JPEGVideoRTPSource	JPEGVideoRTPSource.cpp	/^JPEGVideoRTPSource::JPEGVideoRTPSource(UsageEnvironment& env,$/;"	f	class:JPEGVideoRTPSource
MARKER_APP_FIRST	JPEGVideoRTPSource.cpp	/^	MARKER_APP_FIRST	= 0xe0,$/;"	e	enum:__anon4	file:
MARKER_APP_LAST	JPEGVideoRTPSource.cpp	/^	MARKER_APP_LAST		= 0xef,$/;"	e	enum:__anon4	file:
MARKER_COMMENT	JPEGVideoRTPSource.cpp	/^	MARKER_COMMENT		= 0xfe,$/;"	e	enum:__anon4	file:
MARKER_DHT	JPEGVideoRTPSource.cpp	/^	MARKER_DHT  = 0xc4,		\/\/ huffman tables$/;"	e	enum:__anon4	file:
MARKER_DQT	JPEGVideoRTPSource.cpp	/^	MARKER_DQT	= 0xdb,		\/\/ define quantization tables$/;"	e	enum:__anon4	file:
MARKER_DRI	JPEGVideoRTPSource.cpp	/^	MARKER_DRI	= 0xdd,		\/\/ restart interval$/;"	e	enum:__anon4	file:
MARKER_EOI	JPEGVideoRTPSource.cpp	/^	MARKER_EOI	= 0xd9,		\/\/ end of image$/;"	e	enum:__anon4	file:
MARKER_SOF0	JPEGVideoRTPSource.cpp	/^	MARKER_SOF0	= 0xc0,		\/\/ start-of-frame, baseline scan$/;"	e	enum:__anon4	file:
MARKER_SOI	JPEGVideoRTPSource.cpp	/^	MARKER_SOI	= 0xd8,		\/\/ start of image$/;"	e	enum:__anon4	file:
MARKER_SOS	JPEGVideoRTPSource.cpp	/^	MARKER_SOS	= 0xda,		\/\/ start of scan$/;"	e	enum:__anon4	file:
MIMEtype	JPEGVideoRTPSource.cpp	/^char const* JPEGVideoRTPSource::MIMEtype() const {$/;"	f	class:JPEGVideoRTPSource
WORD	JPEGVideoRTPSource.cpp	45;"	d	file:
chm_ac_codelens	JPEGVideoRTPSource.cpp	/^static unsigned char const chm_ac_codelens[] = {$/;"	v	file:
chm_ac_symbols	JPEGVideoRTPSource.cpp	/^static unsigned char const chm_ac_symbols[] = {$/;"	v	file:
chm_dc_codelens	JPEGVideoRTPSource.cpp	/^static unsigned char const chm_dc_codelens[] = {$/;"	v	file:
chm_dc_symbols	JPEGVideoRTPSource.cpp	/^static unsigned char const chm_dc_symbols[] = {$/;"	v	file:
completesFrame	JPEGVideoRTPSource.cpp	/^  Boolean completesFrame;$/;"	m	class:JPEGBufferedPacket	file:
computeJPEGHeaderSize	JPEGVideoRTPSource.cpp	/^static unsigned computeJPEGHeaderSize(unsigned qtlen, unsigned dri) {$/;"	f	file:
createHuffmanHeader	JPEGVideoRTPSource.cpp	/^static void createHuffmanHeader(unsigned char*& p,$/;"	f	file:
createJPEGHeader	JPEGVideoRTPSource.cpp	/^static void createJPEGHeader(unsigned char* buf, unsigned type,$/;"	f	file:
createNew	JPEGVideoRTPSource.cpp	/^JPEGVideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:JPEGVideoRTPSource
createNewPacket	JPEGVideoRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* \/*ourSource*\/) {$/;"	f	class:JPEGBufferedPacketFactory
defaultQuantizers	JPEGVideoRTPSource.cpp	/^static unsigned char const defaultQuantizers[128] = {$/;"	v	file:
lum_ac_codelens	JPEGVideoRTPSource.cpp	/^static unsigned char const lum_ac_codelens[] = {$/;"	v	file:
lum_ac_symbols	JPEGVideoRTPSource.cpp	/^static unsigned char const lum_ac_symbols[] = {$/;"	v	file:
lum_dc_codelens	JPEGVideoRTPSource.cpp	/^static unsigned char const lum_dc_codelens[] = {$/;"	v	file:
lum_dc_symbols	JPEGVideoRTPSource.cpp	/^static unsigned char const lum_dc_symbols[] = {$/;"	v	file:
makeDefaultQtables	JPEGVideoRTPSource.cpp	/^static void makeDefaultQtables(unsigned char* resultTables, unsigned Q) {$/;"	f	file:
nextEnclosedFrameSize	JPEGVideoRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:JPEGBufferedPacket
processSpecialHeader	JPEGVideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:JPEGVideoRTPSource
reset	JPEGVideoRTPSource.cpp	/^void JPEGBufferedPacket::reset() {$/;"	f	class:JPEGBufferedPacket
~JPEGVideoRTPSource	JPEGVideoRTPSource.cpp	/^JPEGVideoRTPSource::~JPEGVideoRTPSource() {$/;"	f	class:JPEGVideoRTPSource
JPEGVideoSource	JPEGVideoSource.cpp	/^JPEGVideoSource::JPEGVideoSource(UsageEnvironment& env)$/;"	f	class:JPEGVideoSource
isJPEGVideoSource	JPEGVideoSource.cpp	/^Boolean JPEGVideoSource::isJPEGVideoSource() const {$/;"	f	class:JPEGVideoSource
quantizationTables	JPEGVideoSource.cpp	/^u_int8_t const* JPEGVideoSource::quantizationTables(u_int8_t& precision,$/;"	f	class:JPEGVideoSource
restartInterval	JPEGVideoSource.cpp	/^u_int16_t JPEGVideoSource::restartInterval() {$/;"	f	class:JPEGVideoSource
~JPEGVideoSource	JPEGVideoSource.cpp	/^JPEGVideoSource::~JPEGVideoSource() {$/;"	f	class:JPEGVideoSource
Locale	Locale.cpp	/^Locale::Locale(char const* newLocale, LocaleCategory category) {$/;"	f	class:Locale
~Locale	Locale.cpp	/^Locale::~Locale() {$/;"	f	class:Locale
ADUFromMP3Source	MP3ADU.cpp	/^ADUFromMP3Source::ADUFromMP3Source(UsageEnvironment& env,$/;"	f	class:ADUFromMP3Source
MIMEtype	MP3ADU.cpp	/^char const* ADUFromMP3Source::MIMEtype() const {$/;"	f	class:ADUFromMP3Source
MIMEtype	MP3ADU.cpp	/^char const* MP3FromADUSource::MIMEtype() const {$/;"	f	class:MP3FromADUSource
MP3FromADUSource	MP3ADU.cpp	/^MP3FromADUSource::MP3FromADUSource(UsageEnvironment& env,$/;"	f	class:MP3FromADUSource
Segment	MP3ADU.cpp	/^class Segment {$/;"	c	file:
SegmentBufSize	MP3ADU.cpp	32;"	d	file:
SegmentQueue	MP3ADU.cpp	/^  SegmentQueue(Boolean directionIsToADU, Boolean includeADUdescriptors)$/;"	f	class:SegmentQueue
SegmentQueue	MP3ADU.cpp	/^class SegmentQueue {$/;"	c	file:
SegmentQueueSize	MP3ADU.cpp	52;"	d	file:
aduSize	MP3ADU.cpp	/^  unsigned sideInfoSize, aduSize;$/;"	m	class:Segment	file:
backpointer	MP3ADU.cpp	/^  unsigned backpointer;$/;"	m	class:Segment	file:
buf	MP3ADU.cpp	/^  unsigned char buf[SegmentBufSize];$/;"	m	class:Segment	file:
createNew	MP3ADU.cpp	/^ADUFromMP3Source* ADUFromMP3Source::createNew(UsageEnvironment& env,$/;"	f	class:ADUFromMP3Source
createNew	MP3ADU.cpp	/^MP3FromADUSource* MP3FromADUSource::createNew(UsageEnvironment& env,$/;"	f	class:MP3FromADUSource
dataHere	MP3ADU.cpp	/^unsigned Segment::dataHere() {$/;"	f	class:Segment
dataStart	MP3ADU.cpp	/^  unsigned char* dataStart() { return &buf[descriptorSize]; }$/;"	f	class:Segment
dequeue	MP3ADU.cpp	/^Boolean SegmentQueue::dequeue() {$/;"	f	class:SegmentQueue
descriptorSize	MP3ADU.cpp	/^  unsigned descriptorSize;$/;"	m	class:Segment	file:
doGetNextFrame	MP3ADU.cpp	/^void ADUFromMP3Source::doGetNextFrame() {$/;"	f	class:ADUFromMP3Source
doGetNextFrame	MP3ADU.cpp	/^void MP3FromADUSource::doGetNextFrame() {$/;"	f	class:MP3FromADUSource
doGetNextFrame1	MP3ADU.cpp	/^Boolean ADUFromMP3Source::doGetNextFrame1() {$/;"	f	class:ADUFromMP3Source
durationInMicroseconds	MP3ADU.cpp	/^  unsigned durationInMicroseconds;$/;"	m	class:Segment	file:
enqueueNewSegment	MP3ADU.cpp	/^void SegmentQueue::enqueueNewSegment(FramedSource* inputSource,$/;"	f	class:SegmentQueue
fDirectionIsToADU	MP3ADU.cpp	/^  Boolean fDirectionIsToADU;$/;"	m	class:SegmentQueue	file:
fHeadIndex	MP3ADU.cpp	/^  unsigned fHeadIndex, fNextFreeIndex, fTotalDataSize;$/;"	m	class:SegmentQueue	file:
fIncludeADUdescriptors	MP3ADU.cpp	/^  Boolean fIncludeADUdescriptors;$/;"	m	class:SegmentQueue	file:
fNextFreeIndex	MP3ADU.cpp	/^  unsigned fHeadIndex, fNextFreeIndex, fTotalDataSize;$/;"	m	class:SegmentQueue	file:
fTotalDataSize	MP3ADU.cpp	/^  unsigned fHeadIndex, fNextFreeIndex, fTotalDataSize;$/;"	m	class:SegmentQueue	file:
fUsingSource	MP3ADU.cpp	/^  FramedSource* fUsingSource;$/;"	m	class:SegmentQueue	file:
frameSize	MP3ADU.cpp	/^  unsigned frameSize; \/\/ if it's a non-ADU frame$/;"	m	class:Segment	file:
generateFrameFromHeadADU	MP3ADU.cpp	/^Boolean MP3FromADUSource::generateFrameFromHeadADU() {$/;"	f	class:MP3FromADUSource
headIndex	MP3ADU.cpp	/^  unsigned headIndex() {return fHeadIndex;}$/;"	f	class:SegmentQueue
headSegment	MP3ADU.cpp	/^  Segment& headSegment() {return s[fHeadIndex];}$/;"	f	class:SegmentQueue
headerSize	MP3ADU.cpp	/^  static unsigned const headerSize;$/;"	m	class:Segment	file:
headerSize	MP3ADU.cpp	/^unsigned const Segment::headerSize = 4;$/;"	m	class:Segment	file:
insertDummyADUsIfNecessary	MP3ADU.cpp	/^void MP3FromADUSource::insertDummyADUsIfNecessary() {$/;"	f	class:MP3FromADUSource
insertDummyBeforeTail	MP3ADU.cpp	/^Boolean SegmentQueue::insertDummyBeforeTail(unsigned backpointer) {$/;"	f	class:SegmentQueue
isEmpty	MP3ADU.cpp	/^  Boolean isEmpty() {return isEmptyOrFull() && totalDataSize() == 0;}$/;"	f	class:SegmentQueue
isEmptyOrFull	MP3ADU.cpp	/^  Boolean isEmptyOrFull() {return headIndex() == nextFreeIndex();}$/;"	f	class:SegmentQueue	file:
isFull	MP3ADU.cpp	/^  Boolean isFull() {return isEmptyOrFull() && totalDataSize() > 0;}$/;"	f	class:SegmentQueue
needToGetAnADU	MP3ADU.cpp	/^Boolean MP3FromADUSource::needToGetAnADU() {$/;"	f	class:MP3FromADUSource
nextFreeIndex	MP3ADU.cpp	/^  unsigned nextFreeIndex() {return fNextFreeIndex;}$/;"	f	class:SegmentQueue
nextFreeSegment	MP3ADU.cpp	/^  Segment& nextFreeSegment() {return s[fNextFreeIndex];}$/;"	f	class:SegmentQueue
nextIndex	MP3ADU.cpp	/^  static unsigned nextIndex(unsigned ix) {return (ix+1)%SegmentQueueSize;}$/;"	f	class:SegmentQueue
presentationTime	MP3ADU.cpp	/^  struct timeval presentationTime;$/;"	m	class:Segment	typeref:struct:Segment::timeval	file:
prevIndex	MP3ADU.cpp	/^  static unsigned prevIndex(unsigned ix) {return (ix+SegmentQueueSize-1)%SegmentQueueSize;}$/;"	f	class:SegmentQueue
reset	MP3ADU.cpp	/^  void reset() { fHeadIndex = fNextFreeIndex = fTotalDataSize = 0; }$/;"	f	class:SegmentQueue
resetInput	MP3ADU.cpp	/^void ADUFromMP3Source::resetInput() {$/;"	f	class:ADUFromMP3Source
s	MP3ADU.cpp	/^  Segment s[SegmentQueueSize];$/;"	m	class:SegmentQueue	file:
setScaleFactor	MP3ADU.cpp	/^Boolean ADUFromMP3Source::setScaleFactor(int scale) {$/;"	f	class:ADUFromMP3Source
sideInfoSize	MP3ADU.cpp	/^  unsigned sideInfoSize, aduSize;$/;"	m	class:Segment	file:
sqAfterGettingCommon	MP3ADU.cpp	/^Boolean SegmentQueue::sqAfterGettingCommon(Segment& seg,$/;"	f	class:SegmentQueue
sqAfterGettingSegment	MP3ADU.cpp	/^void SegmentQueue::sqAfterGettingSegment(void* clientData,$/;"	f	class:SegmentQueue
totalDataSize	MP3ADU.cpp	/^  unsigned totalDataSize() {return fTotalDataSize;}$/;"	f	class:SegmentQueue
~ADUFromMP3Source	MP3ADU.cpp	/^ADUFromMP3Source::~ADUFromMP3Source() {$/;"	f	class:ADUFromMP3Source
~MP3FromADUSource	MP3ADU.cpp	/^MP3FromADUSource::~MP3FromADUSource() {$/;"	f	class:MP3FromADUSource
MP3ADURTPSink	MP3ADURTPSink.cpp	/^MP3ADURTPSink::MP3ADURTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MP3ADURTPSink
badDataSize	MP3ADURTPSink.cpp	/^static void badDataSize(UsageEnvironment& env, unsigned numBytesInFrame) {$/;"	f	file:
createNew	MP3ADURTPSink.cpp	/^MP3ADURTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MP3ADURTPSink
doSpecialFrameHandling	MP3ADURTPSink.cpp	/^void MP3ADURTPSink::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MP3ADURTPSink
specialHeaderSize	MP3ADURTPSink.cpp	/^unsigned MP3ADURTPSink::specialHeaderSize() const {$/;"	f	class:MP3ADURTPSink
~MP3ADURTPSink	MP3ADURTPSink.cpp	/^MP3ADURTPSink::~MP3ADURTPSink() {$/;"	f	class:MP3ADURTPSink
ADUBufferedPacket	MP3ADURTPSource.cpp	/^class ADUBufferedPacket: public BufferedPacket {$/;"	c	file:
ADUBufferedPacketFactory	MP3ADURTPSource.cpp	/^class ADUBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
MIMEtype	MP3ADURTPSource.cpp	/^char const* MP3ADURTPSource::MIMEtype() const {$/;"	f	class:MP3ADURTPSource
MP3ADURTPSource	MP3ADURTPSource.cpp	/^MP3ADURTPSource::MP3ADURTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MP3ADURTPSource
createNew	MP3ADURTPSource.cpp	/^MP3ADURTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MP3ADURTPSource
createNewPacket	MP3ADURTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* \/*ourSource*\/) {$/;"	f	class:ADUBufferedPacketFactory
nextEnclosedFrameSize	MP3ADURTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:ADUBufferedPacket
~MP3ADURTPSource	MP3ADURTPSource.cpp	/^MP3ADURTPSource::~MP3ADURTPSource() {$/;"	f	class:MP3ADURTPSource
MP3ADUTranscoder	MP3ADUTranscoder.cpp	/^MP3ADUTranscoder::MP3ADUTranscoder(UsageEnvironment& env,$/;"	f	class:MP3ADUTranscoder
afterGettingFrame	MP3ADUTranscoder.cpp	/^void MP3ADUTranscoder::afterGettingFrame(void* clientData,$/;"	f	class:MP3ADUTranscoder
afterGettingFrame1	MP3ADUTranscoder.cpp	/^void MP3ADUTranscoder::afterGettingFrame1(unsigned numBytesRead,$/;"	f	class:MP3ADUTranscoder
createNew	MP3ADUTranscoder.cpp	/^MP3ADUTranscoder* MP3ADUTranscoder::createNew(UsageEnvironment& env,$/;"	f	class:MP3ADUTranscoder
doGetNextFrame	MP3ADUTranscoder.cpp	/^void MP3ADUTranscoder::doGetNextFrame() {$/;"	f	class:MP3ADUTranscoder
getAttributes	MP3ADUTranscoder.cpp	/^void MP3ADUTranscoder::getAttributes() const {$/;"	f	class:MP3ADUTranscoder
~MP3ADUTranscoder	MP3ADUTranscoder.cpp	/^MP3ADUTranscoder::~MP3ADUTranscoder() {$/;"	f	class:MP3ADUTranscoder
TWO_BYTE_DESCR_FLAG	MP3ADUdescriptor.cpp	27;"	d	file:
generateDescriptor	MP3ADUdescriptor.cpp	/^unsigned ADUdescriptor::generateDescriptor(unsigned char*& toPtr,$/;"	f	class:ADUdescriptor
generateTwoByteDescriptor	MP3ADUdescriptor.cpp	/^void ADUdescriptor::generateTwoByteDescriptor(unsigned char*& toPtr,$/;"	f	class:ADUdescriptor
getRemainingFrameSize	MP3ADUdescriptor.cpp	/^unsigned ADUdescriptor::getRemainingFrameSize(unsigned char*& fromPtr) {$/;"	f	class:ADUdescriptor
ADUdescriptor	MP3ADUdescriptor.hh	/^class ADUdescriptor {$/;"	c
_MP3_ADU_DESCRIPTOR_HH	MP3ADUdescriptor.hh	22;"	d
computeSize	MP3ADUdescriptor.hh	/^  static unsigned computeSize(unsigned remainingFrameSize) {$/;"	f	class:ADUdescriptor
DeinterleavingFrameDescriptor	MP3ADUinterleaving.cpp	/^  DeinterleavingFrameDescriptor() {frameDataSize = 0; frameData = NULL;}$/;"	f	class:DeinterleavingFrameDescriptor
DeinterleavingFrameDescriptor	MP3ADUinterleaving.cpp	/^class DeinterleavingFrameDescriptor {$/;"	c	file:
DeinterleavingFrames	MP3ADUinterleaving.cpp	/^DeinterleavingFrames::DeinterleavingFrames()$/;"	f	class:DeinterleavingFrames
DeinterleavingFrames	MP3ADUinterleaving.cpp	/^class DeinterleavingFrames {$/;"	c	file:
Interleaving	MP3ADUinterleaving.cpp	/^Interleaving::Interleaving(unsigned cycleSize,$/;"	f	class:Interleaving
InterleavingFrameDescriptor	MP3ADUinterleaving.cpp	/^  InterleavingFrameDescriptor() {frameDataSize = 0;}$/;"	f	class:InterleavingFrameDescriptor
InterleavingFrameDescriptor	MP3ADUinterleaving.cpp	/^class InterleavingFrameDescriptor {$/;"	c	file:
InterleavingFrames	MP3ADUinterleaving.cpp	/^InterleavingFrames::InterleavingFrames(unsigned maxCycleSize)$/;"	f	class:InterleavingFrames
InterleavingFrames	MP3ADUinterleaving.cpp	/^class InterleavingFrames {$/;"	c	file:
MAX_FRAME_SIZE	MP3ADUinterleaving.cpp	321;"	d	file:
MP3ADUdeinterleaver	MP3ADUinterleaving.cpp	/^MP3ADUdeinterleaver::MP3ADUdeinterleaver(UsageEnvironment& env,$/;"	f	class:MP3ADUdeinterleaver
MP3ADUinterleaver	MP3ADUinterleaving.cpp	/^MP3ADUinterleaver::MP3ADUinterleaver(UsageEnvironment& env,$/;"	f	class:MP3ADUinterleaver
MP3ADUinterleaverBase	MP3ADUinterleaving.cpp	/^MP3ADUinterleaverBase::MP3ADUinterleaverBase(UsageEnvironment& env,$/;"	f	class:MP3ADUinterleaverBase
afterGettingFrame	MP3ADUinterleaving.cpp	/^void MP3ADUdeinterleaver::afterGettingFrame(unsigned numBytesRead,$/;"	f	class:MP3ADUdeinterleaver
afterGettingFrame	MP3ADUinterleaving.cpp	/^void MP3ADUinterleaver::afterGettingFrame(unsigned numBytesRead,$/;"	f	class:MP3ADUinterleaver
afterGettingFrame	MP3ADUinterleaving.cpp	/^void MP3ADUinterleaverBase::afterGettingFrame(void* clientData,$/;"	f	class:MP3ADUinterleaverBase
createNew	MP3ADUinterleaving.cpp	/^MP3ADUdeinterleaver* MP3ADUdeinterleaver::createNew(UsageEnvironment& env,$/;"	f	class:MP3ADUdeinterleaver
createNew	MP3ADUinterleaving.cpp	/^MP3ADUinterleaver* MP3ADUinterleaver::createNew(UsageEnvironment& env,$/;"	f	class:MP3ADUinterleaver
doGetNextFrame	MP3ADUinterleaving.cpp	/^void MP3ADUdeinterleaver::doGetNextFrame() {$/;"	f	class:MP3ADUdeinterleaver
doGetNextFrame	MP3ADUinterleaving.cpp	/^void MP3ADUinterleaver::doGetNextFrame() {$/;"	f	class:MP3ADUinterleaver
durationInMicroseconds	MP3ADUinterleaving.cpp	/^  unsigned durationInMicroseconds;$/;"	m	class:DeinterleavingFrameDescriptor	file:
durationInMicroseconds	MP3ADUinterleaving.cpp	/^  unsigned durationInMicroseconds;$/;"	m	class:InterleavingFrameDescriptor	file:
fDescriptors	MP3ADUinterleaving.cpp	/^  class DeinterleavingFrameDescriptor* fDescriptors;$/;"	m	class:DeinterleavingFrames	typeref:class:DeinterleavingFrames::DeinterleavingFrameDescriptor	file:
fDescriptors	MP3ADUinterleaving.cpp	/^  class InterleavingFrameDescriptor* fDescriptors;$/;"	m	class:InterleavingFrames	typeref:class:InterleavingFrames::InterleavingFrameDescriptor	file:
fHaveEndedCycle	MP3ADUinterleaving.cpp	/^  Boolean fHaveEndedCycle;$/;"	m	class:DeinterleavingFrames	file:
fIIlastSeen	MP3ADUinterleaving.cpp	/^  unsigned fIIlastSeen;$/;"	m	class:DeinterleavingFrames	file:
fMaxCycleSize	MP3ADUinterleaving.cpp	/^  unsigned fMaxCycleSize;$/;"	m	class:InterleavingFrames	file:
fMaxIndexSeen	MP3ADUinterleaving.cpp	/^  unsigned fMinIndexSeen, fMaxIndexSeen; \/\/ actually, max+1$/;"	m	class:DeinterleavingFrames	file:
fMinIndexSeen	MP3ADUinterleaving.cpp	/^  unsigned fMinIndexSeen, fMaxIndexSeen; \/\/ actually, max+1$/;"	m	class:DeinterleavingFrames	file:
fNextIndexToRelease	MP3ADUinterleaving.cpp	/^  unsigned fNextIndexToRelease;$/;"	m	class:DeinterleavingFrames	file:
fNextIndexToRelease	MP3ADUinterleaving.cpp	/^  unsigned fNextIndexToRelease;$/;"	m	class:InterleavingFrames	file:
frameData	MP3ADUinterleaving.cpp	/^  unsigned char frameData[MAX_FRAME_SIZE]; \/\/ ditto$/;"	m	class:InterleavingFrameDescriptor	file:
frameData	MP3ADUinterleaving.cpp	/^  unsigned char* frameData;$/;"	m	class:DeinterleavingFrameDescriptor	file:
frameDataSize	MP3ADUinterleaving.cpp	/^  unsigned frameDataSize; \/\/ includes ADU descriptor and (modified) MPEG hdr$/;"	m	class:DeinterleavingFrameDescriptor	file:
frameDataSize	MP3ADUinterleaving.cpp	/^  unsigned frameDataSize; \/\/ includes ADU descriptor and (modified) MPEG hdr$/;"	m	class:InterleavingFrameDescriptor	file:
getIncomingFrameParams	MP3ADUinterleaving.cpp	/^void DeinterleavingFrames::getIncomingFrameParams(unsigned char*& dataPtr,$/;"	f	class:DeinterleavingFrames
getIncomingFrameParams	MP3ADUinterleaving.cpp	/^void InterleavingFrames::getIncomingFrameParams(unsigned char index,$/;"	f	class:InterleavingFrames
getIncomingFrameParamsAfter	MP3ADUinterleaving.cpp	/^::getIncomingFrameParamsAfter(unsigned frameSize,$/;"	f	class:DeinterleavingFrames
getInputSource	MP3ADUinterleaving.cpp	/^FramedSource* MP3ADUinterleaverBase::getInputSource(UsageEnvironment& env,$/;"	f	class:MP3ADUinterleaverBase
getReleasingFrameParams	MP3ADUinterleaving.cpp	/^void DeinterleavingFrames::getReleasingFrameParams(unsigned char*& dataPtr,$/;"	f	class:DeinterleavingFrames
getReleasingFrameParams	MP3ADUinterleaving.cpp	/^void InterleavingFrames::getReleasingFrameParams(unsigned char index,$/;"	f	class:InterleavingFrames
haveReleaseableFrame	MP3ADUinterleaving.cpp	/^Boolean DeinterleavingFrames::haveReleaseableFrame() {$/;"	f	class:DeinterleavingFrames
haveReleaseableFrame	MP3ADUinterleaving.cpp	/^Boolean InterleavingFrames::haveReleaseableFrame() {$/;"	f	class:InterleavingFrames
moveIncomingFrameIntoPlace	MP3ADUinterleaving.cpp	/^void DeinterleavingFrames::moveIncomingFrameIntoPlace() {$/;"	f	class:DeinterleavingFrames
nextIndexToRelease	MP3ADUinterleaving.cpp	/^  unsigned nextIndexToRelease() {return fNextIndexToRelease;}$/;"	f	class:InterleavingFrames
presentationTime	MP3ADUinterleaving.cpp	/^  struct timeval presentationTime;$/;"	m	class:DeinterleavingFrameDescriptor	typeref:struct:DeinterleavingFrameDescriptor::timeval	file:
presentationTime	MP3ADUinterleaving.cpp	/^  struct timeval presentationTime;$/;"	m	class:InterleavingFrameDescriptor	typeref:struct:InterleavingFrameDescriptor::timeval	file:
releaseNext	MP3ADUinterleaving.cpp	/^void DeinterleavingFrames::releaseNext() {$/;"	f	class:DeinterleavingFrames
releaseNext	MP3ADUinterleaving.cpp	/^void InterleavingFrames::releaseNext() {$/;"	f	class:InterleavingFrames
releaseOutgoingFrame	MP3ADUinterleaving.cpp	/^void MP3ADUdeinterleaver::releaseOutgoingFrame() {$/;"	f	class:MP3ADUdeinterleaver
releaseOutgoingFrame	MP3ADUinterleaving.cpp	/^void MP3ADUinterleaver::releaseOutgoingFrame() {$/;"	f	class:MP3ADUinterleaver
setFrameParams	MP3ADUinterleaving.cpp	/^void InterleavingFrames::setFrameParams(unsigned char index,$/;"	f	class:InterleavingFrames
startNewCycle	MP3ADUinterleaving.cpp	/^void DeinterleavingFrames::startNewCycle() {$/;"	f	class:DeinterleavingFrames
~DeinterleavingFrameDescriptor	MP3ADUinterleaving.cpp	/^  virtual ~DeinterleavingFrameDescriptor() {delete[] frameData;}$/;"	f	class:DeinterleavingFrameDescriptor
~DeinterleavingFrames	MP3ADUinterleaving.cpp	/^DeinterleavingFrames::~DeinterleavingFrames() {$/;"	f	class:DeinterleavingFrames
~Interleaving	MP3ADUinterleaving.cpp	/^Interleaving::~Interleaving() {$/;"	f	class:Interleaving
~InterleavingFrames	MP3ADUinterleaving.cpp	/^InterleavingFrames::~InterleavingFrames() {$/;"	f	class:InterleavingFrames
~MP3ADUdeinterleaver	MP3ADUinterleaving.cpp	/^MP3ADUdeinterleaver::~MP3ADUdeinterleaver() {$/;"	f	class:MP3ADUdeinterleaver
~MP3ADUinterleaver	MP3ADUinterleaving.cpp	/^MP3ADUinterleaver::~MP3ADUinterleaver() {$/;"	f	class:MP3ADUinterleaver
~MP3ADUinterleaverBase	MP3ADUinterleaving.cpp	/^MP3ADUinterleaverBase::~MP3ADUinterleaverBase() {$/;"	f	class:MP3ADUinterleaverBase
MP3AudioFileServerMediaSubsession	MP3AudioFileServerMediaSubsession.cpp	/^::MP3AudioFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:MP3AudioFileServerMediaSubsession
createNew	MP3AudioFileServerMediaSubsession.cpp	/^::createNew(UsageEnvironment& env, char const* fileName, Boolean reuseFirstSource,$/;"	f	class:MP3AudioFileServerMediaSubsession
createNewRTPSink	MP3AudioFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:MP3AudioFileServerMediaSubsession
createNewStreamSource	MP3AudioFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:MP3AudioFileServerMediaSubsession
createNewStreamSourceCommon	MP3AudioFileServerMediaSubsession.cpp	/^::createNewStreamSourceCommon(FramedSource* baseMP3Source, unsigned mp3NumBytes, unsigned& estBitrate) {$/;"	f	class:MP3AudioFileServerMediaSubsession
duration	MP3AudioFileServerMediaSubsession.cpp	/^float MP3AudioFileServerMediaSubsession::duration() const {$/;"	f	class:MP3AudioFileServerMediaSubsession
getBaseStreams	MP3AudioFileServerMediaSubsession.cpp	/^void MP3AudioFileServerMediaSubsession::getBaseStreams(FramedSource* frontStream,$/;"	f	class:MP3AudioFileServerMediaSubsession
seekStreamSource	MP3AudioFileServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double streamDuration, u_int64_t& \/*numBytes*\/) {$/;"	f	class:MP3AudioFileServerMediaSubsession
setStreamSourceScale	MP3AudioFileServerMediaSubsession.cpp	/^::setStreamSourceScale(FramedSource* inputSource, float scale) {$/;"	f	class:MP3AudioFileServerMediaSubsession
testScaleFactor	MP3AudioFileServerMediaSubsession.cpp	/^void MP3AudioFileServerMediaSubsession::testScaleFactor(float& scale) {$/;"	f	class:MP3AudioFileServerMediaSubsession
~MP3AudioFileServerMediaSubsession	MP3AudioFileServerMediaSubsession.cpp	/^::~MP3AudioFileServerMediaSubsession() {$/;"	f	class:MP3AudioFileServerMediaSubsession
MP3AudioMatroskaFileServerMediaSubsession	MP3AudioMatroskaFileServerMediaSubsession.cpp	/^::MP3AudioMatroskaFileServerMediaSubsession(MatroskaFileServerDemux& demux, MatroskaTrack* track,$/;"	f	class:MP3AudioMatroskaFileServerMediaSubsession
createNew	MP3AudioMatroskaFileServerMediaSubsession.cpp	/^::createNew(MatroskaFileServerDemux& demux, MatroskaTrack* track,$/;"	f	class:MP3AudioMatroskaFileServerMediaSubsession
createNewStreamSource	MP3AudioMatroskaFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:MP3AudioMatroskaFileServerMediaSubsession
seekStreamSource	MP3AudioMatroskaFileServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double \/*streamDuration*\/, u_int64_t& \/*numBytes*\/) {$/;"	f	class:MP3AudioMatroskaFileServerMediaSubsession
~MP3AudioMatroskaFileServerMediaSubsession	MP3AudioMatroskaFileServerMediaSubsession.cpp	/^MP3AudioMatroskaFileServerMediaSubsession::~MP3AudioMatroskaFileServerMediaSubsession() {$/;"	f	class:MP3AudioMatroskaFileServerMediaSubsession
MP3AudioMatroskaFileServerMediaSubsession	MP3AudioMatroskaFileServerMediaSubsession.hh	/^class MP3AudioMatroskaFileServerMediaSubsession: public MP3AudioFileServerMediaSubsession {$/;"	c
_MP3_AUDIO_MATROSKA_FILE_SERVER_MEDIA_SUBSESSION_HH	MP3AudioMatroskaFileServerMediaSubsession.hh	24;"	d
fOurDemux	MP3AudioMatroskaFileServerMediaSubsession.hh	/^  MatroskaFileServerDemux& fOurDemux;$/;"	m	class:MP3AudioMatroskaFileServerMediaSubsession
fTrackNumber	MP3AudioMatroskaFileServerMediaSubsession.hh	/^  unsigned fTrackNumber;$/;"	m	class:MP3AudioMatroskaFileServerMediaSubsession
MIMEtype	MP3FileSource.cpp	/^char const* MP3FileSource::MIMEtype() const {$/;"	f	class:MP3FileSource
MP3FileSource	MP3FileSource.cpp	/^MP3FileSource::MP3FileSource(UsageEnvironment& env, FILE* fid)$/;"	f	class:MP3FileSource
assignStream	MP3FileSource.cpp	/^void MP3FileSource::assignStream(FILE* fid, unsigned fileSize) {$/;"	f	class:MP3FileSource
createNew	MP3FileSource.cpp	/^MP3FileSource* MP3FileSource::createNew(UsageEnvironment& env, char const* fileName) {$/;"	f	class:MP3FileSource
doGetNextFrame	MP3FileSource.cpp	/^void MP3FileSource::doGetNextFrame() {$/;"	f	class:MP3FileSource
doGetNextFrame1	MP3FileSource.cpp	/^Boolean MP3FileSource::doGetNextFrame1() {$/;"	f	class:MP3FileSource
filePlayTime	MP3FileSource.cpp	/^float MP3FileSource::filePlayTime() const {$/;"	f	class:MP3FileSource
fileSize	MP3FileSource.cpp	/^unsigned MP3FileSource::fileSize() const {$/;"	f	class:MP3FileSource
getAttributes	MP3FileSource.cpp	/^void MP3FileSource::getAttributes() const {$/;"	f	class:MP3FileSource
initializeStream	MP3FileSource.cpp	/^Boolean MP3FileSource::initializeStream() {$/;"	f	class:MP3FileSource
seekWithinFile	MP3FileSource.cpp	/^void MP3FileSource::seekWithinFile(double seekNPT, double streamDuration) {$/;"	f	class:MP3FileSource
setPresentationTimeScale	MP3FileSource.cpp	/^void MP3FileSource::setPresentationTimeScale(unsigned scale) {$/;"	f	class:MP3FileSource
~MP3FileSource	MP3FileSource.cpp	/^MP3FileSource::~MP3FileSource() {$/;"	f	class:MP3FileSource
ComputeFrameSize	MP3Internals.cpp	/^unsigned ComputeFrameSize(unsigned bitrate, unsigned samplingFreq,$/;"	f
GetADUInfoFromMP3Frame	MP3Internals.cpp	/^Boolean GetADUInfoFromMP3Frame(unsigned char const* framePtr,$/;"	f
MP3BitrateToBitrateIndex	MP3Internals.cpp	/^static unsigned MP3BitrateToBitrateIndex(unsigned bitrate \/* in kbps *\/,$/;"	f	file:
MP3FrameParams	MP3Internals.cpp	/^MP3FrameParams::MP3FrameParams()$/;"	f	class:MP3FrameParams
MPG_MD_JOINT_STEREO	MP3Internals.cpp	512;"	d	file:
MPG_MD_MONO	MP3Internals.cpp	94;"	d	file:
PutMP3SideInfoIntoFrame	MP3Internals.cpp	/^static void PutMP3SideInfoIntoFrame(MP3SideInfo const& si,$/;"	f	file:
TRUNC_FAIRLY	MP3Internals.cpp	233;"	d	file:
TranscodeMP3ADU	MP3Internals.cpp	/^unsigned TranscodeMP3ADU(unsigned char const* fromPtr, unsigned fromSize,$/;"	f
ZeroOutMP3SideInfo	MP3Internals.cpp	/^Boolean ZeroOutMP3SideInfo(unsigned char* framePtr, unsigned totFrameSize,$/;"	f
assignADUBackpointer	MP3Internals.cpp	/^static void assignADUBackpointer(MP3FrameParams const& fr,$/;"	f	file:
bandInfo	MP3Internals.cpp	/^static struct bandInfoStruct const bandInfo[7] = {$/;"	v	file:
bandInfoStruct	MP3Internals.cpp	/^struct bandInfoStruct {$/;"	s	file:
computeSideInfoSize	MP3Internals.cpp	/^unsigned MP3FrameParams::computeSideInfoSize() {$/;"	f	class:MP3FrameParams
getSideInfo	MP3Internals.cpp	/^void MP3FrameParams::getSideInfo(MP3SideInfo& si) {$/;"	f	class:MP3FrameParams
getSideInfo1	MP3Internals.cpp	/^static void getSideInfo1(MP3FrameParams& fr, MP3SideInfo& si,$/;"	f	file:
getSideInfo2	MP3Internals.cpp	/^static void getSideInfo2(MP3FrameParams& fr, MP3SideInfo& si,$/;"	f	file:
i_slen2	MP3Internals.cpp	/^unsigned int i_slen2[256]; \/* MPEG 2.0 slen for intensity stereo *\/$/;"	v
live_freqs	MP3Internals.cpp	/^static long const live_freqs[]$/;"	v	file:
live_tabsel	MP3Internals.cpp	/^static unsigned const live_tabsel[2][3][16] = {$/;"	v	file:
longDiff	MP3Internals.cpp	/^  int longDiff[22];$/;"	m	struct:bandInfoStruct	file:
longIdx	MP3Internals.cpp	/^  int longIdx[23];$/;"	m	struct:bandInfoStruct	file:
n_slen2	MP3Internals.cpp	/^unsigned int n_slen2[512]; \/* MPEG 2.0 slen for 'normal' mode *\/$/;"	v
outputHeader	MP3Internals.cpp	/^static void outputHeader(unsigned char* toPtr, unsigned hdr) {$/;"	f	file:
putSideInfo1	MP3Internals.cpp	/^static void putSideInfo1(BitVector& bv,$/;"	f	file:
putSideInfo2	MP3Internals.cpp	/^static void putSideInfo2(BitVector& bv,$/;"	f	file:
setParamsFromHeader	MP3Internals.cpp	/^void MP3FrameParams::setParamsFromHeader() {$/;"	f	class:MP3FrameParams
shortDiff	MP3Internals.cpp	/^  int shortDiff[13];$/;"	m	struct:bandInfoStruct	file:
shortIdx	MP3Internals.cpp	/^  int shortIdx[14];$/;"	m	struct:bandInfoStruct	file:
updateSideInfoSizes	MP3Internals.cpp	/^static unsigned updateSideInfoSizes(MP3SideInfo& sideInfo, Boolean isMPEG2,$/;"	f	file:
~MP3FrameParams	MP3Internals.cpp	/^MP3FrameParams::~MP3FrameParams() {$/;"	f	class:MP3FrameParams
MAX_MP3_FRAME_SIZE	MP3Internals.hh	64;"	d
MP3FrameParams	MP3Internals.hh	/^class MP3FrameParams {$/;"	c
MP3SideInfo	MP3Internals.hh	/^typedef struct MP3SideInfo {$/;"	s
MP3SideInfo_t	MP3Internals.hh	/^} MP3SideInfo_t;$/;"	t	typeref:struct:MP3SideInfo
SBLIMIT	MP3Internals.hh	63;"	d
_MP3_INTERNALS_HH	MP3Internals.hh	22;"	d
big_values	MP3Internals.hh	/^    unsigned big_values;$/;"	m	struct:MP3SideInfo::gr_info_s
bitrate	MP3Internals.hh	/^  unsigned bitrate; \/\/ in kbps$/;"	m	class:MP3FrameParams
bitrateIndex	MP3Internals.hh	/^  unsigned bitrateIndex;$/;"	m	class:MP3FrameParams
block_type	MP3Internals.hh	/^    unsigned block_type;$/;"	m	struct:MP3SideInfo::gr_info_s
bv	MP3Internals.hh	/^  BitVector bv;$/;"	m	class:MP3FrameParams
ch	MP3Internals.hh	/^  } ch[2];$/;"	m	struct:MP3SideInfo	typeref:struct:MP3SideInfo::__anon2
copyright	MP3Internals.hh	/^  Boolean copyright;$/;"	m	class:MP3FrameParams
count1table_select	MP3Internals.hh	/^    unsigned count1table_select;$/;"	m	struct:MP3SideInfo::gr_info_s
emphasis	MP3Internals.hh	/^  unsigned emphasis;$/;"	m	class:MP3FrameParams
extension	MP3Internals.hh	/^  Boolean extension;$/;"	m	class:MP3FrameParams
firstHdr	MP3Internals.hh	/^  unsigned oldHdr, firstHdr;$/;"	m	class:MP3FrameParams
frameBytes	MP3Internals.hh	/^  unsigned char frameBytes[MAX_MP3_FRAME_SIZE];$/;"	m	class:MP3FrameParams
frameSize	MP3Internals.hh	/^  unsigned frameSize; \/\/ doesn't include the initial 4-byte header$/;"	m	class:MP3FrameParams
full_gain	MP3Internals.hh	/^    double *full_gain[3];$/;"	m	struct:MP3SideInfo::gr_info_s
get1Bit	MP3Internals.hh	/^  unsigned get1Bit() { return bv.get1Bit(); }$/;"	f	class:MP3FrameParams
getBits	MP3Internals.hh	/^  unsigned getBits(unsigned numBits) { return bv.getBits(numBits); }$/;"	f	class:MP3FrameParams
global_gain	MP3Internals.hh	/^    unsigned global_gain;$/;"	m	struct:MP3SideInfo::gr_info_s
gr	MP3Internals.hh	/^    gr_info_s_t gr[2];$/;"	m	struct:MP3SideInfo::__anon2
gr_info_s	MP3Internals.hh	/^  typedef struct gr_info_s {$/;"	s	struct:MP3SideInfo
gr_info_s_t	MP3Internals.hh	/^  } gr_info_s_t;$/;"	t	struct:MP3SideInfo	typeref:struct:MP3SideInfo::gr_info_s
hasCRC	MP3Internals.hh	/^  Boolean hasCRC;$/;"	m	class:MP3FrameParams
hdr	MP3Internals.hh	/^  unsigned hdr;$/;"	m	class:MP3FrameParams
isFreeFormat	MP3Internals.hh	/^  Boolean isFreeFormat;$/;"	m	class:MP3FrameParams
isMPEG2	MP3Internals.hh	/^  Boolean isMPEG2;$/;"	m	class:MP3FrameParams
isMPEG2_5	MP3Internals.hh	/^  Boolean isMPEG2_5;$/;"	m	class:MP3FrameParams
isStereo	MP3Internals.hh	/^  Boolean isStereo;$/;"	m	class:MP3FrameParams
layer	MP3Internals.hh	/^  unsigned layer; \/\/ currently only 3 is supported$/;"	m	class:MP3FrameParams
main_data_begin	MP3Internals.hh	/^  unsigned main_data_begin;$/;"	m	struct:MP3SideInfo
maxb	MP3Internals.hh	/^    unsigned maxb;$/;"	m	struct:MP3SideInfo::gr_info_s
maxband	MP3Internals.hh	/^    unsigned maxband[3];$/;"	m	struct:MP3SideInfo::gr_info_s
maxbandl	MP3Internals.hh	/^    unsigned maxbandl;$/;"	m	struct:MP3SideInfo::gr_info_s
mixed_block_flag	MP3Internals.hh	/^    unsigned mixed_block_flag;$/;"	m	struct:MP3SideInfo::gr_info_s
mode	MP3Internals.hh	/^  unsigned mode;$/;"	m	class:MP3FrameParams
mode_ext	MP3Internals.hh	/^  unsigned mode_ext;$/;"	m	class:MP3FrameParams
oldHdr	MP3Internals.hh	/^  unsigned oldHdr, firstHdr;$/;"	m	class:MP3FrameParams
original	MP3Internals.hh	/^  Boolean original;$/;"	m	class:MP3FrameParams
padding	MP3Internals.hh	/^  Boolean padding;$/;"	m	class:MP3FrameParams
part2_3_length	MP3Internals.hh	/^    unsigned part2_3_length;$/;"	m	struct:MP3SideInfo::gr_info_s
pow2gain	MP3Internals.hh	/^    double *pow2gain;$/;"	m	struct:MP3SideInfo::gr_info_s
preflag	MP3Internals.hh	/^    unsigned preflag;$/;"	m	struct:MP3SideInfo::gr_info_s
private_bits	MP3Internals.hh	/^  unsigned private_bits;$/;"	m	struct:MP3SideInfo
region0_count	MP3Internals.hh	/^    unsigned region0_count;$/;"	m	struct:MP3SideInfo::gr_info_s
region1_count	MP3Internals.hh	/^    unsigned region1_count;$/;"	m	struct:MP3SideInfo::gr_info_s
region1start	MP3Internals.hh	/^    unsigned region1start;$/;"	m	struct:MP3SideInfo::gr_info_s
region2start	MP3Internals.hh	/^    unsigned region2start;$/;"	m	struct:MP3SideInfo::gr_info_s
samplingFreq	MP3Internals.hh	/^  unsigned samplingFreq;$/;"	m	class:MP3FrameParams
samplingFreqIndex	MP3Internals.hh	/^  unsigned samplingFreqIndex;$/;"	m	class:MP3FrameParams
scalefac_compress	MP3Internals.hh	/^    unsigned scalefac_compress;$/;"	m	struct:MP3SideInfo::gr_info_s
scalefac_scale	MP3Internals.hh	/^    unsigned scalefac_scale;$/;"	m	struct:MP3SideInfo::gr_info_s
scfsi	MP3Internals.hh	/^    int scfsi;$/;"	m	struct:MP3SideInfo::gr_info_s
setBytePointer	MP3Internals.hh	/^  void setBytePointer(unsigned char const* restOfFrame,$/;"	f	class:MP3FrameParams
sideInfoSize	MP3Internals.hh	/^  unsigned sideInfoSize;$/;"	m	class:MP3FrameParams
stereo	MP3Internals.hh	/^  unsigned stereo;$/;"	m	class:MP3FrameParams
subblock_gain	MP3Internals.hh	/^    unsigned subblock_gain[3];$/;"	m	struct:MP3SideInfo::gr_info_s
table_select	MP3Internals.hh	/^    unsigned table_select[3];$/;"	m	struct:MP3SideInfo::gr_info_s
window_switching_flag	MP3Internals.hh	/^    unsigned window_switching_flag;$/;"	m	struct:MP3SideInfo::gr_info_s
HTN	MP3InternalsHuffman.cpp	319;"	d	file:
HUFFBITS	MP3InternalsHuffman.cpp	317;"	d	file:
MP3HuffmanDecode	MP3InternalsHuffman.cpp	/^void MP3HuffmanDecode(MP3SideInfo::gr_info_s_t* gr, Boolean isMPEG2,$/;"	f
MP3HuffmanEncode	MP3InternalsHuffman.cpp	/^unsigned MP3HuffmanEncode(MP3SideInfo::gr_info_s_t const* gr,$/;"	f
MP3HuffmanEncodingInfo	MP3InternalsHuffman.cpp	/^::MP3HuffmanEncodingInfo(Boolean includeDecodedValues) {$/;"	f	class:MP3HuffmanEncodingInfo
MXOFF	MP3InternalsHuffman.cpp	320;"	d	file:
SIZEOF_HUFFBITS	MP3InternalsHuffman.cpp	318;"	d	file:
TRUNC_FAVORa	MP3InternalsHuffman.cpp	43;"	d	file:
buildHuffmanEncodingTable	MP3InternalsHuffman.cpp	/^static void buildHuffmanEncodingTable(struct huffcodetab* h) {$/;"	f	file:
debugCount	MP3InternalsHuffman.cpp	/^static unsigned debugCount = 0; \/* for debugging *\/$/;"	v	file:
dmask	MP3InternalsHuffman.cpp	/^HUFFBITS dmask = 1 << (SIZEOF_HUFFBITS*8-1);$/;"	v
getNextSample	MP3InternalsHuffman.cpp	/^inline int getNextSample(unsigned char const*& fromPtr) {$/;"	f
getScaleFactorsLength	MP3InternalsHuffman.cpp	/^static unsigned getScaleFactorsLength(MP3SideInfo::gr_info_s_t* gr,$/;"	f	file:
hlen	MP3InternalsHuffman.cpp	/^  unsigned char *hlen;	\/*pointer to array[xlen][ylen]		*\/$/;"	m	struct:huffcodetab	file:
hs	MP3InternalsHuffman.cpp	/^unsigned int hs = SIZEOF_HUFFBITS*8;$/;"	v
huffcodetab	MP3InternalsHuffman.cpp	/^struct huffcodetab {$/;"	s	file:
initialize_huffman	MP3InternalsHuffman.cpp	/^static void initialize_huffman() {$/;"	f	file:
linbits	MP3InternalsHuffman.cpp	/^  unsigned int linbits; \/*number of linbits			*\/$/;"	m	struct:huffcodetab	file:
linmax	MP3InternalsHuffman.cpp	/^  unsigned int linmax;	\/*max number to be stored in linbits	*\/$/;"	m	struct:huffcodetab	file:
lookupHuffmanTableEntry	MP3InternalsHuffman.cpp	/^static Boolean lookupHuffmanTableEntry(struct huffcodetab const* h,$/;"	f	file:
lookupXYandPutBits	MP3InternalsHuffman.cpp	/^static void lookupXYandPutBits(BitVector& bv, struct huffcodetab const* h,$/;"	f	file:
putLinbits	MP3InternalsHuffman.cpp	/^static void putLinbits(BitVector& bv, struct huffcodetab const* h,$/;"	f	file:
read_decoder_table	MP3InternalsHuffman.cpp	/^static int read_decoder_table(unsigned char* fi) {$/;"	f	file:
ref	MP3InternalsHuffman.cpp	/^  int ref;		\/*a positive value indicates a reference*\/$/;"	m	struct:huffcodetab	file:
rsf_get_scale_factors_1	MP3InternalsHuffman.cpp	/^static unsigned rsf_get_scale_factors_1(MP3SideInfo::gr_info_s_t *gr_info) {$/;"	f	file:
rsf_get_scale_factors_2	MP3InternalsHuffman.cpp	/^static unsigned rsf_get_scale_factors_2(MP3SideInfo::gr_info_s_t *gr_info) {$/;"	f	file:
rsf_getline	MP3InternalsHuffman.cpp	/^static void rsf_getline(char* line, unsigned max, unsigned char**fi) {$/;"	f	file:
rsf_ht	MP3InternalsHuffman.cpp	/^static struct huffcodetab rsf_ht[HTN]; \/\/ array of all huffcodetable headers$/;"	v	typeref:struct:huffcodetab	file:
rsf_huffman_decoder	MP3InternalsHuffman.cpp	/^static int rsf_huffman_decoder(BitVector& bv,$/;"	f	file:
rsf_huffman_encoder	MP3InternalsHuffman.cpp	/^static void rsf_huffman_encoder(BitVector& bv,$/;"	f	file:
rsfscanf	MP3InternalsHuffman.cpp	/^static void rsfscanf(unsigned char **fi, unsigned int* v) {$/;"	f	file:
slen	MP3InternalsHuffman.cpp	/^static unsigned char const slen[2][16] = {$/;"	v	file:
stab	MP3InternalsHuffman.cpp	/^static unsigned char const stab[3][6][4] = {$/;"	v	file:
table	MP3InternalsHuffman.cpp	/^  HUFFBITS *table;	\/*pointer to array[xlen][ylen]		*\/$/;"	m	struct:huffcodetab	file:
tablename	MP3InternalsHuffman.cpp	/^  char tablename[3];	\/*string, containing table_description	*\/$/;"	m	struct:huffcodetab	file:
treelen	MP3InternalsHuffman.cpp	/^  unsigned int treelen;	\/*length of decoder tree		*\/$/;"	m	struct:huffcodetab	file:
updateSideInfoForHuffman	MP3InternalsHuffman.cpp	/^void updateSideInfoForHuffman(MP3SideInfo& sideInfo, Boolean isMPEG2,$/;"	f
val	MP3InternalsHuffman.cpp	/^  unsigned char(*val)[2];\/*decoder tree				*\/$/;"	m	struct:huffcodetab	file:
xlen	MP3InternalsHuffman.cpp	/^  unsigned int xlen; 	\/*max. x-index+			      	*\/$/;"	m	struct:huffcodetab	file:
ylen	MP3InternalsHuffman.cpp	/^  unsigned int ylen;	\/*max. y-index+				*\/$/;"	m	struct:huffcodetab	file:
~MP3HuffmanEncodingInfo	MP3InternalsHuffman.cpp	/^MP3HuffmanEncodingInfo::~MP3HuffmanEncodingInfo() {$/;"	f	class:MP3HuffmanEncodingInfo
BYTES_PER_SAMPLE_VALUE	MP3InternalsHuffman.hh	65;"	d
BYTES_PER_SAMPLE_VALUE	MP3InternalsHuffman.hh	68;"	d
BYTES_PER_SAMPLE_VALUE	MP3InternalsHuffman.hh	71;"	d
MP3HuffmanEncodingInfo	MP3InternalsHuffman.hh	/^class MP3HuffmanEncodingInfo {$/;"	c
SSLIMIT	MP3InternalsHuffman.hh	40;"	d
_MP3_INTERNALS_HUFFMAN_HH	MP3InternalsHuffman.hh	22;"	d
allBitOffsets	MP3InternalsHuffman.hh	/^  unsigned allBitOffsets[SBLIMIT*SSLIMIT + 1];$/;"	m	class:MP3HuffmanEncodingInfo
bigvalStart	MP3InternalsHuffman.hh	/^  unsigned reg1Start, reg2Start, bigvalStart; \/* special bit offsets *\/$/;"	m	class:MP3HuffmanEncodingInfo
decodedValues	MP3InternalsHuffman.hh	/^  unsigned* decodedValues;$/;"	m	class:MP3HuffmanEncodingInfo
numSamples	MP3InternalsHuffman.hh	/^  unsigned numSamples;$/;"	m	class:MP3HuffmanEncodingInfo
reg1Start	MP3InternalsHuffman.hh	/^  unsigned reg1Start, reg2Start, bigvalStart; \/* special bit offsets *\/$/;"	m	class:MP3HuffmanEncodingInfo
reg2Start	MP3InternalsHuffman.hh	/^  unsigned reg1Start, reg2Start, bigvalStart; \/* special bit offsets *\/$/;"	m	class:MP3HuffmanEncodingInfo
huffdec	MP3InternalsHuffmanTable.cpp	/^unsigned char huffdec[] = {$/;"	v
HDRCMPMASK	MP3StreamState.cpp	193;"	d	file:
MILLION	MP3StreamState.cpp	32;"	d	file:
MP3StreamState	MP3StreamState.cpp	/^MP3StreamState::MP3StreamState(UsageEnvironment& env)$/;"	f	class:MP3StreamState
XING_BYTES_FLAG	MP3StreamState.cpp	395;"	d	file:
XING_FRAMES_FLAG	MP3StreamState.cpp	394;"	d	file:
XING_TOC_FLAG	MP3StreamState.cpp	396;"	d	file:
XING_VBR_SCALE_FLAG	MP3StreamState.cpp	397;"	d	file:
assignStream	MP3StreamState.cpp	/^void MP3StreamState::assignStream(FILE* fid, unsigned fileSize) {$/;"	f	class:MP3StreamState
checkForXingHeader	MP3StreamState.cpp	/^void MP3StreamState::checkForXingHeader() {$/;"	f	class:MP3StreamState
checkFunc	MP3StreamState.cpp	/^static void checkFunc(void* \/*clientData*\/) {$/;"	f	file:
currentFramePlayTime	MP3StreamState.cpp	/^struct timeval MP3StreamState::currentFramePlayTime() const {$/;"	f	class:MP3StreamState
filePlayTime	MP3StreamState.cpp	/^float MP3StreamState::filePlayTime() const {$/;"	f	class:MP3StreamState
fileno	MP3StreamState.cpp	28;"	d	file:
findNextFrame	MP3StreamState.cpp	/^Boolean MP3StreamState::findNextFrame() {$/;"	f	class:MP3StreamState
findNextHeader	MP3StreamState.cpp	/^unsigned MP3StreamState::findNextHeader(struct timeval& presentationTime) {$/;"	f	class:MP3StreamState
getAttributes	MP3StreamState.cpp	/^void MP3StreamState::getAttributes(char* buffer, unsigned bufferSize) const {$/;"	f	class:MP3StreamState
getByteNumberFromPositionFraction	MP3StreamState.cpp	/^unsigned MP3StreamState::getByteNumberFromPositionFraction(float fraction) {$/;"	f	class:MP3StreamState
readFrame	MP3StreamState.cpp	/^Boolean MP3StreamState::readFrame(unsigned char* outBuf, unsigned outBufSize,$/;"	f	class:MP3StreamState
readFromStream	MP3StreamState.cpp	/^unsigned MP3StreamState::readFromStream(unsigned char* buf,$/;"	f	class:MP3StreamState
seekWithinFile	MP3StreamState.cpp	/^void MP3StreamState::seekWithinFile(unsigned seekByteNumber) {$/;"	f	class:MP3StreamState
snprintf	MP3StreamState.cpp	26;"	d	file:
socketIsReadable	MP3StreamState.cpp	/^static Boolean socketIsReadable(int socket) {$/;"	f	file:
waitUntilSocketIsReadable	MP3StreamState.cpp	/^static void waitUntilSocketIsReadable(UsageEnvironment& env, int socket) {$/;"	f	file:
watchVariable	MP3StreamState.cpp	/^static char watchVariable;$/;"	v	file:
~MP3StreamState	MP3StreamState.cpp	/^MP3StreamState::~MP3StreamState() {$/;"	f	class:MP3StreamState
MP3StreamState	MP3StreamState.hh	/^class MP3StreamState {$/;"	c
XING_TOC_LENGTH	MP3StreamState.hh	39;"	d
_MP3_STREAM_STATE_HH	MP3StreamState.hh	22;"	d
fCurrentFrame	MP3StreamState.hh	/^  MP3FrameParams fCurrentFrame;$/;"	m	class:MP3StreamState
fEnv	MP3StreamState.hh	/^  UsageEnvironment& fEnv;$/;"	m	class:MP3StreamState
fFid	MP3StreamState.hh	/^  FILE* fFid;$/;"	m	class:MP3StreamState
fFidIsReallyASocket	MP3StreamState.hh	/^  Boolean fFidIsReallyASocket;$/;"	m	class:MP3StreamState
fFileSize	MP3StreamState.hh	/^  unsigned fFileSize;$/;"	m	class:MP3StreamState
fHasXingTOC	MP3StreamState.hh	/^  Boolean fIsVBR, fHasXingTOC;$/;"	m	class:MP3StreamState
fIsVBR	MP3StreamState.hh	/^  Boolean fIsVBR, fHasXingTOC;$/;"	m	class:MP3StreamState
fNextFramePresentationTime	MP3StreamState.hh	/^  struct timeval fNextFramePresentationTime;$/;"	m	class:MP3StreamState	typeref:struct:MP3StreamState::timeval
fNumFramesInFile	MP3StreamState.hh	/^  unsigned fNumFramesInFile;$/;"	m	class:MP3StreamState
fPresentationTimeScale	MP3StreamState.hh	/^  unsigned fPresentationTimeScale;$/;"	m	class:MP3StreamState
fXingTOC	MP3StreamState.hh	/^  u_int8_t fXingTOC[XING_TOC_LENGTH]; \/\/ set iff "fHasXingTOC" is True$/;"	m	class:MP3StreamState
fileSize	MP3StreamState.hh	/^  unsigned fileSize() const { return fFileSize; }$/;"	f	class:MP3StreamState
fr	MP3StreamState.hh	/^  MP3FrameParams const& fr() const {return fCurrentFrame;}$/;"	f	class:MP3StreamState
fr	MP3StreamState.hh	/^  MP3FrameParams& fr() {return fCurrentFrame;}$/;"	f	class:MP3StreamState
setPresentationTimeScale	MP3StreamState.hh	/^  void setPresentationTimeScale(unsigned scale) { fPresentationTimeScale = scale; }$/;"	f	class:MP3StreamState
MP3Transcoder	MP3Transcoder.cpp	/^MP3Transcoder::MP3Transcoder(UsageEnvironment& env,$/;"	f	class:MP3Transcoder
createNew	MP3Transcoder.cpp	/^MP3Transcoder* MP3Transcoder::createNew(UsageEnvironment& env,$/;"	f	class:MP3Transcoder
~MP3Transcoder	MP3Transcoder.cpp	/^MP3Transcoder::~MP3Transcoder() {$/;"	f	class:MP3Transcoder
MPEG1or2AudioRTPSink	MPEG1or2AudioRTPSink.cpp	/^MPEG1or2AudioRTPSink::MPEG1or2AudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs)$/;"	f	class:MPEG1or2AudioRTPSink
createNew	MPEG1or2AudioRTPSink.cpp	/^MPEG1or2AudioRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs) {$/;"	f	class:MPEG1or2AudioRTPSink
doSpecialFrameHandling	MPEG1or2AudioRTPSink.cpp	/^void MPEG1or2AudioRTPSink::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MPEG1or2AudioRTPSink
specialHeaderSize	MPEG1or2AudioRTPSink.cpp	/^unsigned MPEG1or2AudioRTPSink::specialHeaderSize() const {$/;"	f	class:MPEG1or2AudioRTPSink
~MPEG1or2AudioRTPSink	MPEG1or2AudioRTPSink.cpp	/^MPEG1or2AudioRTPSink::~MPEG1or2AudioRTPSink() {$/;"	f	class:MPEG1or2AudioRTPSink
MIMEtype	MPEG1or2AudioRTPSource.cpp	/^char const* MPEG1or2AudioRTPSource::MIMEtype() const {$/;"	f	class:MPEG1or2AudioRTPSource
MPEG1or2AudioRTPSource	MPEG1or2AudioRTPSource.cpp	/^MPEG1or2AudioRTPSource::MPEG1or2AudioRTPSource(UsageEnvironment& env,$/;"	f	class:MPEG1or2AudioRTPSource
createNew	MPEG1or2AudioRTPSource.cpp	/^MPEG1or2AudioRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2AudioRTPSource
processSpecialHeader	MPEG1or2AudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:MPEG1or2AudioRTPSource
~MPEG1or2AudioRTPSource	MPEG1or2AudioRTPSource.cpp	/^MPEG1or2AudioRTPSource::~MPEG1or2AudioRTPSource() {$/;"	f	class:MPEG1or2AudioRTPSource
MILLION	MPEG1or2AudioStreamFramer.cpp	97;"	d	file:
MPEG1or2AudioStreamFramer	MPEG1or2AudioStreamFramer.cpp	/^::MPEG1or2AudioStreamFramer(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:MPEG1or2AudioStreamFramer
MPEG1or2AudioStreamParser	MPEG1or2AudioStreamFramer.cpp	/^::MPEG1or2AudioStreamParser(MPEG1or2AudioStreamFramer* usingSource,$/;"	f	class:MPEG1or2AudioStreamParser
MPEG1or2AudioStreamParser	MPEG1or2AudioStreamFramer.cpp	/^class MPEG1or2AudioStreamParser: public StreamParser {$/;"	c	file:
continueReadProcessing	MPEG1or2AudioStreamFramer.cpp	/^::continueReadProcessing(void* clientData,$/;"	f	class:MPEG1or2AudioStreamFramer
continueReadProcessing	MPEG1or2AudioStreamFramer.cpp	/^void MPEG1or2AudioStreamFramer::continueReadProcessing() {$/;"	f	class:MPEG1or2AudioStreamFramer
createNew	MPEG1or2AudioStreamFramer.cpp	/^MPEG1or2AudioStreamFramer::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2AudioStreamFramer
currentFrame	MPEG1or2AudioStreamFramer.cpp	/^  MP3FrameParams const& currentFrame() const { return fCurrentFrame; }$/;"	f	class:MPEG1or2AudioStreamParser
currentFramePlayTime	MPEG1or2AudioStreamFramer.cpp	/^struct timeval MPEG1or2AudioStreamFramer::currentFramePlayTime() const {$/;"	f	class:MPEG1or2AudioStreamFramer
doGetNextFrame	MPEG1or2AudioStreamFramer.cpp	/^void MPEG1or2AudioStreamFramer::doGetNextFrame() {$/;"	f	class:MPEG1or2AudioStreamFramer
fCurrentFrame	MPEG1or2AudioStreamFramer.cpp	/^  MP3FrameParams fCurrentFrame; \/\/ also works for layer I or II$/;"	m	class:MPEG1or2AudioStreamParser	file:
fMaxSize	MPEG1or2AudioStreamFramer.cpp	/^  unsigned fMaxSize;$/;"	m	class:MPEG1or2AudioStreamParser	file:
fTo	MPEG1or2AudioStreamFramer.cpp	/^  unsigned char* fTo;$/;"	m	class:MPEG1or2AudioStreamParser	file:
flushInput	MPEG1or2AudioStreamFramer.cpp	/^void MPEG1or2AudioStreamFramer::flushInput() {$/;"	f	class:MPEG1or2AudioStreamFramer
numSamplesByLayer	MPEG1or2AudioStreamFramer.cpp	/^static unsigned const numSamplesByLayer[4] = {0, 384, 1152, 1152};$/;"	v	file:
parse	MPEG1or2AudioStreamFramer.cpp	/^unsigned MPEG1or2AudioStreamParser::parse(unsigned& numTruncatedBytes) {$/;"	f	class:MPEG1or2AudioStreamParser
registerReadInterest	MPEG1or2AudioStreamFramer.cpp	/^void MPEG1or2AudioStreamParser::registerReadInterest(unsigned char* to,$/;"	f	class:MPEG1or2AudioStreamParser
reset	MPEG1or2AudioStreamFramer.cpp	/^void MPEG1or2AudioStreamFramer::reset() {$/;"	f	class:MPEG1or2AudioStreamFramer
resetPresentationTime	MPEG1or2AudioStreamFramer.cpp	/^::resetPresentationTime(struct timeval newPresentationTime) {$/;"	f	class:MPEG1or2AudioStreamFramer
~MPEG1or2AudioStreamFramer	MPEG1or2AudioStreamFramer.cpp	/^MPEG1or2AudioStreamFramer::~MPEG1or2AudioStreamFramer() {$/;"	f	class:MPEG1or2AudioStreamFramer
~MPEG1or2AudioStreamParser	MPEG1or2AudioStreamFramer.cpp	/^MPEG1or2AudioStreamParser::~MPEG1or2AudioStreamParser() {$/;"	f	class:MPEG1or2AudioStreamParser
MPEG1or2Demux	MPEG1or2Demux.cpp	/^::MPEG1or2Demux(UsageEnvironment& env,$/;"	f	class:MPEG1or2Demux
MPEGParseState	MPEG1or2Demux.cpp	/^enum MPEGParseState {$/;"	g	file:
MPEGProgramStreamParser	MPEG1or2Demux.cpp	/^MPEGProgramStreamParser::MPEGProgramStreamParser(MPEG1or2Demux* usingDemux,$/;"	f	class:MPEGProgramStreamParser
MPEGProgramStreamParser	MPEG1or2Demux.cpp	/^class MPEGProgramStreamParser: public StreamParser {$/;"	c	file:
PACKET_START_CODE_PREFIX	MPEG1or2Demux.cpp	375;"	d	file:
PACK_START_CODE	MPEG1or2Demux.cpp	373;"	d	file:
PARSING_PACK_HEADER	MPEG1or2Demux.cpp	/^  PARSING_PACK_HEADER,$/;"	e	enum:MPEGParseState	file:
PARSING_PES_PACKET	MPEG1or2Demux.cpp	/^  PARSING_PES_PACKET$/;"	e	enum:MPEGParseState	file:
PARSING_SYSTEM_HEADER	MPEG1or2Demux.cpp	/^  PARSING_SYSTEM_HEADER,$/;"	e	enum:MPEGParseState	file:
RAW_PES	MPEG1or2Demux.cpp	147;"	d	file:
READER_NOT_READY	MPEG1or2Demux.cpp	520;"	d	file:
SCR	MPEG1or2Demux.cpp	/^MPEG1or2Demux::SCR::SCR()$/;"	f	class:MPEG1or2Demux::SCR
SYSTEM_HEADER_START_CODE	MPEG1or2Demux.cpp	374;"	d	file:
SavedData	MPEG1or2Demux.cpp	/^  SavedData(unsigned char* buf, unsigned size)$/;"	f	class:MPEG1or2Demux::OutputDescriptor::SavedData
SavedData	MPEG1or2Demux.cpp	/^class MPEG1or2Demux::OutputDescriptor::SavedData {$/;"	c	class:MPEG1or2Demux::OutputDescriptor	file:
continueReadProcessing	MPEG1or2Demux.cpp	/^::continueReadProcessing(void* clientData,$/;"	f	class:MPEG1or2Demux
continueReadProcessing	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::continueReadProcessing() {$/;"	f	class:MPEG1or2Demux
createNew	MPEG1or2Demux.cpp	/^::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2Demux
data	MPEG1or2Demux.cpp	/^  unsigned char* data;$/;"	m	class:MPEG1or2Demux::OutputDescriptor::SavedData	file:
dataSize	MPEG1or2Demux.cpp	/^  unsigned dataSize, numBytesUsed;$/;"	m	class:MPEG1or2Demux::OutputDescriptor::SavedData	file:
fCurrentParseState	MPEG1or2Demux.cpp	/^  MPEGParseState fCurrentParseState;$/;"	m	class:MPEGProgramStreamParser	file:
fUsingDemux	MPEG1or2Demux.cpp	/^  MPEG1or2Demux* fUsingDemux;$/;"	m	class:MPEGProgramStreamParser	file:
flushInput	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::flushInput() {$/;"	f	class:MPEG1or2Demux
getNextFrame	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::getNextFrame(u_int8_t streamIdTag,$/;"	f	class:MPEG1or2Demux
handleClosure	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::handleClosure(void* clientData) {$/;"	f	class:MPEG1or2Demux
isPacketStartCode	MPEG1or2Demux.cpp	/^static inline Boolean isPacketStartCode(unsigned code) {$/;"	f	file:
isSpecialStreamId	MPEG1or2Demux.cpp	/^::isSpecialStreamId(unsigned char stream_id) const {$/;"	f	class:MPEGProgramStreamParser
newAudioStream	MPEG1or2Demux.cpp	/^MPEG1or2DemuxedElementaryStream* MPEG1or2Demux::newAudioStream() {$/;"	f	class:MPEG1or2Demux
newElementaryStream	MPEG1or2Demux.cpp	/^MPEG1or2Demux::newElementaryStream(u_int8_t streamIdTag) {$/;"	f	class:MPEG1or2Demux
newRawPESStream	MPEG1or2Demux.cpp	/^MPEG1or2DemuxedElementaryStream* MPEG1or2Demux::newRawPESStream() {$/;"	f	class:MPEG1or2Demux
newVideoStream	MPEG1or2Demux.cpp	/^MPEG1or2DemuxedElementaryStream* MPEG1or2Demux::newVideoStream() {$/;"	f	class:MPEG1or2Demux
next	MPEG1or2Demux.cpp	/^  SavedData* next;$/;"	m	class:MPEG1or2Demux::OutputDescriptor::SavedData	file:
noteElementaryStreamDeletion	MPEG1or2Demux.cpp	/^::noteElementaryStreamDeletion(MPEG1or2DemuxedElementaryStream* \/*es*\/) {$/;"	f	class:MPEG1or2Demux
numBytesUsed	MPEG1or2Demux.cpp	/^  unsigned dataSize, numBytesUsed;$/;"	m	class:MPEG1or2Demux::OutputDescriptor::SavedData	file:
parse	MPEG1or2Demux.cpp	/^unsigned char MPEGProgramStreamParser::parse() {$/;"	f	class:MPEGProgramStreamParser
parsePESPacket	MPEG1or2Demux.cpp	/^unsigned char MPEGProgramStreamParser::parsePESPacket() {$/;"	f	class:MPEGProgramStreamParser
parsePackHeader	MPEG1or2Demux.cpp	/^void MPEGProgramStreamParser::parsePackHeader() {$/;"	f	class:MPEGProgramStreamParser
parseSystemHeader	MPEG1or2Demux.cpp	/^void MPEGProgramStreamParser::parseSystemHeader() {$/;"	f	class:MPEGProgramStreamParser
private_stream_1	MPEG1or2Demux.cpp	498;"	d	file:
private_stream_2	MPEG1or2Demux.cpp	499;"	d	file:
registerReadInterest	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::registerReadInterest(u_int8_t streamIdTag,$/;"	f	class:MPEG1or2Demux
setParseState	MPEG1or2Demux.cpp	/^void MPEGProgramStreamParser::setParseState(MPEGParseState parseState) {$/;"	f	class:MPEGProgramStreamParser
stopGettingFrames	MPEG1or2Demux.cpp	/^void MPEG1or2Demux::stopGettingFrames(u_int8_t streamIdTag) {$/;"	f	class:MPEG1or2Demux
useSavedData	MPEG1or2Demux.cpp	/^Boolean MPEG1or2Demux::useSavedData(u_int8_t streamIdTag,$/;"	f	class:MPEG1or2Demux
~MPEG1or2Demux	MPEG1or2Demux.cpp	/^MPEG1or2Demux::~MPEG1or2Demux() {$/;"	f	class:MPEG1or2Demux
~MPEGProgramStreamParser	MPEG1or2Demux.cpp	/^MPEGProgramStreamParser::~MPEGProgramStreamParser() {$/;"	f	class:MPEGProgramStreamParser
~SavedData	MPEG1or2Demux.cpp	/^  virtual ~SavedData() {$/;"	f	class:MPEG1or2Demux::OutputDescriptor::SavedData
MIMEtype	MPEG1or2DemuxedElementaryStream.cpp	/^char const* MPEG1or2DemuxedElementaryStream::MIMEtype() const {$/;"	f	class:MPEG1or2DemuxedElementaryStream
MPEG1or2DemuxedElementaryStream	MPEG1or2DemuxedElementaryStream.cpp	/^MPEG1or2DemuxedElementaryStream(UsageEnvironment& env, u_int8_t streamIdTag,$/;"	f	class:MPEG1or2DemuxedElementaryStream
afterGettingFrame	MPEG1or2DemuxedElementaryStream.cpp	/^::afterGettingFrame(void* clientData,$/;"	f	class:MPEG1or2DemuxedElementaryStream
afterGettingFrame1	MPEG1or2DemuxedElementaryStream.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:MPEG1or2DemuxedElementaryStream
doGetNextFrame	MPEG1or2DemuxedElementaryStream.cpp	/^void MPEG1or2DemuxedElementaryStream::doGetNextFrame() {$/;"	f	class:MPEG1or2DemuxedElementaryStream
doStopGettingFrames	MPEG1or2DemuxedElementaryStream.cpp	/^void MPEG1or2DemuxedElementaryStream::doStopGettingFrames() {$/;"	f	class:MPEG1or2DemuxedElementaryStream
maxFrameSize	MPEG1or2DemuxedElementaryStream.cpp	/^unsigned MPEG1or2DemuxedElementaryStream::maxFrameSize() const {$/;"	f	class:MPEG1or2DemuxedElementaryStream
~MPEG1or2DemuxedElementaryStream	MPEG1or2DemuxedElementaryStream.cpp	/^MPEG1or2DemuxedElementaryStream::~MPEG1or2DemuxedElementaryStream() {$/;"	f	class:MPEG1or2DemuxedElementaryStream
MPEG1or2DemuxedServerMediaSubsession	MPEG1or2DemuxedServerMediaSubsession.cpp	/^::MPEG1or2DemuxedServerMediaSubsession(MPEG1or2FileServerDemux& demux,$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
createNew	MPEG1or2DemuxedServerMediaSubsession.cpp	/^::createNew(MPEG1or2FileServerDemux& demux, u_int8_t streamIdTag,$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
createNewRTPSink	MPEG1or2DemuxedServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock, unsigned char rtpPayloadTypeIfDynamic,$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
createNewStreamSource	MPEG1or2DemuxedServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
duration	MPEG1or2DemuxedServerMediaSubsession.cpp	/^float MPEG1or2DemuxedServerMediaSubsession::duration() const {$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
seekStreamSource	MPEG1or2DemuxedServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double \/*streamDuration*\/, u_int64_t& \/*numBytes*\/) {$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
~MPEG1or2DemuxedServerMediaSubsession	MPEG1or2DemuxedServerMediaSubsession.cpp	/^MPEG1or2DemuxedServerMediaSubsession::~MPEG1or2DemuxedServerMediaSubsession() {$/;"	f	class:MPEG1or2DemuxedServerMediaSubsession
MFSD_DUMMY_SINK_BUFFER_SIZE	MPEG1or2FileServerDemux.cpp	166;"	d	file:
MFSD_DummySink	MPEG1or2FileServerDemux.cpp	/^MFSD_DummySink::MFSD_DummySink(MPEG1or2Demux& demux, Boolean returnFirstSeenCode)$/;"	f	class:MFSD_DummySink
MFSD_DummySink	MPEG1or2FileServerDemux.cpp	/^class MFSD_DummySink: public MediaSink {$/;"	c	file:
MPEG1or2FileServerDemux	MPEG1or2FileServerDemux.cpp	/^::MPEG1or2FileServerDemux(UsageEnvironment& env, char const* fileName,$/;"	f	class:MPEG1or2FileServerDemux
MPEG1or2ProgramStreamFileDuration	MPEG1or2FileServerDemux.cpp	/^static float MPEG1or2ProgramStreamFileDuration(UsageEnvironment& env,$/;"	f	file:
afterGettingFrame	MPEG1or2FileServerDemux.cpp	/^void MFSD_DummySink::afterGettingFrame(void* clientData, unsigned \/*frameSize*\/,$/;"	f	class:MFSD_DummySink
afterGettingFrame1	MPEG1or2FileServerDemux.cpp	/^void MFSD_DummySink::afterGettingFrame1() {$/;"	f	class:MFSD_DummySink
afterPlayingMFSD_DummySink	MPEG1or2FileServerDemux.cpp	/^static void afterPlayingMFSD_DummySink(MFSD_DummySink* sink) {$/;"	f	file:
computeSCRTimeCode	MPEG1or2FileServerDemux.cpp	/^static float computeSCRTimeCode(MPEG1or2Demux::SCR const& scr) {$/;"	f	file:
continuePlaying	MPEG1or2FileServerDemux.cpp	/^Boolean MFSD_DummySink::continuePlaying() {$/;"	f	class:MFSD_DummySink
createNew	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:MPEG1or2FileServerDemux
fBuf	MPEG1or2FileServerDemux.cpp	/^  unsigned char fBuf[MFSD_DUMMY_SINK_BUFFER_SIZE];$/;"	m	class:MFSD_DummySink	file:
fOurDemux	MPEG1or2FileServerDemux.cpp	/^  MPEG1or2Demux& fOurDemux;$/;"	m	class:MFSD_DummySink	file:
fReturnFirstSeenCode	MPEG1or2FileServerDemux.cpp	/^  Boolean fReturnFirstSeenCode;$/;"	m	class:MFSD_DummySink	file:
getMPEG1or2TimeCode	MPEG1or2FileServerDemux.cpp	/^static Boolean getMPEG1or2TimeCode(FramedSource* dataSource,$/;"	f	file:
newAC3AudioServerMediaSubsession	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::newAC3AudioServerMediaSubsession() {$/;"	f	class:MPEG1or2FileServerDemux
newAudioServerMediaSubsession	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::newAudioServerMediaSubsession() {$/;"	f	class:MPEG1or2FileServerDemux
newElementaryStream	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::newElementaryStream(unsigned clientSessionId,$/;"	f	class:MPEG1or2FileServerDemux
newVideoServerMediaSubsession	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::newVideoServerMediaSubsession(Boolean iFramesOnly,$/;"	f	class:MPEG1or2FileServerDemux
watchVariable	MPEG1or2FileServerDemux.cpp	/^  char watchVariable;$/;"	m	class:MFSD_DummySink	file:
~MFSD_DummySink	MPEG1or2FileServerDemux.cpp	/^MFSD_DummySink::~MFSD_DummySink() {$/;"	f	class:MFSD_DummySink
~MPEG1or2FileServerDemux	MPEG1or2FileServerDemux.cpp	/^MPEG1or2FileServerDemux::~MPEG1or2FileServerDemux() {$/;"	f	class:MPEG1or2FileServerDemux
MPEG1or2VideoFileServerMediaSubsession	MPEG1or2VideoFileServerMediaSubsession.cpp	/^::MPEG1or2VideoFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoFileServerMediaSubsession
createNew	MPEG1or2VideoFileServerMediaSubsession.cpp	/^MPEG1or2VideoFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoFileServerMediaSubsession
createNewRTPSink	MPEG1or2VideoFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:MPEG1or2VideoFileServerMediaSubsession
createNewStreamSource	MPEG1or2VideoFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:MPEG1or2VideoFileServerMediaSubsession
~MPEG1or2VideoFileServerMediaSubsession	MPEG1or2VideoFileServerMediaSubsession.cpp	/^::~MPEG1or2VideoFileServerMediaSubsession() {$/;"	f	class:MPEG1or2VideoFileServerMediaSubsession
MPEG1or2VideoRTPSink	MPEG1or2VideoRTPSink.cpp	/^MPEG1or2VideoRTPSink::MPEG1or2VideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs)$/;"	f	class:MPEG1or2VideoRTPSink
PICTURE_START_CODE	MPEG1or2VideoRTPSink.cpp	65;"	d	file:
VIDEO_SEQUENCE_HEADER_START_CODE	MPEG1or2VideoRTPSink.cpp	64;"	d	file:
allowFragmentationAfterStart	MPEG1or2VideoRTPSink.cpp	/^Boolean MPEG1or2VideoRTPSink::allowFragmentationAfterStart() const {$/;"	f	class:MPEG1or2VideoRTPSink
createNew	MPEG1or2VideoRTPSink.cpp	/^MPEG1or2VideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs) {$/;"	f	class:MPEG1or2VideoRTPSink
doSpecialFrameHandling	MPEG1or2VideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MPEG1or2VideoRTPSink
frameCanAppearAfterPacketStart	MPEG1or2VideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* frameStart,$/;"	f	class:MPEG1or2VideoRTPSink
sourceIsCompatibleWithUs	MPEG1or2VideoRTPSink.cpp	/^Boolean MPEG1or2VideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:MPEG1or2VideoRTPSink
specialHeaderSize	MPEG1or2VideoRTPSink.cpp	/^unsigned MPEG1or2VideoRTPSink::specialHeaderSize() const {$/;"	f	class:MPEG1or2VideoRTPSink
~MPEG1or2VideoRTPSink	MPEG1or2VideoRTPSink.cpp	/^MPEG1or2VideoRTPSink::~MPEG1or2VideoRTPSink() {$/;"	f	class:MPEG1or2VideoRTPSink
MIMEtype	MPEG1or2VideoRTPSource.cpp	/^char const* MPEG1or2VideoRTPSource::MIMEtype() const {$/;"	f	class:MPEG1or2VideoRTPSource
MPEG1or2VideoRTPSource	MPEG1or2VideoRTPSource.cpp	/^MPEG1or2VideoRTPSource::MPEG1or2VideoRTPSource(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoRTPSource
createNew	MPEG1or2VideoRTPSource.cpp	/^MPEG1or2VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG1or2VideoRTPSource
packetIsUsableInJitterCalculation	MPEG1or2VideoRTPSource.cpp	/^::packetIsUsableInJitterCalculation(unsigned char* packet,$/;"	f	class:MPEG1or2VideoRTPSource
processSpecialHeader	MPEG1or2VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:MPEG1or2VideoRTPSource
~MPEG1or2VideoRTPSource	MPEG1or2VideoRTPSource.cpp	/^MPEG1or2VideoRTPSource::~MPEG1or2VideoRTPSource() {$/;"	f	class:MPEG1or2VideoRTPSource
MILLION	MPEG1or2VideoStreamDiscreteFramer.cpp	93;"	d	file:
MPEG1or2VideoStreamDiscreteFramer	MPEG1or2VideoStreamDiscreteFramer.cpp	/^::MPEG1or2VideoStreamDiscreteFramer(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
afterGettingFrame	MPEG1or2VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
afterGettingFrame1	MPEG1or2VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
createNew	MPEG1or2VideoStreamDiscreteFramer.cpp	/^MPEG1or2VideoStreamDiscreteFramer::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
doGetNextFrame	MPEG1or2VideoStreamDiscreteFramer.cpp	/^void MPEG1or2VideoStreamDiscreteFramer::doGetNextFrame() {$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
frameRateFromCode	MPEG1or2VideoStreamDiscreteFramer.cpp	/^static double const frameRateFromCode[] = {$/;"	v	file:
~MPEG1or2VideoStreamDiscreteFramer	MPEG1or2VideoStreamDiscreteFramer.cpp	/^MPEG1or2VideoStreamDiscreteFramer::~MPEG1or2VideoStreamDiscreteFramer() {$/;"	f	class:MPEG1or2VideoStreamDiscreteFramer
GROUP_START_CODE	MPEG1or2VideoStreamFramer.cpp	220;"	d	file:
MPEG1or2VideoStreamFramer	MPEG1or2VideoStreamFramer.cpp	/^MPEG1or2VideoStreamFramer::MPEG1or2VideoStreamFramer(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoStreamFramer
MPEG1or2VideoStreamParser	MPEG1or2VideoStreamFramer.cpp	/^::MPEG1or2VideoStreamParser(MPEG1or2VideoStreamFramer* usingSource,$/;"	f	class:MPEG1or2VideoStreamParser
MPEG1or2VideoStreamParser	MPEG1or2VideoStreamFramer.cpp	/^class MPEG1or2VideoStreamParser: public MPEGVideoStreamParser {$/;"	c	file:
MPEGParseState	MPEG1or2VideoStreamFramer.cpp	/^enum MPEGParseState {$/;"	g	file:
PARSING_GOP_HEADER	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_GOP_HEADER,$/;"	e	enum:MPEGParseState	file:
PARSING_GOP_HEADER_SEEN_CODE	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_GOP_HEADER_SEEN_CODE,$/;"	e	enum:MPEGParseState	file:
PARSING_PICTURE_HEADER	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_PICTURE_HEADER,$/;"	e	enum:MPEGParseState	file:
PARSING_SLICE	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_SLICE$/;"	e	enum:MPEGParseState	file:
PARSING_VIDEO_SEQUENCE_HEADER	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_VIDEO_SEQUENCE_HEADER,$/;"	e	enum:MPEGParseState	file:
PARSING_VIDEO_SEQUENCE_HEADER_SEEN_CODE	MPEG1or2VideoStreamFramer.cpp	/^  PARSING_VIDEO_SEQUENCE_HEADER_SEEN_CODE,$/;"	e	enum:MPEGParseState	file:
PICTURE_START_CODE	MPEG1or2VideoStreamFramer.cpp	221;"	d	file:
SEQUENCE_END_CODE	MPEG1or2VideoStreamFramer.cpp	222;"	d	file:
VIDEO_SEQUENCE_HEADER_START_CODE	MPEG1or2VideoStreamFramer.cpp	219;"	d	file:
VSH_MAX_SIZE	MPEG1or2VideoStreamFramer.cpp	38;"	d	file:
createNew	MPEG1or2VideoStreamFramer.cpp	/^MPEG1or2VideoStreamFramer::createNew(UsageEnvironment& env,$/;"	f	class:MPEG1or2VideoStreamFramer
fCurPicTemporalReference	MPEG1or2VideoStreamFramer.cpp	/^  unsigned short fCurPicTemporalReference;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fCurrentParseState	MPEG1or2VideoStreamFramer.cpp	/^  MPEGParseState fCurrentParseState;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fCurrentSliceNumber	MPEG1or2VideoStreamFramer.cpp	/^  unsigned char fCurrentSliceNumber; \/\/ set when parsing a slice$/;"	m	class:MPEG1or2VideoStreamParser	file:
fIFramesOnly	MPEG1or2VideoStreamFramer.cpp	/^  Boolean fIFramesOnly, fSkippingCurrentPicture;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fPicturesSinceLastGOP	MPEG1or2VideoStreamFramer.cpp	/^  unsigned fPicturesSinceLastGOP;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fSavedVSHBuffer	MPEG1or2VideoStreamFramer.cpp	/^  unsigned char fSavedVSHBuffer[VSH_MAX_SIZE];$/;"	m	class:MPEG1or2VideoStreamParser	file:
fSavedVSHSize	MPEG1or2VideoStreamFramer.cpp	/^  unsigned fSavedVSHSize;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fSavedVSHTimestamp	MPEG1or2VideoStreamFramer.cpp	/^  double fSavedVSHTimestamp;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fSkippingCurrentPicture	MPEG1or2VideoStreamFramer.cpp	/^  Boolean fIFramesOnly, fSkippingCurrentPicture;$/;"	m	class:MPEG1or2VideoStreamParser	file:
fVSHPeriod	MPEG1or2VideoStreamFramer.cpp	/^  double fVSHPeriod;$/;"	m	class:MPEG1or2VideoStreamParser	file:
flushInput	MPEG1or2VideoStreamFramer.cpp	/^void MPEG1or2VideoStreamParser::flushInput() {$/;"	f	class:MPEG1or2VideoStreamParser
frameRateFromCode	MPEG1or2VideoStreamFramer.cpp	/^static double const frameRateFromCode[] = {$/;"	v	file:
getCurrentPTS	MPEG1or2VideoStreamFramer.cpp	/^double MPEG1or2VideoStreamFramer::getCurrentPTS() const {$/;"	f	class:MPEG1or2VideoStreamFramer
isMPEG1or2VideoStreamFramer	MPEG1or2VideoStreamFramer.cpp	/^Boolean MPEG1or2VideoStreamFramer::isMPEG1or2VideoStreamFramer() const {$/;"	f	class:MPEG1or2VideoStreamFramer
isSliceStartCode	MPEG1or2VideoStreamFramer.cpp	/^inline Boolean isSliceStartCode(unsigned fourBytes) {$/;"	f
needToUseSavedVSH	MPEG1or2VideoStreamFramer.cpp	/^Boolean MPEG1or2VideoStreamParser::needToUseSavedVSH() {$/;"	f	class:MPEG1or2VideoStreamParser
parse	MPEG1or2VideoStreamFramer.cpp	/^unsigned MPEG1or2VideoStreamParser::parse() {$/;"	f	class:MPEG1or2VideoStreamParser
parseGOPHeader	MPEG1or2VideoStreamFramer.cpp	/^unsigned MPEG1or2VideoStreamParser::parseGOPHeader(Boolean haveSeenStartCode) {$/;"	f	class:MPEG1or2VideoStreamParser
parsePictureHeader	MPEG1or2VideoStreamFramer.cpp	/^unsigned MPEG1or2VideoStreamParser::parsePictureHeader() {$/;"	f	class:MPEG1or2VideoStreamParser
parseSlice	MPEG1or2VideoStreamFramer.cpp	/^unsigned MPEG1or2VideoStreamParser::parseSlice() {$/;"	f	class:MPEG1or2VideoStreamParser
parseVideoSequenceHeader	MPEG1or2VideoStreamFramer.cpp	/^::parseVideoSequenceHeader(Boolean haveSeenStartCode) {$/;"	f	class:MPEG1or2VideoStreamParser
reset	MPEG1or2VideoStreamFramer.cpp	/^void MPEG1or2VideoStreamParser::reset() {$/;"	f	class:MPEG1or2VideoStreamParser
saveCurrentVSH	MPEG1or2VideoStreamFramer.cpp	/^void MPEG1or2VideoStreamParser::saveCurrentVSH() {$/;"	f	class:MPEG1or2VideoStreamParser
setParseState	MPEG1or2VideoStreamFramer.cpp	/^void MPEG1or2VideoStreamParser::setParseState(MPEGParseState parseState) {$/;"	f	class:MPEG1or2VideoStreamParser
useSavedVSH	MPEG1or2VideoStreamFramer.cpp	/^unsigned MPEG1or2VideoStreamParser::useSavedVSH() {$/;"	f	class:MPEG1or2VideoStreamParser
usingSource	MPEG1or2VideoStreamFramer.cpp	/^  MPEG1or2VideoStreamFramer* usingSource() {$/;"	f	class:MPEG1or2VideoStreamParser	file:
~MPEG1or2VideoStreamFramer	MPEG1or2VideoStreamFramer.cpp	/^MPEG1or2VideoStreamFramer::~MPEG1or2VideoStreamFramer() {$/;"	f	class:MPEG1or2VideoStreamFramer
~MPEG1or2VideoStreamParser	MPEG1or2VideoStreamFramer.cpp	/^MPEG1or2VideoStreamParser::~MPEG1or2VideoStreamParser() {$/;"	f	class:MPEG1or2VideoStreamParser
GROUP_START_CODE	MPEG2IndexFromTransportStream.cpp	293;"	d	file:
GROUP_VOP_START_CODE	MPEG2IndexFromTransportStream.cpp	294;"	d	file:
IndexRecord	MPEG2IndexFromTransportStream.cpp	/^IndexRecord::IndexRecord(u_int8_t startOffset, u_int8_t size,$/;"	f	class:IndexRecord
IndexRecord	MPEG2IndexFromTransportStream.cpp	/^class IndexRecord {$/;"	c	file:
MAX_FRAME_SIZE	MPEG2IndexFromTransportStream.cpp	116;"	d	file:
MPEG2IFrameIndexFromTransportStream	MPEG2IndexFromTransportStream.cpp	/^::MPEG2IFrameIndexFromTransportStream(UsageEnvironment& env,$/;"	f	class:MPEG2IFrameIndexFromTransportStream
PARSE_BUFFER_SIZE	MPEG2IndexFromTransportStream.cpp	120;"	d	file:
PAT_PID	MPEG2IndexFromTransportStream.cpp	123;"	d	file:
PICTURE_START_CODE	MPEG2IndexFromTransportStream.cpp	295;"	d	file:
RECORD_GOP	MPEG2IndexFromTransportStream.cpp	/^  RECORD_GOP = 2,$/;"	e	enum:RecordType	file:
RECORD_JUNK	MPEG2IndexFromTransportStream.cpp	/^  RECORD_JUNK$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_IFRAME = 9, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_NON_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_NON_IFRAME = 8, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_OTHER	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_OTHER = 10, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_PPS	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_PPS = 6, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_SEI	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_SEI = 7, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H264_SPS	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H264_SPS = 5, \/\/ H.264$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_IFRAME = 15, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_NON_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_NON_IFRAME = 14, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_OTHER	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_OTHER = 16, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_PPS	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_PPS = 13, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_SPS	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_SPS = 12, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_NAL_H265_VPS	MPEG2IndexFromTransportStream.cpp	/^  RECORD_NAL_H265_VPS = 11, \/\/ H.265$/;"	e	enum:RecordType	file:
RECORD_PIC_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_PIC_IFRAME = 4, \/\/ includes slices$/;"	e	enum:RecordType	file:
RECORD_PIC_NON_IFRAME	MPEG2IndexFromTransportStream.cpp	/^  RECORD_PIC_NON_IFRAME = 3, \/\/ includes slices$/;"	e	enum:RecordType	file:
RECORD_UNPARSED	MPEG2IndexFromTransportStream.cpp	/^  RECORD_UNPARSED = 0,$/;"	e	enum:RecordType	file:
RECORD_VSH	MPEG2IndexFromTransportStream.cpp	/^  RECORD_VSH = 1, \/\/ a MPEG Video Sequence Header$/;"	e	enum:RecordType	file:
RecordType	MPEG2IndexFromTransportStream.cpp	/^enum RecordType {$/;"	g	file:
TRANSPORT_SYNC_BYTE	MPEG2IndexFromTransportStream.cpp	184;"	d	file:
VIDEO_SEQUENCE_START_CODE	MPEG2IndexFromTransportStream.cpp	291;"	d	file:
VISUAL_OBJECT_SEQUENCE_START_CODE	MPEG2IndexFromTransportStream.cpp	292;"	d	file:
VOP_START_CODE	MPEG2IndexFromTransportStream.cpp	296;"	d	file:
addAfter	MPEG2IndexFromTransportStream.cpp	/^void IndexRecord::addAfter(IndexRecord* prev) {$/;"	f	class:IndexRecord
addToTail	MPEG2IndexFromTransportStream.cpp	/^void MPEG2IFrameIndexFromTransportStream::addToTail(IndexRecord* newIndexRecord) {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
afterGettingFrame	MPEG2IndexFromTransportStream.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG2IFrameIndexFromTransportStream
afterGettingFrame1	MPEG2IndexFromTransportStream.cpp	/^::afterGettingFrame1(unsigned frameSize,$/;"	f	class:MPEG2IFrameIndexFromTransportStream
analyzePAT	MPEG2IndexFromTransportStream.cpp	/^::analyzePAT(unsigned char* pkt, unsigned size) {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
analyzePMT	MPEG2IndexFromTransportStream.cpp	/^::analyzePMT(unsigned char* pkt, unsigned size) {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
compactParseBuffer	MPEG2IndexFromTransportStream.cpp	/^void MPEG2IFrameIndexFromTransportStream::compactParseBuffer() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
createNew	MPEG2IndexFromTransportStream.cpp	/^MPEG2IFrameIndexFromTransportStream::createNew(UsageEnvironment& env,$/;"	f	class:MPEG2IFrameIndexFromTransportStream
deliverIndexRecord	MPEG2IndexFromTransportStream.cpp	/^Boolean MPEG2IFrameIndexFromTransportStream::deliverIndexRecord() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
doGetNextFrame	MPEG2IndexFromTransportStream.cpp	/^void MPEG2IFrameIndexFromTransportStream::doGetNextFrame() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
fNext	MPEG2IndexFromTransportStream.cpp	/^  IndexRecord* fNext;$/;"	m	class:IndexRecord	file:
fPCR	MPEG2IndexFromTransportStream.cpp	/^  float fPCR;$/;"	m	class:IndexRecord	file:
fPrev	MPEG2IndexFromTransportStream.cpp	/^  IndexRecord* fPrev;$/;"	m	class:IndexRecord	file:
fRecordType	MPEG2IndexFromTransportStream.cpp	/^  RecordType fRecordType;$/;"	m	class:IndexRecord	file:
fSize	MPEG2IndexFromTransportStream.cpp	/^  u_int8_t fSize; \/\/ in bytes, following "fStartOffset".$/;"	m	class:IndexRecord	file:
fStartOffset	MPEG2IndexFromTransportStream.cpp	/^  u_int8_t fStartOffset; \/\/ within the Transport Stream packet$/;"	m	class:IndexRecord	file:
fTransportPacketNumber	MPEG2IndexFromTransportStream.cpp	/^  unsigned long fTransportPacketNumber;$/;"	m	class:IndexRecord	file:
handleInputClosure	MPEG2IndexFromTransportStream.cpp	/^void MPEG2IFrameIndexFromTransportStream::handleInputClosure(void* clientData) {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
handleInputClosure1	MPEG2IndexFromTransportStream.cpp	/^void MPEG2IFrameIndexFromTransportStream::handleInputClosure1() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
next	MPEG2IndexFromTransportStream.cpp	/^  IndexRecord* next() const { return fNext; }$/;"	f	class:IndexRecord
operator <<	MPEG2IndexFromTransportStream.cpp	/^UsageEnvironment& operator<<(UsageEnvironment& env, IndexRecord& r) {$/;"	f
parseFrame	MPEG2IndexFromTransportStream.cpp	/^Boolean MPEG2IFrameIndexFromTransportStream::parseFrame() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
parseToNextCode	MPEG2IndexFromTransportStream.cpp	/^::parseToNextCode(unsigned char& nextCode) {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
pcr	MPEG2IndexFromTransportStream.cpp	/^  float pcr() const { return fPCR; }$/;"	f	class:IndexRecord
recordType	MPEG2IndexFromTransportStream.cpp	/^  RecordType& recordType() { return fRecordType; }$/;"	f	class:IndexRecord
recordTypeStr	MPEG2IndexFromTransportStream.cpp	/^static char const* recordTypeStr[] = {$/;"	v	file:
setFirstFlag	MPEG2IndexFromTransportStream.cpp	/^  void setFirstFlag() { fRecordType = (RecordType)(((u_int8_t)fRecordType) | 0x80); }$/;"	f	class:IndexRecord
size	MPEG2IndexFromTransportStream.cpp	/^  u_int8_t& size() { return fSize; }$/;"	f	class:IndexRecord
startOffset	MPEG2IndexFromTransportStream.cpp	/^  u_int8_t startOffset() const { return fStartOffset; }$/;"	f	class:IndexRecord
transportPacketNumber	MPEG2IndexFromTransportStream.cpp	/^  unsigned long transportPacketNumber() const { return fTransportPacketNumber; }$/;"	f	class:IndexRecord
unlink	MPEG2IndexFromTransportStream.cpp	/^void IndexRecord::unlink() {$/;"	f	class:IndexRecord
~IndexRecord	MPEG2IndexFromTransportStream.cpp	/^IndexRecord::~IndexRecord() {$/;"	f	class:IndexRecord
~MPEG2IFrameIndexFromTransportStream	MPEG2IndexFromTransportStream.cpp	/^MPEG2IFrameIndexFromTransportStream::~MPEG2IFrameIndexFromTransportStream() {$/;"	f	class:MPEG2IFrameIndexFromTransportStream
ClientTrickPlayState	MPEG2TransportFileServerMediaSubsession.cpp	/^ClientTrickPlayState::ClientTrickPlayState(MPEG2TransportStreamIndexFile* indexFile)$/;"	f	class:ClientTrickPlayState
MPEG2TransportFileServerMediaSubsession	MPEG2TransportFileServerMediaSubsession.cpp	/^::MPEG2TransportFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:MPEG2TransportFileServerMediaSubsession
TRANSPORT_PACKETS_PER_NETWORK_PACKET	MPEG2TransportFileServerMediaSubsession.cpp	72;"	d	file:
TRANSPORT_PACKET_SIZE	MPEG2TransportFileServerMediaSubsession.cpp	71;"	d	file:
createNew	MPEG2TransportFileServerMediaSubsession.cpp	/^MPEG2TransportFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:MPEG2TransportFileServerMediaSubsession
createNewRTPSink	MPEG2TransportFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:MPEG2TransportFileServerMediaSubsession
createNewStreamSource	MPEG2TransportFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
deleteStream	MPEG2TransportFileServerMediaSubsession.cpp	/^::deleteStream(unsigned clientSessionId, void*& streamToken) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
duration	MPEG2TransportFileServerMediaSubsession.cpp	/^float MPEG2TransportFileServerMediaSubsession::duration() const {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
lookupClient	MPEG2TransportFileServerMediaSubsession.cpp	/^::lookupClient(unsigned clientSessionId) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
newClientTrickPlayState	MPEG2TransportFileServerMediaSubsession.cpp	/^ClientTrickPlayState* MPEG2TransportFileServerMediaSubsession::newClientTrickPlayState() {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
pauseStream	MPEG2TransportFileServerMediaSubsession.cpp	/^::pauseStream(unsigned clientSessionId, void* streamToken) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
reseekOriginalTransportStreamSource	MPEG2TransportFileServerMediaSubsession.cpp	/^void ClientTrickPlayState::reseekOriginalTransportStreamSource() {$/;"	f	class:ClientTrickPlayState
seekStream	MPEG2TransportFileServerMediaSubsession.cpp	/^::seekStream(unsigned clientSessionId, void* streamToken, double& seekNPT, double streamDuration, u_int64_t& numBytes) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
setSource	MPEG2TransportFileServerMediaSubsession.cpp	/^void ClientTrickPlayState::setSource(MPEG2TransportStreamFramer* framer) {$/;"	f	class:ClientTrickPlayState
setStreamScale	MPEG2TransportFileServerMediaSubsession.cpp	/^::setStreamScale(unsigned clientSessionId, void* streamToken, float scale) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
startStream	MPEG2TransportFileServerMediaSubsession.cpp	/^::startStream(unsigned clientSessionId, void* streamToken, TaskFunc* rtcpRRHandler,$/;"	f	class:MPEG2TransportFileServerMediaSubsession
testScaleFactor	MPEG2TransportFileServerMediaSubsession.cpp	/^void MPEG2TransportFileServerMediaSubsession::testScaleFactor(float& scale) {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
updateStateFromNPT	MPEG2TransportFileServerMediaSubsession.cpp	/^unsigned long ClientTrickPlayState::updateStateFromNPT(double npt, double streamDuration) {$/;"	f	class:ClientTrickPlayState
updateStateOnPlayChange	MPEG2TransportFileServerMediaSubsession.cpp	/^void ClientTrickPlayState::updateStateOnPlayChange(Boolean reverseToPreviousVSH) {$/;"	f	class:ClientTrickPlayState
updateStateOnScaleChange	MPEG2TransportFileServerMediaSubsession.cpp	/^void ClientTrickPlayState::updateStateOnScaleChange() {$/;"	f	class:ClientTrickPlayState
updateTSRecordNum	MPEG2TransportFileServerMediaSubsession.cpp	/^void ClientTrickPlayState::updateTSRecordNum(){$/;"	f	class:ClientTrickPlayState
~MPEG2TransportFileServerMediaSubsession	MPEG2TransportFileServerMediaSubsession.cpp	/^::~MPEG2TransportFileServerMediaSubsession() {$/;"	f	class:MPEG2TransportFileServerMediaSubsession
MAX_PLAYOUT_BUFFER_DURATION	MPEG2TransportStreamFramer.cpp	44;"	d	file:
MPEG2TransportStreamFramer	MPEG2TransportStreamFramer.cpp	/^::MPEG2TransportStreamFramer(UsageEnvironment& env, FramedSource* inputSource)$/;"	f	class:MPEG2TransportStreamFramer
NEW_DURATION_WEIGHT	MPEG2TransportStreamFramer.cpp	31;"	d	file:
PCR_PERIOD_VARIATION_RATIO	MPEG2TransportStreamFramer.cpp	48;"	d	file:
PIDStatus	MPEG2TransportStreamFramer.cpp	/^  PIDStatus(double _firstClock, double _firstRealTime)$/;"	f	class:PIDStatus
PIDStatus	MPEG2TransportStreamFramer.cpp	/^class PIDStatus {$/;"	c	file:
TIME_ADJUSTMENT_FACTOR	MPEG2TransportStreamFramer.cpp	36;"	d	file:
TRANSPORT_PACKET_SIZE	MPEG2TransportStreamFramer.cpp	26;"	d	file:
TRANSPORT_SYNC_BYTE	MPEG2TransportStreamFramer.cpp	139;"	d	file:
afterGettingFrame	MPEG2TransportStreamFramer.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG2TransportStreamFramer
afterGettingFrame1	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::afterGettingFrame1(unsigned frameSize,$/;"	f	class:MPEG2TransportStreamFramer
clearPIDStatusTable	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::clearPIDStatusTable() {$/;"	f	class:MPEG2TransportStreamFramer
createNew	MPEG2TransportStreamFramer.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:MPEG2TransportStreamFramer
doGetNextFrame	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::doGetNextFrame() {$/;"	f	class:MPEG2TransportStreamFramer
doStopGettingFrames	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::doStopGettingFrames() {$/;"	f	class:MPEG2TransportStreamFramer
firstClock	MPEG2TransportStreamFramer.cpp	/^  double firstClock, lastClock, firstRealTime, lastRealTime;$/;"	m	class:PIDStatus	file:
firstRealTime	MPEG2TransportStreamFramer.cpp	/^  double firstClock, lastClock, firstRealTime, lastRealTime;$/;"	m	class:PIDStatus	file:
lastClock	MPEG2TransportStreamFramer.cpp	/^  double firstClock, lastClock, firstRealTime, lastRealTime;$/;"	m	class:PIDStatus	file:
lastPacketNum	MPEG2TransportStreamFramer.cpp	/^  u_int64_t lastPacketNum;$/;"	m	class:PIDStatus	file:
lastRealTime	MPEG2TransportStreamFramer.cpp	/^  double firstClock, lastClock, firstRealTime, lastRealTime;$/;"	m	class:PIDStatus	file:
setNumTSPacketsToStream	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::setNumTSPacketsToStream(unsigned long numTSRecordsToStream) {$/;"	f	class:MPEG2TransportStreamFramer
setPCRLimit	MPEG2TransportStreamFramer.cpp	/^void MPEG2TransportStreamFramer::setPCRLimit(float pcrLimit) {$/;"	f	class:MPEG2TransportStreamFramer
updateTSPacketDurationEstimate	MPEG2TransportStreamFramer.cpp	/^Boolean MPEG2TransportStreamFramer::updateTSPacketDurationEstimate(unsigned char* pkt, double timeNow) {$/;"	f	class:MPEG2TransportStreamFramer
~MPEG2TransportStreamFramer	MPEG2TransportStreamFramer.cpp	/^MPEG2TransportStreamFramer::~MPEG2TransportStreamFramer() {$/;"	f	class:MPEG2TransportStreamFramer
INPUT_BUFFER_SIZE	MPEG2TransportStreamFromESSource.cpp	27;"	d	file:
InputESSourceRecord	MPEG2TransportStreamFromESSource.cpp	/^::InputESSourceRecord(MPEG2TransportStreamFromESSource& parent,$/;"	f	class:InputESSourceRecord
InputESSourceRecord	MPEG2TransportStreamFromESSource.cpp	/^class InputESSourceRecord {$/;"	c	file:
LOW_WATER_MARK	MPEG2TransportStreamFromESSource.cpp	26;"	d	file:
MAX_INPUT_ES_FRAME_SIZE	MPEG2TransportStreamFromESSource.cpp	24;"	d	file:
MPEG2TransportStreamFromESSource	MPEG2TransportStreamFromESSource.cpp	/^::MPEG2TransportStreamFromESSource(UsageEnvironment& env)$/;"	f	class:MPEG2TransportStreamFromESSource
SIMPLE_PES_HEADER_SIZE	MPEG2TransportStreamFromESSource.cpp	25;"	d	file:
addNewAudioSource	MPEG2TransportStreamFromESSource.cpp	/^::addNewAudioSource(FramedSource* inputSource, int mpegVersion, int16_t PID) {$/;"	f	class:MPEG2TransportStreamFromESSource
addNewInputSource	MPEG2TransportStreamFromESSource.cpp	/^::addNewInputSource(FramedSource* inputSource,$/;"	f	class:MPEG2TransportStreamFromESSource
addNewVideoSource	MPEG2TransportStreamFromESSource.cpp	/^::addNewVideoSource(FramedSource* inputSource, int mpegVersion, int16_t PID) {$/;"	f	class:MPEG2TransportStreamFromESSource
afterGettingFrame	MPEG2TransportStreamFromESSource.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:InputESSourceRecord
afterGettingFrame1	MPEG2TransportStreamFromESSource.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:InputESSourceRecord
askForNewData	MPEG2TransportStreamFromESSource.cpp	/^void InputESSourceRecord::askForNewData() {$/;"	f	class:InputESSourceRecord
awaitNewBuffer	MPEG2TransportStreamFromESSource.cpp	/^::awaitNewBuffer(unsigned char* oldBuffer) {$/;"	f	class:MPEG2TransportStreamFromESSource
buffer	MPEG2TransportStreamFromESSource.cpp	/^  unsigned char* buffer() const { return fInputBuffer; }$/;"	f	class:InputESSourceRecord
createNew	MPEG2TransportStreamFromESSource.cpp	/^::createNew(UsageEnvironment& env) {$/;"	f	class:MPEG2TransportStreamFromESSource
deliverBufferToClient	MPEG2TransportStreamFromESSource.cpp	/^Boolean InputESSourceRecord::deliverBufferToClient() {$/;"	f	class:InputESSourceRecord
doStopGettingFrames	MPEG2TransportStreamFromESSource.cpp	/^void MPEG2TransportStreamFromESSource::doStopGettingFrames() {$/;"	f	class:MPEG2TransportStreamFromESSource
fInputBuffer	MPEG2TransportStreamFromESSource.cpp	/^  unsigned char* fInputBuffer;$/;"	m	class:InputESSourceRecord	file:
fInputBufferBytesAvailable	MPEG2TransportStreamFromESSource.cpp	/^  unsigned fInputBufferBytesAvailable;$/;"	m	class:InputESSourceRecord	file:
fInputBufferInUse	MPEG2TransportStreamFromESSource.cpp	/^  Boolean fInputBufferInUse;$/;"	m	class:InputESSourceRecord	file:
fInputSource	MPEG2TransportStreamFromESSource.cpp	/^  FramedSource* fInputSource;$/;"	m	class:InputESSourceRecord	file:
fMPEGVersion	MPEG2TransportStreamFromESSource.cpp	/^  int fMPEGVersion;$/;"	m	class:InputESSourceRecord	file:
fNext	MPEG2TransportStreamFromESSource.cpp	/^  InputESSourceRecord* fNext;$/;"	m	class:InputESSourceRecord	file:
fPID	MPEG2TransportStreamFromESSource.cpp	/^  int16_t fPID;$/;"	m	class:InputESSourceRecord	file:
fParent	MPEG2TransportStreamFromESSource.cpp	/^  MPEG2TransportStreamFromESSource& fParent;$/;"	m	class:InputESSourceRecord	file:
fSCR	MPEG2TransportStreamFromESSource.cpp	/^  MPEG1or2Demux::SCR fSCR;$/;"	m	class:InputESSourceRecord	file:
fStreamId	MPEG2TransportStreamFromESSource.cpp	/^  u_int8_t fStreamId;$/;"	m	class:InputESSourceRecord	file:
inputSource	MPEG2TransportStreamFromESSource.cpp	/^  FramedSource* inputSource() const { return fInputSource; }$/;"	f	class:InputESSourceRecord
next	MPEG2TransportStreamFromESSource.cpp	/^  InputESSourceRecord* next() const { return fNext; }$/;"	f	class:InputESSourceRecord
reset	MPEG2TransportStreamFromESSource.cpp	/^  void reset() {$/;"	f	class:InputESSourceRecord
~InputESSourceRecord	MPEG2TransportStreamFromESSource.cpp	/^InputESSourceRecord::~InputESSourceRecord() {$/;"	f	class:InputESSourceRecord
~MPEG2TransportStreamFromESSource	MPEG2TransportStreamFromESSource.cpp	/^MPEG2TransportStreamFromESSource::~MPEG2TransportStreamFromESSource() {$/;"	f	class:MPEG2TransportStreamFromESSource
MAX_PES_PACKET_SIZE	MPEG2TransportStreamFromPESSource.cpp	23;"	d	file:
MPEG2TransportStreamFromPESSource	MPEG2TransportStreamFromPESSource.cpp	/^::MPEG2TransportStreamFromPESSource(UsageEnvironment& env,$/;"	f	class:MPEG2TransportStreamFromPESSource
afterGettingFrame	MPEG2TransportStreamFromPESSource.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG2TransportStreamFromPESSource
afterGettingFrame1	MPEG2TransportStreamFromPESSource.cpp	/^::afterGettingFrame1(unsigned frameSize,$/;"	f	class:MPEG2TransportStreamFromPESSource
awaitNewBuffer	MPEG2TransportStreamFromPESSource.cpp	/^::awaitNewBuffer(unsigned char* \/*oldBuffer*\/) {$/;"	f	class:MPEG2TransportStreamFromPESSource
createNew	MPEG2TransportStreamFromPESSource.cpp	/^::createNew(UsageEnvironment& env, MPEG1or2DemuxedElementaryStream* inputSource) {$/;"	f	class:MPEG2TransportStreamFromPESSource
doStopGettingFrames	MPEG2TransportStreamFromPESSource.cpp	/^void MPEG2TransportStreamFromPESSource::doStopGettingFrames() {$/;"	f	class:MPEG2TransportStreamFromPESSource
~MPEG2TransportStreamFromPESSource	MPEG2TransportStreamFromPESSource.cpp	/^MPEG2TransportStreamFromPESSource::~MPEG2TransportStreamFromPESSource() {$/;"	f	class:MPEG2TransportStreamFromPESSource
MPEG2TransportStreamIndexFile	MPEG2TransportStreamIndexFile.cpp	/^::MPEG2TransportStreamIndexFile(UsageEnvironment& env, char const* indexFileName)$/;"	f	class:MPEG2TransportStreamIndexFile
closeFid	MPEG2TransportStreamIndexFile.cpp	/^void MPEG2TransportStreamIndexFile::closeFid() {$/;"	f	class:MPEG2TransportStreamIndexFile
createNew	MPEG2TransportStreamIndexFile.cpp	/^::createNew(UsageEnvironment& env, char const* indexFileName) {$/;"	f	class:MPEG2TransportStreamIndexFile
getPlayingDuration	MPEG2TransportStreamIndexFile.cpp	/^float MPEG2TransportStreamIndexFile::getPlayingDuration() {$/;"	f	class:MPEG2TransportStreamIndexFile
lookupPCRFromTSPacketNum	MPEG2TransportStreamIndexFile.cpp	/^::lookupPCRFromTSPacketNum(unsigned long& tsPacketNumber, Boolean reverseToPreviousCleanPoint,$/;"	f	class:MPEG2TransportStreamIndexFile
lookupTSPacketNumFromNPT	MPEG2TransportStreamIndexFile.cpp	/^::lookupTSPacketNumFromNPT(float& npt, unsigned long& tsPacketNumber,$/;"	f	class:MPEG2TransportStreamIndexFile
mpegVersion	MPEG2TransportStreamIndexFile.cpp	/^int MPEG2TransportStreamIndexFile::mpegVersion() {$/;"	f	class:MPEG2TransportStreamIndexFile
openFid	MPEG2TransportStreamIndexFile.cpp	/^Boolean MPEG2TransportStreamIndexFile::openFid() {$/;"	f	class:MPEG2TransportStreamIndexFile
pcrFromBuf	MPEG2TransportStreamIndexFile.cpp	/^float MPEG2TransportStreamIndexFile::pcrFromBuf() {$/;"	f	class:MPEG2TransportStreamIndexFile
readIndexRecord	MPEG2TransportStreamIndexFile.cpp	/^Boolean MPEG2TransportStreamIndexFile::readIndexRecord(unsigned long indexRecordNum) {$/;"	f	class:MPEG2TransportStreamIndexFile
readIndexRecordValues	MPEG2TransportStreamIndexFile.cpp	/^::readIndexRecordValues(unsigned long indexRecordNum,$/;"	f	class:MPEG2TransportStreamIndexFile
readOneIndexRecord	MPEG2TransportStreamIndexFile.cpp	/^Boolean MPEG2TransportStreamIndexFile::readOneIndexRecord(unsigned long indexRecordNum) {$/;"	f	class:MPEG2TransportStreamIndexFile
rewindToCleanPoint	MPEG2TransportStreamIndexFile.cpp	/^Boolean MPEG2TransportStreamIndexFile::rewindToCleanPoint(unsigned long&ixFound) {$/;"	f	class:MPEG2TransportStreamIndexFile
seekToIndexRecord	MPEG2TransportStreamIndexFile.cpp	/^Boolean MPEG2TransportStreamIndexFile::seekToIndexRecord(unsigned long indexRecordNumber) {$/;"	f	class:MPEG2TransportStreamIndexFile
setMPEGVersionFromRecordType	MPEG2TransportStreamIndexFile.cpp	/^void MPEG2TransportStreamIndexFile::setMPEGVersionFromRecordType(u_int8_t recordType) {$/;"	f	class:MPEG2TransportStreamIndexFile
tsPacketNumFromBuf	MPEG2TransportStreamIndexFile.cpp	/^unsigned long MPEG2TransportStreamIndexFile::tsPacketNumFromBuf() {$/;"	f	class:MPEG2TransportStreamIndexFile
~MPEG2TransportStreamIndexFile	MPEG2TransportStreamIndexFile.cpp	/^MPEG2TransportStreamIndexFile::~MPEG2TransportStreamIndexFile() {$/;"	f	class:MPEG2TransportStreamIndexFile
CRC32	MPEG2TransportStreamMultiplexor.cpp	/^static u_int32_t const CRC32[256] = {$/;"	v	file:
MPEG2TransportStreamMultiplexor	MPEG2TransportStreamMultiplexor.cpp	/^::MPEG2TransportStreamMultiplexor(UsageEnvironment& env)$/;"	f	class:MPEG2TransportStreamMultiplexor
OUR_PROGRAM_MAP_PID	MPEG2TransportStreamMultiplexor.cpp	244;"	d	file:
OUR_PROGRAM_NUMBER	MPEG2TransportStreamMultiplexor.cpp	242;"	d	file:
PAT_PERIOD	MPEG2TransportStreamMultiplexor.cpp	26;"	d	file:
PAT_PID	MPEG2TransportStreamMultiplexor.cpp	240;"	d	file:
PID_TABLE_SIZE	MPEG2TransportStreamMultiplexor.cpp	29;"	d	file:
PMT_PERIOD	MPEG2TransportStreamMultiplexor.cpp	27;"	d	file:
TRANSPORT_PACKET_SIZE	MPEG2TransportStreamMultiplexor.cpp	24;"	d	file:
calculateCRC	MPEG2TransportStreamMultiplexor.cpp	/^u_int32_t calculateCRC(u_int8_t const* data, unsigned dataLength, u_int32_t initialValue) {$/;"	f
deliverDataToClient	MPEG2TransportStreamMultiplexor.cpp	/^::deliverDataToClient(u_int8_t pid, unsigned char* buffer, unsigned bufferSize,$/;"	f	class:MPEG2TransportStreamMultiplexor
deliverPATPacket	MPEG2TransportStreamMultiplexor.cpp	/^void MPEG2TransportStreamMultiplexor::deliverPATPacket() {$/;"	f	class:MPEG2TransportStreamMultiplexor
deliverPMTPacket	MPEG2TransportStreamMultiplexor.cpp	/^void MPEG2TransportStreamMultiplexor::deliverPMTPacket(Boolean hasChanged) {$/;"	f	class:MPEG2TransportStreamMultiplexor
doGetNextFrame	MPEG2TransportStreamMultiplexor.cpp	/^void MPEG2TransportStreamMultiplexor::doGetNextFrame() {$/;"	f	class:MPEG2TransportStreamMultiplexor
handleNewBuffer	MPEG2TransportStreamMultiplexor.cpp	/^::handleNewBuffer(unsigned char* buffer, unsigned bufferSize,$/;"	f	class:MPEG2TransportStreamMultiplexor
setProgramStreamMap	MPEG2TransportStreamMultiplexor.cpp	/^void MPEG2TransportStreamMultiplexor::setProgramStreamMap(unsigned frameSize) {$/;"	f	class:MPEG2TransportStreamMultiplexor
~MPEG2TransportStreamMultiplexor	MPEG2TransportStreamMultiplexor.cpp	/^MPEG2TransportStreamMultiplexor::~MPEG2TransportStreamMultiplexor() {$/;"	f	class:MPEG2TransportStreamMultiplexor
KEEP_ORIGINAL_FRAME_RATE	MPEG2TransportStreamTrickModeFilter.cpp	33;"	d	file:
MPEG2TransportStreamTrickModeFilter	MPEG2TransportStreamTrickModeFilter.cpp	/^::MPEG2TransportStreamTrickModeFilter(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:MPEG2TransportStreamTrickModeFilter
afterGettingFrame	MPEG2TransportStreamTrickModeFilter.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG2TransportStreamTrickModeFilter
afterGettingFrame1	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::afterGettingFrame1(unsigned frameSize) {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
attemptDeliveryToClient	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::attemptDeliveryToClient() {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
createNew	MPEG2TransportStreamTrickModeFilter.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:MPEG2TransportStreamTrickModeFilter
doGetNextFrame	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::doGetNextFrame() {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
doStopGettingFrames	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::doStopGettingFrames() {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
isIFrameStart	MPEG2TransportStreamTrickModeFilter.cpp	65;"	d	file:
isNonIFrameStart	MPEG2TransportStreamTrickModeFilter.cpp	68;"	d	file:
onSourceClosure	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::onSourceClosure(void* clientData) {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
onSourceClosure1	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::onSourceClosure1() {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
readTransportPacket	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::readTransportPacket(unsigned long tsPacketNum) {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
seekTo	MPEG2TransportStreamTrickModeFilter.cpp	/^Boolean MPEG2TransportStreamTrickModeFilter::seekTo(unsigned long tsPacketNumber,$/;"	f	class:MPEG2TransportStreamTrickModeFilter
seekToTransportPacket	MPEG2TransportStreamTrickModeFilter.cpp	/^void MPEG2TransportStreamTrickModeFilter::seekToTransportPacket(unsigned long tsPacketNum) {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
~MPEG2TransportStreamTrickModeFilter	MPEG2TransportStreamTrickModeFilter.cpp	/^MPEG2TransportStreamTrickModeFilter::~MPEG2TransportStreamTrickModeFilter() {$/;"	f	class:MPEG2TransportStreamTrickModeFilter
MPEG2TransportUDPServerMediaSubsession	MPEG2TransportUDPServerMediaSubsession.cpp	/^::MPEG2TransportUDPServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:MPEG2TransportUDPServerMediaSubsession
createNew	MPEG2TransportUDPServerMediaSubsession.cpp	/^MPEG2TransportUDPServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:MPEG2TransportUDPServerMediaSubsession
createNewRTPSink	MPEG2TransportUDPServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock, unsigned char \/*rtpPayloadTypeIfDynamic*\/, FramedSource* \/*inputSource*\/) {$/;"	f	class:MPEG2TransportUDPServerMediaSubsession
createNewStreamSource	MPEG2TransportUDPServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned\/* clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:MPEG2TransportUDPServerMediaSubsession
~MPEG2TransportUDPServerMediaSubsession	MPEG2TransportUDPServerMediaSubsession.cpp	/^~MPEG2TransportUDPServerMediaSubsession() {$/;"	f	class:MPEG2TransportUDPServerMediaSubsession
MPEG4ESVideoRTPSink	MPEG4ESVideoRTPSink.cpp	/^::MPEG4ESVideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat, u_int32_t rtpTimestampFrequency,$/;"	f	class:MPEG4ESVideoRTPSink
VOP_START_CODE	MPEG4ESVideoRTPSink.cpp	57;"	d	file:
allowFragmentationAfterStart	MPEG4ESVideoRTPSink.cpp	/^Boolean MPEG4ESVideoRTPSink::allowFragmentationAfterStart() const {$/;"	f	class:MPEG4ESVideoRTPSink
auxSDPLine	MPEG4ESVideoRTPSink.cpp	/^char const* MPEG4ESVideoRTPSink::auxSDPLine() {$/;"	f	class:MPEG4ESVideoRTPSink
createNew	MPEG4ESVideoRTPSink.cpp	/^MPEG4ESVideoRTPSink::createNew(UsageEnvironment& env,$/;"	f	class:MPEG4ESVideoRTPSink
doSpecialFrameHandling	MPEG4ESVideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MPEG4ESVideoRTPSink
frameCanAppearAfterPacketStart	MPEG4ESVideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:MPEG4ESVideoRTPSink
sourceIsCompatibleWithUs	MPEG4ESVideoRTPSink.cpp	/^Boolean MPEG4ESVideoRTPSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:MPEG4ESVideoRTPSink
~MPEG4ESVideoRTPSink	MPEG4ESVideoRTPSink.cpp	/^MPEG4ESVideoRTPSink::~MPEG4ESVideoRTPSink() {$/;"	f	class:MPEG4ESVideoRTPSink
MIMEtype	MPEG4ESVideoRTPSource.cpp	/^char const* MPEG4ESVideoRTPSource::MIMEtype() const {$/;"	f	class:MPEG4ESVideoRTPSource
MPEG4ESVideoRTPSource	MPEG4ESVideoRTPSource.cpp	/^::MPEG4ESVideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4ESVideoRTPSource
createNew	MPEG4ESVideoRTPSource.cpp	/^MPEG4ESVideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4ESVideoRTPSource
processSpecialHeader	MPEG4ESVideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:MPEG4ESVideoRTPSource
~MPEG4ESVideoRTPSource	MPEG4ESVideoRTPSource.cpp	/^MPEG4ESVideoRTPSource::~MPEG4ESVideoRTPSource() {$/;"	f	class:MPEG4ESVideoRTPSource
MPEG4GenericRTPSink	MPEG4GenericRTPSink.cpp	/^::MPEG4GenericRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4GenericRTPSink
auxSDPLine	MPEG4GenericRTPSink.cpp	/^char const* MPEG4GenericRTPSink::auxSDPLine() {$/;"	f	class:MPEG4GenericRTPSink
createNew	MPEG4GenericRTPSink.cpp	/^MPEG4GenericRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4GenericRTPSink
doSpecialFrameHandling	MPEG4GenericRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MPEG4GenericRTPSink
frameCanAppearAfterPacketStart	MPEG4GenericRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:MPEG4GenericRTPSink
sdpMediaType	MPEG4GenericRTPSink.cpp	/^char const* MPEG4GenericRTPSink::sdpMediaType() const {$/;"	f	class:MPEG4GenericRTPSink
specialHeaderSize	MPEG4GenericRTPSink.cpp	/^unsigned MPEG4GenericRTPSink::specialHeaderSize() const {$/;"	f	class:MPEG4GenericRTPSink
~MPEG4GenericRTPSink	MPEG4GenericRTPSink.cpp	/^MPEG4GenericRTPSink::~MPEG4GenericRTPSink() {$/;"	f	class:MPEG4GenericRTPSink
AUHeader	MPEG4GenericRTPSource.cpp	/^struct AUHeader {$/;"	s	file:
MIMEtype	MPEG4GenericRTPSource.cpp	/^char const* MPEG4GenericRTPSource::MIMEtype() const {$/;"	f	class:MPEG4GenericRTPSource
MPEG4GenericBufferedPacket	MPEG4GenericRTPSource.cpp	/^::MPEG4GenericBufferedPacket(MPEG4GenericRTPSource* ourSource)$/;"	f	class:MPEG4GenericBufferedPacket
MPEG4GenericBufferedPacket	MPEG4GenericRTPSource.cpp	/^class MPEG4GenericBufferedPacket: public BufferedPacket {$/;"	c	file:
MPEG4GenericBufferedPacketFactory	MPEG4GenericRTPSource.cpp	/^class MPEG4GenericBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
MPEG4GenericRTPSource	MPEG4GenericRTPSource.cpp	/^::MPEG4GenericRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4GenericRTPSource
createNew	MPEG4GenericRTPSource.cpp	/^MPEG4GenericRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4GenericRTPSource
createNewPacket	MPEG4GenericRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:MPEG4GenericBufferedPacketFactory
fOurSource	MPEG4GenericRTPSource.cpp	/^  MPEG4GenericRTPSource* fOurSource;$/;"	m	class:MPEG4GenericBufferedPacket	file:
index	MPEG4GenericRTPSource.cpp	/^  unsigned index; \/\/ indexDelta for the 2nd & subsequent headers$/;"	m	struct:AUHeader	file:
nextEnclosedFrameSize	MPEG4GenericRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& \/*framePtr*\/, unsigned dataSize) {$/;"	f	class:MPEG4GenericBufferedPacket
processSpecialHeader	MPEG4GenericRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:MPEG4GenericRTPSource
samplingFrequencyFromAudioSpecificConfig	MPEG4GenericRTPSource.cpp	/^unsigned samplingFrequencyFromAudioSpecificConfig(char const* configStr) {$/;"	f
samplingFrequencyFromIndex	MPEG4GenericRTPSource.cpp	/^static unsigned const samplingFrequencyFromIndex[16] = {$/;"	v	file:
size	MPEG4GenericRTPSource.cpp	/^  unsigned size;$/;"	m	struct:AUHeader	file:
~MPEG4GenericBufferedPacket	MPEG4GenericRTPSource.cpp	/^MPEG4GenericBufferedPacket::~MPEG4GenericBufferedPacket() {$/;"	f	class:MPEG4GenericBufferedPacket
~MPEG4GenericRTPSource	MPEG4GenericRTPSource.cpp	/^MPEG4GenericRTPSource::~MPEG4GenericRTPSource() {$/;"	f	class:MPEG4GenericRTPSource
MPEG4LATMAudioRTPSink	MPEG4LATMAudioRTPSink.cpp	/^::MPEG4LATMAudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4LATMAudioRTPSink
auxSDPLine	MPEG4LATMAudioRTPSink.cpp	/^char const* MPEG4LATMAudioRTPSink::auxSDPLine() {$/;"	f	class:MPEG4LATMAudioRTPSink
createNew	MPEG4LATMAudioRTPSink.cpp	/^MPEG4LATMAudioRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4LATMAudioRTPSink
doSpecialFrameHandling	MPEG4LATMAudioRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:MPEG4LATMAudioRTPSink
frameCanAppearAfterPacketStart	MPEG4LATMAudioRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:MPEG4LATMAudioRTPSink
~MPEG4LATMAudioRTPSink	MPEG4LATMAudioRTPSink.cpp	/^MPEG4LATMAudioRTPSink::~MPEG4LATMAudioRTPSink() {$/;"	f	class:MPEG4LATMAudioRTPSink
LATMBufferedPacket	MPEG4LATMAudioRTPSource.cpp	/^LATMBufferedPacket::LATMBufferedPacket(Boolean includeLATMDataLengthField)$/;"	f	class:LATMBufferedPacket
LATMBufferedPacket	MPEG4LATMAudioRTPSource.cpp	/^class LATMBufferedPacket: public BufferedPacket {$/;"	c	file:
LATMBufferedPacketFactory	MPEG4LATMAudioRTPSource.cpp	/^class LATMBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
MIMEtype	MPEG4LATMAudioRTPSource.cpp	/^char const* MPEG4LATMAudioRTPSource::MIMEtype() const {$/;"	f	class:MPEG4LATMAudioRTPSource
MPEG4LATMAudioRTPSource	MPEG4LATMAudioRTPSource.cpp	/^::MPEG4LATMAudioRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4LATMAudioRTPSource
createNew	MPEG4LATMAudioRTPSource.cpp	/^MPEG4LATMAudioRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MPEG4LATMAudioRTPSource
createNewPacket	MPEG4LATMAudioRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:LATMBufferedPacketFactory
fIncludeLATMDataLengthField	MPEG4LATMAudioRTPSource.cpp	/^  Boolean fIncludeLATMDataLengthField;$/;"	m	class:LATMBufferedPacket	file:
getByte	MPEG4LATMAudioRTPSource.cpp	/^static Boolean getByte(char const*& configStr, unsigned char& resultByte) {$/;"	f	file:
getNibble	MPEG4LATMAudioRTPSource.cpp	/^static Boolean getNibble(char const*& configStr,$/;"	f	file:
nextEnclosedFrameSize	MPEG4LATMAudioRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:LATMBufferedPacket
omitLATMDataLengthField	MPEG4LATMAudioRTPSource.cpp	/^void MPEG4LATMAudioRTPSource::omitLATMDataLengthField() {$/;"	f	class:MPEG4LATMAudioRTPSource
parseGeneralConfigStr	MPEG4LATMAudioRTPSource.cpp	/^unsigned char* parseGeneralConfigStr(char const* configStr,$/;"	f
parseStreamMuxConfigStr	MPEG4LATMAudioRTPSource.cpp	/^parseStreamMuxConfigStr(char const* configStr,$/;"	f
parseStreamMuxConfigStr	MPEG4LATMAudioRTPSource.cpp	/^unsigned char* parseStreamMuxConfigStr(char const* configStr,$/;"	f
processSpecialHeader	MPEG4LATMAudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:MPEG4LATMAudioRTPSource
~LATMBufferedPacket	MPEG4LATMAudioRTPSource.cpp	/^LATMBufferedPacket::~LATMBufferedPacket() {$/;"	f	class:LATMBufferedPacket
~MPEG4LATMAudioRTPSource	MPEG4LATMAudioRTPSource.cpp	/^MPEG4LATMAudioRTPSource::~MPEG4LATMAudioRTPSource() {$/;"	f	class:MPEG4LATMAudioRTPSource
MPEG4VideoFileServerMediaSubsession	MPEG4VideoFileServerMediaSubsession.cpp	/^::MPEG4VideoFileServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:MPEG4VideoFileServerMediaSubsession
afterPlayingDummy	MPEG4VideoFileServerMediaSubsession.cpp	/^static void afterPlayingDummy(void* clientData) {$/;"	f	file:
afterPlayingDummy1	MPEG4VideoFileServerMediaSubsession.cpp	/^void MPEG4VideoFileServerMediaSubsession::afterPlayingDummy1() {$/;"	f	class:MPEG4VideoFileServerMediaSubsession
checkForAuxSDPLine	MPEG4VideoFileServerMediaSubsession.cpp	/^static void checkForAuxSDPLine(void* clientData) {$/;"	f	file:
checkForAuxSDPLine1	MPEG4VideoFileServerMediaSubsession.cpp	/^void MPEG4VideoFileServerMediaSubsession::checkForAuxSDPLine1() {$/;"	f	class:MPEG4VideoFileServerMediaSubsession
createNew	MPEG4VideoFileServerMediaSubsession.cpp	/^MPEG4VideoFileServerMediaSubsession::createNew(UsageEnvironment& env,$/;"	f	class:MPEG4VideoFileServerMediaSubsession
createNewRTPSink	MPEG4VideoFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:MPEG4VideoFileServerMediaSubsession
createNewStreamSource	MPEG4VideoFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:MPEG4VideoFileServerMediaSubsession
getAuxSDPLine	MPEG4VideoFileServerMediaSubsession.cpp	/^char const* MPEG4VideoFileServerMediaSubsession::getAuxSDPLine(RTPSink* rtpSink, FramedSource* inputSource) {$/;"	f	class:MPEG4VideoFileServerMediaSubsession
~MPEG4VideoFileServerMediaSubsession	MPEG4VideoFileServerMediaSubsession.cpp	/^MPEG4VideoFileServerMediaSubsession::~MPEG4VideoFileServerMediaSubsession() {$/;"	f	class:MPEG4VideoFileServerMediaSubsession
MPEG4VideoStreamDiscreteFramer	MPEG4VideoStreamDiscreteFramer.cpp	/^::MPEG4VideoStreamDiscreteFramer(UsageEnvironment& env,$/;"	f	class:MPEG4VideoStreamDiscreteFramer
afterGettingFrame	MPEG4VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:MPEG4VideoStreamDiscreteFramer
afterGettingFrame1	MPEG4VideoStreamDiscreteFramer.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:MPEG4VideoStreamDiscreteFramer
analyzeVOLHeader	MPEG4VideoStreamDiscreteFramer.cpp	/^void MPEG4VideoStreamDiscreteFramer::analyzeVOLHeader() {$/;"	f	class:MPEG4VideoStreamDiscreteFramer
createNew	MPEG4VideoStreamDiscreteFramer.cpp	/^MPEG4VideoStreamDiscreteFramer::createNew(UsageEnvironment& env,$/;"	f	class:MPEG4VideoStreamDiscreteFramer
doGetNextFrame	MPEG4VideoStreamDiscreteFramer.cpp	/^void MPEG4VideoStreamDiscreteFramer::doGetNextFrame() {$/;"	f	class:MPEG4VideoStreamDiscreteFramer
getNextFrameBit	MPEG4VideoStreamDiscreteFramer.cpp	/^Boolean MPEG4VideoStreamDiscreteFramer::getNextFrameBit(u_int8_t& result) {$/;"	f	class:MPEG4VideoStreamDiscreteFramer
getNextFrameBits	MPEG4VideoStreamDiscreteFramer.cpp	/^Boolean MPEG4VideoStreamDiscreteFramer::getNextFrameBits(unsigned numBits,$/;"	f	class:MPEG4VideoStreamDiscreteFramer
~MPEG4VideoStreamDiscreteFramer	MPEG4VideoStreamDiscreteFramer.cpp	/^MPEG4VideoStreamDiscreteFramer::~MPEG4VideoStreamDiscreteFramer() {$/;"	f	class:MPEG4VideoStreamDiscreteFramer
GROUP_VOP_START_CODE	MPEG4VideoStreamFramer.cpp	229;"	d	file:
MPEG4VideoStreamFramer	MPEG4VideoStreamFramer.cpp	/^MPEG4VideoStreamFramer::MPEG4VideoStreamFramer(UsageEnvironment& env,$/;"	f	class:MPEG4VideoStreamFramer
MPEG4VideoStreamParser	MPEG4VideoStreamFramer.cpp	/^::MPEG4VideoStreamParser(MPEG4VideoStreamFramer* usingSource,$/;"	f	class:MPEG4VideoStreamParser
MPEG4VideoStreamParser	MPEG4VideoStreamFramer.cpp	/^class MPEG4VideoStreamParser: public MPEGVideoStreamParser {$/;"	c	file:
MPEGParseState	MPEG4VideoStreamFramer.cpp	/^enum MPEGParseState {$/;"	g	file:
PARSING_GROUP_OF_VIDEO_OBJECT_PLANE	MPEG4VideoStreamFramer.cpp	/^  PARSING_GROUP_OF_VIDEO_OBJECT_PLANE,$/;"	e	enum:MPEGParseState	file:
PARSING_VIDEO_OBJECT_LAYER	MPEG4VideoStreamFramer.cpp	/^  PARSING_VIDEO_OBJECT_LAYER,$/;"	e	enum:MPEGParseState	file:
PARSING_VIDEO_OBJECT_PLANE	MPEG4VideoStreamFramer.cpp	/^  PARSING_VIDEO_OBJECT_PLANE,$/;"	e	enum:MPEGParseState	file:
PARSING_VISUAL_OBJECT	MPEG4VideoStreamFramer.cpp	/^  PARSING_VISUAL_OBJECT,$/;"	e	enum:MPEGParseState	file:
PARSING_VISUAL_OBJECT_SEQUENCE	MPEG4VideoStreamFramer.cpp	/^  PARSING_VISUAL_OBJECT_SEQUENCE,$/;"	e	enum:MPEGParseState	file:
PARSING_VISUAL_OBJECT_SEQUENCE_END_CODE	MPEG4VideoStreamFramer.cpp	/^  PARSING_VISUAL_OBJECT_SEQUENCE_END_CODE$/;"	e	enum:MPEGParseState	file:
PARSING_VISUAL_OBJECT_SEQUENCE_SEEN_CODE	MPEG4VideoStreamFramer.cpp	/^  PARSING_VISUAL_OBJECT_SEQUENCE_SEEN_CODE,$/;"	e	enum:MPEGParseState	file:
VISUAL_OBJECT_SEQUENCE_END_CODE	MPEG4VideoStreamFramer.cpp	228;"	d	file:
VISUAL_OBJECT_SEQUENCE_START_CODE	MPEG4VideoStreamFramer.cpp	227;"	d	file:
VISUAL_OBJECT_START_CODE	MPEG4VideoStreamFramer.cpp	230;"	d	file:
VOP_START_CODE	MPEG4VideoStreamFramer.cpp	231;"	d	file:
analyzeVOLHeader	MPEG4VideoStreamFramer.cpp	/^void MPEG4VideoStreamParser::analyzeVOLHeader() {$/;"	f	class:MPEG4VideoStreamParser
appendToNewConfig	MPEG4VideoStreamFramer.cpp	/^::appendToNewConfig(unsigned char* newConfigBytes, unsigned numNewBytes) {$/;"	f	class:MPEG4VideoStreamFramer
completeNewConfig	MPEG4VideoStreamFramer.cpp	/^void MPEG4VideoStreamFramer::completeNewConfig() {$/;"	f	class:MPEG4VideoStreamFramer
createNew	MPEG4VideoStreamFramer.cpp	/^MPEG4VideoStreamFramer::createNew(UsageEnvironment& env,$/;"	f	class:MPEG4VideoStreamFramer
fCurrentParseState	MPEG4VideoStreamFramer.cpp	/^  MPEGParseState fCurrentParseState;$/;"	m	class:MPEG4VideoStreamParser	file:
fJustSawTimeCode	MPEG4VideoStreamFramer.cpp	/^  Boolean fJustSawTimeCode;$/;"	m	class:MPEG4VideoStreamParser	file:
fNumBitsSeenSoFar	MPEG4VideoStreamFramer.cpp	/^  unsigned fNumBitsSeenSoFar; \/\/ used by the getNextFrameBit*() routines$/;"	m	class:MPEG4VideoStreamParser	file:
fNumVTIRBits	MPEG4VideoStreamFramer.cpp	/^  unsigned fNumVTIRBits;$/;"	m	class:MPEG4VideoStreamParser	file:
fPrevNewTotalTicks	MPEG4VideoStreamFramer.cpp	/^  unsigned fSecondsSinceLastTimeCode, fTotalTicksSinceLastTimeCode, fPrevNewTotalTicks;$/;"	m	class:MPEG4VideoStreamParser	file:
fPrevPictureCountDelta	MPEG4VideoStreamFramer.cpp	/^  unsigned fPrevPictureCountDelta;$/;"	m	class:MPEG4VideoStreamParser	file:
fSecondsSinceLastTimeCode	MPEG4VideoStreamFramer.cpp	/^  unsigned fSecondsSinceLastTimeCode, fTotalTicksSinceLastTimeCode, fPrevNewTotalTicks;$/;"	m	class:MPEG4VideoStreamParser	file:
fTotalTicksSinceLastTimeCode	MPEG4VideoStreamFramer.cpp	/^  unsigned fSecondsSinceLastTimeCode, fTotalTicksSinceLastTimeCode, fPrevNewTotalTicks;$/;"	m	class:MPEG4VideoStreamParser	file:
fixed_vop_rate	MPEG4VideoStreamFramer.cpp	/^  u_int8_t fixed_vop_rate;$/;"	m	class:MPEG4VideoStreamParser	file:
fixed_vop_time_increment	MPEG4VideoStreamFramer.cpp	/^  unsigned fixed_vop_time_increment; \/\/ used if 'fixed_vop_rate' is set$/;"	m	class:MPEG4VideoStreamParser	file:
flushInput	MPEG4VideoStreamFramer.cpp	/^void MPEG4VideoStreamParser::flushInput() {$/;"	f	class:MPEG4VideoStreamParser
getConfigBytes	MPEG4VideoStreamFramer.cpp	/^::getConfigBytes(unsigned& numBytes) const {$/;"	f	class:MPEG4VideoStreamFramer
getNextFrameBit	MPEG4VideoStreamFramer.cpp	/^Boolean MPEG4VideoStreamParser::getNextFrameBit(u_int8_t& result) {$/;"	f	class:MPEG4VideoStreamParser
getNextFrameBits	MPEG4VideoStreamFramer.cpp	/^Boolean MPEG4VideoStreamParser::getNextFrameBits(unsigned numBits,$/;"	f	class:MPEG4VideoStreamParser
isMPEG4VideoStreamFramer	MPEG4VideoStreamFramer.cpp	/^Boolean MPEG4VideoStreamFramer::isMPEG4VideoStreamFramer() const {$/;"	f	class:MPEG4VideoStreamFramer
isVideoObjectLayerStartCode	MPEG4VideoStreamFramer.cpp	/^static inline Boolean isVideoObjectLayerStartCode(u_int32_t code) {$/;"	f	file:
isVideoObjectStartCode	MPEG4VideoStreamFramer.cpp	/^static inline Boolean isVideoObjectStartCode(u_int32_t code) {$/;"	f	file:
parse	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parse() {$/;"	f	class:MPEG4VideoStreamParser
parseGroupOfVideoObjectPlane	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parseGroupOfVideoObjectPlane() {$/;"	f	class:MPEG4VideoStreamParser
parseVideoObjectLayer	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parseVideoObjectLayer() {$/;"	f	class:MPEG4VideoStreamParser
parseVideoObjectPlane	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parseVideoObjectPlane() {$/;"	f	class:MPEG4VideoStreamParser
parseVisualObject	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parseVisualObject() {$/;"	f	class:MPEG4VideoStreamParser
parseVisualObjectSequence	MPEG4VideoStreamFramer.cpp	/^::parseVisualObjectSequence(Boolean haveSeenStartCode) {$/;"	f	class:MPEG4VideoStreamParser
parseVisualObjectSequenceEndCode	MPEG4VideoStreamFramer.cpp	/^unsigned MPEG4VideoStreamParser::parseVisualObjectSequenceEndCode() {$/;"	f	class:MPEG4VideoStreamParser
setConfigInfo	MPEG4VideoStreamFramer.cpp	/^::setConfigInfo(u_int8_t profileAndLevelIndication, char const* configStr) {$/;"	f	class:MPEG4VideoStreamFramer
setParseState	MPEG4VideoStreamFramer.cpp	/^void MPEG4VideoStreamParser::setParseState(MPEGParseState parseState) {$/;"	f	class:MPEG4VideoStreamParser
startNewConfig	MPEG4VideoStreamFramer.cpp	/^void MPEG4VideoStreamFramer::startNewConfig() {$/;"	f	class:MPEG4VideoStreamFramer
usingSource	MPEG4VideoStreamFramer.cpp	/^  MPEG4VideoStreamFramer* usingSource() {$/;"	f	class:MPEG4VideoStreamParser	file:
vop_time_increment_resolution	MPEG4VideoStreamFramer.cpp	/^  u_int32_t vop_time_increment_resolution;$/;"	m	class:MPEG4VideoStreamParser	file:
~MPEG4VideoStreamFramer	MPEG4VideoStreamFramer.cpp	/^MPEG4VideoStreamFramer::~MPEG4VideoStreamFramer() {$/;"	f	class:MPEG4VideoStreamFramer
~MPEG4VideoStreamParser	MPEG4VideoStreamFramer.cpp	/^MPEG4VideoStreamParser::~MPEG4VideoStreamParser() {$/;"	f	class:MPEG4VideoStreamParser
MPEGVideoStreamFramer	MPEGVideoStreamFramer.cpp	/^MPEGVideoStreamFramer::MPEGVideoStreamFramer(UsageEnvironment& env,$/;"	f	class:MPEGVideoStreamFramer
TimeCode	MPEGVideoStreamFramer.cpp	/^TimeCode::TimeCode()$/;"	f	class:TimeCode
computePresentationTime	MPEGVideoStreamFramer.cpp	/^::computePresentationTime(unsigned numAdditionalPictures) {$/;"	f	class:MPEGVideoStreamFramer
continueReadProcessing	MPEGVideoStreamFramer.cpp	/^::continueReadProcessing(void* clientData,$/;"	f	class:MPEGVideoStreamFramer
continueReadProcessing	MPEGVideoStreamFramer.cpp	/^void MPEGVideoStreamFramer::continueReadProcessing() {$/;"	f	class:MPEGVideoStreamFramer
doGetNextFrame	MPEGVideoStreamFramer.cpp	/^void MPEGVideoStreamFramer::doGetNextFrame() {$/;"	f	class:MPEGVideoStreamFramer
doStopGettingFrames	MPEGVideoStreamFramer.cpp	/^void MPEGVideoStreamFramer::doStopGettingFrames() {$/;"	f	class:MPEGVideoStreamFramer
firstPT	MPEGVideoStreamFramer.cpp	/^static struct timeval firstPT;$/;"	v	typeref:struct:timeval	file:
flushInput	MPEGVideoStreamFramer.cpp	/^void MPEGVideoStreamFramer::flushInput() {$/;"	f	class:MPEGVideoStreamFramer
operator ==	MPEGVideoStreamFramer.cpp	/^int TimeCode::operator==(TimeCode const& arg2) {$/;"	f	class:TimeCode
reset	MPEGVideoStreamFramer.cpp	/^void MPEGVideoStreamFramer::reset() {$/;"	f	class:MPEGVideoStreamFramer
setTimeCode	MPEGVideoStreamFramer.cpp	/^::setTimeCode(unsigned hours, unsigned minutes, unsigned seconds,$/;"	f	class:MPEGVideoStreamFramer
~MPEGVideoStreamFramer	MPEGVideoStreamFramer.cpp	/^MPEGVideoStreamFramer::~MPEGVideoStreamFramer() {$/;"	f	class:MPEGVideoStreamFramer
~TimeCode	MPEGVideoStreamFramer.cpp	/^TimeCode::~TimeCode() {$/;"	f	class:TimeCode
MPEGVideoStreamParser	MPEGVideoStreamParser.cpp	/^::MPEGVideoStreamParser(MPEGVideoStreamFramer* usingSource,$/;"	f	class:MPEGVideoStreamParser
registerReadInterest	MPEGVideoStreamParser.cpp	/^void MPEGVideoStreamParser::registerReadInterest(unsigned char* to,$/;"	f	class:MPEGVideoStreamParser
restoreSavedParserState	MPEGVideoStreamParser.cpp	/^void MPEGVideoStreamParser::restoreSavedParserState() {$/;"	f	class:MPEGVideoStreamParser
~MPEGVideoStreamParser	MPEGVideoStreamParser.cpp	/^MPEGVideoStreamParser::~MPEGVideoStreamParser() {$/;"	f	class:MPEGVideoStreamParser
MPEGVideoStreamParser	MPEGVideoStreamParser.hh	/^class MPEGVideoStreamParser: public StreamParser {$/;"	c
_MPEG_VIDEO_STREAM_PARSER_HH	MPEGVideoStreamParser.hh	22;"	d
curFrameSize	MPEGVideoStreamParser.hh	/^  unsigned curFrameSize() { return fTo - fStartOfFrame; }$/;"	f	class:MPEGVideoStreamParser
fLimit	MPEGVideoStreamParser.hh	/^  unsigned char* fLimit;$/;"	m	class:MPEGVideoStreamParser
fNumTruncatedBytes	MPEGVideoStreamParser.hh	/^  unsigned fNumTruncatedBytes;$/;"	m	class:MPEGVideoStreamParser
fSavedNumTruncatedBytes	MPEGVideoStreamParser.hh	/^  unsigned fSavedNumTruncatedBytes;$/;"	m	class:MPEGVideoStreamParser
fSavedTo	MPEGVideoStreamParser.hh	/^  unsigned char* fSavedTo;$/;"	m	class:MPEGVideoStreamParser
fStartOfFrame	MPEGVideoStreamParser.hh	/^  unsigned char* fStartOfFrame;$/;"	m	class:MPEGVideoStreamParser
fTo	MPEGVideoStreamParser.hh	/^  unsigned char* fTo;$/;"	m	class:MPEGVideoStreamParser
fUsingSource	MPEGVideoStreamParser.hh	/^  MPEGVideoStreamFramer* fUsingSource;$/;"	m	class:MPEGVideoStreamParser
numTruncatedBytes	MPEGVideoStreamParser.hh	/^  unsigned numTruncatedBytes() const { return fNumTruncatedBytes; }$/;"	f	class:MPEGVideoStreamParser
save4Bytes	MPEGVideoStreamParser.hh	/^  void save4Bytes(u_int32_t word) {$/;"	f	class:MPEGVideoStreamParser
saveByte	MPEGVideoStreamParser.hh	/^  void saveByte(u_int8_t byte) {$/;"	f	class:MPEGVideoStreamParser
saveToNextCode	MPEGVideoStreamParser.hh	/^  void saveToNextCode(u_int32_t& curWord) {$/;"	f	class:MPEGVideoStreamParser
setParseState	MPEGVideoStreamParser.hh	/^  void setParseState() {$/;"	f	class:MPEGVideoStreamParser
skipToNextCode	MPEGVideoStreamParser.hh	/^  void skipToNextCode(u_int32_t& curWord) {$/;"	f	class:MPEGVideoStreamParser
MIMEtype	MatroskaDemuxedTrack.cpp	/^char const* MatroskaDemuxedTrack::MIMEtype() const {$/;"	f	class:MatroskaDemuxedTrack
MatroskaDemuxedTrack	MatroskaDemuxedTrack.cpp	/^MatroskaDemuxedTrack::MatroskaDemuxedTrack(UsageEnvironment& env, unsigned trackNumber, MatroskaDemux& sourceDemux)$/;"	f	class:MatroskaDemuxedTrack
doGetNextFrame	MatroskaDemuxedTrack.cpp	/^void MatroskaDemuxedTrack::doGetNextFrame() {$/;"	f	class:MatroskaDemuxedTrack
seekToTime	MatroskaDemuxedTrack.cpp	/^void MatroskaDemuxedTrack::seekToTime(double& seekNPT) {$/;"	f	class:MatroskaDemuxedTrack
~MatroskaDemuxedTrack	MatroskaDemuxedTrack.cpp	/^MatroskaDemuxedTrack::~MatroskaDemuxedTrack() {$/;"	f	class:MatroskaDemuxedTrack
MatroskaDemuxedTrack	MatroskaDemuxedTrack.hh	/^class MatroskaDemuxedTrack: public FramedSource {$/;"	c
_MATROSKA_DEMUXED_TRACK_HH	MatroskaDemuxedTrack.hh	22;"	d
durationImbalance	MatroskaDemuxedTrack.hh	/^  int& durationImbalance() { return fDurationImbalance; }$/;"	f	class:MatroskaDemuxedTrack
durationInMicroseconds	MatroskaDemuxedTrack.hh	/^  unsigned& durationInMicroseconds() { return fDurationInMicroseconds; }$/;"	f	class:MatroskaDemuxedTrack
fDurationImbalance	MatroskaDemuxedTrack.hh	/^  int fDurationImbalance;$/;"	m	class:MatroskaDemuxedTrack
fOpusTrackNumber	MatroskaDemuxedTrack.hh	/^  unsigned fOpusTrackNumber; \/\/ hack for Opus audio$/;"	m	class:MatroskaDemuxedTrack
fOurSourceDemux	MatroskaDemuxedTrack.hh	/^  MatroskaDemux& fOurSourceDemux;$/;"	m	class:MatroskaDemuxedTrack
fOurTrackNumber	MatroskaDemuxedTrack.hh	/^  unsigned fOurTrackNumber;$/;"	m	class:MatroskaDemuxedTrack
fPrevPresentationTime	MatroskaDemuxedTrack.hh	/^  struct timeval fPrevPresentationTime;$/;"	m	class:MatroskaDemuxedTrack	typeref:struct:MatroskaDemuxedTrack::timeval
frameSize	MatroskaDemuxedTrack.hh	/^  unsigned& frameSize() { return fFrameSize; }$/;"	f	class:MatroskaDemuxedTrack
maxSize	MatroskaDemuxedTrack.hh	/^  unsigned maxSize() { return fMaxSize; }$/;"	f	class:MatroskaDemuxedTrack
numTruncatedBytes	MatroskaDemuxedTrack.hh	/^  unsigned& numTruncatedBytes() { return fNumTruncatedBytes; }$/;"	f	class:MatroskaDemuxedTrack
presentationTime	MatroskaDemuxedTrack.hh	/^  struct timeval& presentationTime() { return fPresentationTime; }$/;"	f	class:MatroskaDemuxedTrack
prevPresentationTime	MatroskaDemuxedTrack.hh	/^  struct timeval& prevPresentationTime() { return fPrevPresentationTime; }$/;"	f	class:MatroskaDemuxedTrack
to	MatroskaDemuxedTrack.hh	/^  unsigned char* to() { return fTo; }$/;"	f	class:MatroskaDemuxedTrack
CHECK_PTR	MatroskaFile.cpp	300;"	d	file:
CuePoint	MatroskaFile.cpp	/^CuePoint::CuePoint(double cueTime, u_int64_t clusterOffsetInFile, unsigned blockNumWithinCluster)$/;"	f	class:CuePoint
CuePoint	MatroskaFile.cpp	/^class CuePoint {$/;"	c	file:
Iterator	MatroskaFile.cpp	/^  class Iterator {$/;"	c	class:MatroskaTrackTable	file:
Iterator	MatroskaFile.cpp	/^MatroskaTrackTable::Iterator::Iterator(MatroskaTrackTable& ourTable) {$/;"	f	class:MatroskaTrackTable::Iterator
MatroskaDemux	MatroskaFile.cpp	/^MatroskaDemux::MatroskaDemux(MatroskaFile& ourFile)$/;"	f	class:MatroskaDemux
MatroskaFile	MatroskaFile.cpp	/^MatroskaFile::MatroskaFile(UsageEnvironment& env, char const* fileName, onCreationFunc* onCreation, void* onCreationClientData,$/;"	f	class:MatroskaFile
MatroskaTrack	MatroskaFile.cpp	/^MatroskaTrack::MatroskaTrack()$/;"	f	class:MatroskaTrack
MatroskaTrackTable	MatroskaFile.cpp	/^MatroskaTrackTable::MatroskaTrackTable()$/;"	f	class:MatroskaTrackTable
MatroskaTrackTable	MatroskaFile.cpp	/^class MatroskaTrackTable {$/;"	c	file:
NUM_BYTES_REMAINING	MatroskaFile.cpp	301;"	d	file:
TrackChoiceRecord	MatroskaFile.cpp	/^class TrackChoiceRecord {$/;"	c	file:
add	MatroskaFile.cpp	/^void MatroskaTrackTable::add(MatroskaTrack* newTrack, unsigned trackNumber) {$/;"	f	class:MatroskaTrackTable
addCuePoint	MatroskaFile.cpp	/^void CuePoint::addCuePoint(CuePoint*& root, double cueTime, u_int64_t clusterOffsetInFile, unsigned blockNumWithinCluster,$/;"	f	class:CuePoint
addCuePoint	MatroskaFile.cpp	/^void MatroskaFile::addCuePoint(double cueTime, u_int64_t clusterOffsetInFile, unsigned blockNumWithinCluster) {$/;"	f	class:MatroskaFile
addTrack	MatroskaFile.cpp	/^void MatroskaFile::addTrack(MatroskaTrack* newTrack, unsigned trackNumber) {$/;"	f	class:MatroskaFile
choiceFlags	MatroskaFile.cpp	/^  unsigned choiceFlags;$/;"	m	class:TrackChoiceRecord	file:
continueReading	MatroskaFile.cpp	/^void MatroskaDemux::continueReading() {$/;"	f	class:MatroskaDemux
createNew	MatroskaFile.cpp	/^::createNew(UsageEnvironment& env, char const* fileName, onCreationFunc* onCreation, void* onCreationClientData,$/;"	f	class:MatroskaFile
createRTPSinkForTrackNumber	MatroskaFile.cpp	/^::createRTPSinkForTrackNumber(unsigned trackNumber, Groupsock* rtpGroupsock,$/;"	f	class:MatroskaFile
createSourceForStreaming	MatroskaFile.cpp	/^::createSourceForStreaming(FramedSource* baseSource, unsigned trackNumber,$/;"	f	class:MatroskaFile
fBalance	MatroskaFile.cpp	/^  char fBalance; \/\/ height of right subtree - height of left subtree$/;"	m	class:CuePoint	file:
fBlockNumWithinCluster	MatroskaFile.cpp	/^  unsigned fBlockNumWithinCluster; \/\/ 0-based$/;"	m	class:CuePoint	file:
fClusterOffsetInFile	MatroskaFile.cpp	/^  u_int64_t fClusterOffsetInFile;$/;"	m	class:CuePoint	file:
fCueTime	MatroskaFile.cpp	/^  double fCueTime;$/;"	m	class:CuePoint	file:
fIter	MatroskaFile.cpp	/^    HashTable::Iterator* fIter;$/;"	m	class:MatroskaTrackTable::Iterator	file:
fSubTree	MatroskaFile.cpp	/^  CuePoint* fSubTree[2]; \/\/ 0 => left; 1 => right$/;"	m	class:CuePoint	file:
fTable	MatroskaFile.cpp	/^  HashTable* fTable;$/;"	m	class:MatroskaTrackTable	file:
fileDuration	MatroskaFile.cpp	/^float MatroskaFile::fileDuration() {$/;"	f	class:MatroskaFile
fprintf	MatroskaFile.cpp	/^void CuePoint::fprintf(FILE* fid, CuePoint* cuePoint) {$/;"	f	class:CuePoint
getPrivByte	MatroskaFile.cpp	299;"	d	file:
handleEndOfFile	MatroskaFile.cpp	/^void MatroskaDemux::handleEndOfFile() {$/;"	f	class:MatroskaDemux
handleEndOfFile	MatroskaFile.cpp	/^void MatroskaDemux::handleEndOfFile(void* clientData) {$/;"	f	class:MatroskaDemux
handleEndOfTrackHeaderParsing	MatroskaFile.cpp	/^void MatroskaFile::handleEndOfTrackHeaderParsing() {$/;"	f	class:MatroskaFile
handleEndOfTrackHeaderParsing	MatroskaFile.cpp	/^void MatroskaFile::handleEndOfTrackHeaderParsing(void* clientData) {$/;"	f	class:MatroskaFile
left	MatroskaFile.cpp	/^  CuePoint* left() const { return fSubTree[0]; }$/;"	f	class:CuePoint	file:
lookup	MatroskaFile.cpp	/^Boolean CuePoint::lookup(double& cueTime, u_int64_t& resultClusterOffsetInFile, unsigned& resultBlockNumWithinCluster) {$/;"	f	class:CuePoint
lookup	MatroskaFile.cpp	/^MatroskaTrack* MatroskaFile::lookup(unsigned trackNumber) const {$/;"	f	class:MatroskaFile
lookup	MatroskaFile.cpp	/^MatroskaTrack* MatroskaTrackTable::lookup(unsigned trackNumber) {$/;"	f	class:MatroskaTrackTable
lookupCuePoint	MatroskaFile.cpp	/^Boolean MatroskaFile::lookupCuePoint(double& cueTime, u_int64_t& resultClusterOffsetInFile, unsigned& resultBlockNumWithinCluster) {$/;"	f	class:MatroskaFile
lookupDemuxedTrack	MatroskaFile.cpp	/^MatroskaDemuxedTrack* MatroskaDemux::lookupDemuxedTrack(unsigned trackNumber) {$/;"	f	class:MatroskaDemux
newDemux	MatroskaFile.cpp	/^MatroskaDemux* MatroskaFile::newDemux() {$/;"	f	class:MatroskaFile
newDemuxedTrack	MatroskaFile.cpp	/^FramedSource* MatroskaDemux::newDemuxedTrack() {$/;"	f	class:MatroskaDemux
newDemuxedTrack	MatroskaFile.cpp	/^FramedSource* MatroskaDemux::newDemuxedTrack(unsigned& resultTrackNumber) {$/;"	f	class:MatroskaDemux
newDemuxedTrackByTrackNumber	MatroskaFile.cpp	/^FramedSource* MatroskaDemux::newDemuxedTrackByTrackNumber(unsigned trackNumber) {$/;"	f	class:MatroskaDemux
next	MatroskaFile.cpp	/^MatroskaTrack* MatroskaTrackTable::Iterator::next() {$/;"	f	class:MatroskaTrackTable::Iterator
numTracks	MatroskaFile.cpp	/^unsigned MatroskaTrackTable::numTracks() const { return fTable->numEntries(); }$/;"	f	class:MatroskaTrackTable
printCuePoints	MatroskaFile.cpp	/^void MatroskaFile::printCuePoints(FILE* fid) {$/;"	f	class:MatroskaFile
removeDemux	MatroskaFile.cpp	/^void MatroskaFile::removeDemux(MatroskaDemux* demux) {$/;"	f	class:MatroskaFile
removeTrack	MatroskaFile.cpp	/^void MatroskaDemux::removeTrack(unsigned trackNumber) {$/;"	f	class:MatroskaDemux
right	MatroskaFile.cpp	/^  CuePoint* right() const { return fSubTree[1]; }$/;"	f	class:CuePoint	file:
rotate	MatroskaFile.cpp	/^void CuePoint::rotate(unsigned direction\/*0 => left; 1 => right*\/, CuePoint*& root) {$/;"	f	class:CuePoint
seekToTime	MatroskaFile.cpp	/^void MatroskaDemux::seekToTime(double& seekNPT) {$/;"	f	class:MatroskaDemux
trackNumber	MatroskaFile.cpp	/^  unsigned trackNumber;$/;"	m	class:TrackChoiceRecord	file:
trackType	MatroskaFile.cpp	/^  u_int8_t trackType;$/;"	m	class:TrackChoiceRecord	file:
~CuePoint	MatroskaFile.cpp	/^CuePoint::~CuePoint() {$/;"	f	class:CuePoint
~Iterator	MatroskaFile.cpp	/^MatroskaTrackTable::Iterator::~Iterator() {$/;"	f	class:MatroskaTrackTable::Iterator
~MatroskaDemux	MatroskaFile.cpp	/^MatroskaDemux::~MatroskaDemux() {$/;"	f	class:MatroskaDemux
~MatroskaFile	MatroskaFile.cpp	/^MatroskaFile::~MatroskaFile() {$/;"	f	class:MatroskaFile
~MatroskaTrack	MatroskaFile.cpp	/^MatroskaTrack::~MatroskaTrack() {$/;"	f	class:MatroskaTrack
~MatroskaTrackTable	MatroskaFile.cpp	/^MatroskaTrackTable::~MatroskaTrackTable() {$/;"	f	class:MatroskaTrackTable
EBMLLacing	MatroskaFileParser.cpp	/^typedef enum { NoLacing, XiphLacing, FixedSizeLacing, EBMLLacing } MatroskaLacingType;$/;"	e	enum:__anon1	file:
FixedSizeLacing	MatroskaFileParser.cpp	/^typedef enum { NoLacing, XiphLacing, FixedSizeLacing, EBMLLacing } MatroskaLacingType;$/;"	e	enum:__anon1	file:
MatroskaFileParser	MatroskaFileParser.cpp	/^MatroskaFileParser::MatroskaFileParser(MatroskaFile& ourFile, FramedSource* inputSource,$/;"	f	class:MatroskaFileParser
MatroskaLacingType	MatroskaFileParser.cpp	/^typedef enum { NoLacing, XiphLacing, FixedSizeLacing, EBMLLacing } MatroskaLacingType;$/;"	t	typeref:enum:__anon1	file:
NoLacing	MatroskaFileParser.cpp	/^typedef enum { NoLacing, XiphLacing, FixedSizeLacing, EBMLLacing } MatroskaLacingType;$/;"	e	enum:__anon1	file:
XiphLacing	MatroskaFileParser.cpp	/^typedef enum { NoLacing, XiphLacing, FixedSizeLacing, EBMLLacing } MatroskaLacingType;$/;"	e	enum:__anon1	file:
continueParsing	MatroskaFileParser.cpp	/^::continueParsing(void* clientData, unsigned char* \/*ptr*\/, unsigned \/*size*\/, struct timeval \/*presentationTime*\/) {$/;"	f	class:MatroskaFileParser
continueParsing	MatroskaFileParser.cpp	/^void MatroskaFileParser::continueParsing() {$/;"	f	class:MatroskaFileParser
deliverFrameBytes	MatroskaFileParser.cpp	/^void MatroskaFileParser::deliverFrameBytes() {$/;"	f	class:MatroskaFileParser
deliverFrameWithinBlock	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::deliverFrameWithinBlock() {$/;"	f	class:MatroskaFileParser
getCommonFrameBytes	MatroskaFileParser.cpp	/^::getCommonFrameBytes(MatroskaTrack* track, u_int8_t* to, unsigned numBytesToGet, unsigned numBytesToSkip) {$/;"	f	class:MatroskaFileParser
lookForNextBlock	MatroskaFileParser.cpp	/^void MatroskaFileParser::lookForNextBlock() {$/;"	f	class:MatroskaFileParser
lookForNextTrack	MatroskaFileParser.cpp	/^void MatroskaFileParser::lookForNextTrack() {$/;"	f	class:MatroskaFileParser
parse	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parse() {$/;"	f	class:MatroskaFileParser
parseBlock	MatroskaFileParser.cpp	/^void MatroskaFileParser::parseBlock() {$/;"	f	class:MatroskaFileParser
parseCues	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseCues() {$/;"	f	class:MatroskaFileParser
parseEBMLIdAndSize	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLIdAndSize(EBMLId& id, EBMLDataSize& size) {$/;"	f	class:MatroskaFileParser
parseEBMLNumber	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLNumber(EBMLNumber& num) {$/;"	f	class:MatroskaFileParser
parseEBMLVal_binary	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLVal_binary(EBMLDataSize& size, u_int8_t*& result) {$/;"	f	class:MatroskaFileParser
parseEBMLVal_float	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLVal_float(EBMLDataSize& size, float& result) {$/;"	f	class:MatroskaFileParser
parseEBMLVal_string	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLVal_string(EBMLDataSize& size, char*& result) {$/;"	f	class:MatroskaFileParser
parseEBMLVal_unsigned	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLVal_unsigned(EBMLDataSize& size, unsigned& result) {$/;"	f	class:MatroskaFileParser
parseEBMLVal_unsigned64	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseEBMLVal_unsigned64(EBMLDataSize& size, u_int64_t& result) {$/;"	f	class:MatroskaFileParser
parseStartOfFile	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseStartOfFile() {$/;"	f	class:MatroskaFileParser
parseTrack	MatroskaFileParser.cpp	/^Boolean MatroskaFileParser::parseTrack() {$/;"	f	class:MatroskaFileParser
resetStateAfterSeeking	MatroskaFileParser.cpp	/^void MatroskaFileParser::resetStateAfterSeeking() {$/;"	f	class:MatroskaFileParser
restoreSavedParserState	MatroskaFileParser.cpp	/^void MatroskaFileParser::restoreSavedParserState() {$/;"	f	class:MatroskaFileParser
seekToEndOfFile	MatroskaFileParser.cpp	/^void MatroskaFileParser::seekToEndOfFile() {$/;"	f	class:MatroskaFileParser
seekToFilePosition	MatroskaFileParser.cpp	/^void MatroskaFileParser::seekToFilePosition(u_int64_t offsetInFile) {$/;"	f	class:MatroskaFileParser
seekToTime	MatroskaFileParser.cpp	/^void MatroskaFileParser::seekToTime(double& seekNPT) {$/;"	f	class:MatroskaFileParser
setParseState	MatroskaFileParser.cpp	/^void MatroskaFileParser::setParseState() {$/;"	f	class:MatroskaFileParser
skipHeader	MatroskaFileParser.cpp	/^void MatroskaFileParser::skipHeader(EBMLDataSize const& size) {$/;"	f	class:MatroskaFileParser
skipRemainingHeaderBytes	MatroskaFileParser.cpp	/^void MatroskaFileParser::skipRemainingHeaderBytes(Boolean isContinuation) {$/;"	f	class:MatroskaFileParser
~MatroskaFileParser	MatroskaFileParser.cpp	/^MatroskaFileParser::~MatroskaFileParser() {$/;"	f	class:MatroskaFileParser
DELIVERING_FRAME_BYTES	MatroskaFileParser.hh	/^  DELIVERING_FRAME_BYTES$/;"	e	enum:MatroskaParseState
DELIVERING_FRAME_WITHIN_BLOCK	MatroskaFileParser.hh	/^  DELIVERING_FRAME_WITHIN_BLOCK,$/;"	e	enum:MatroskaParseState
LOOKING_FOR_BLOCK	MatroskaFileParser.hh	/^  LOOKING_FOR_BLOCK,$/;"	e	enum:MatroskaParseState
LOOKING_FOR_CLUSTER	MatroskaFileParser.hh	/^  LOOKING_FOR_CLUSTER,$/;"	e	enum:MatroskaParseState
LOOKING_FOR_TRACKS	MatroskaFileParser.hh	/^  LOOKING_FOR_TRACKS,$/;"	e	enum:MatroskaParseState
MatroskaFileParser	MatroskaFileParser.hh	/^class MatroskaFileParser: public StreamParser {$/;"	c
MatroskaParseState	MatroskaFileParser.hh	/^enum MatroskaParseState {$/;"	g
PARSING_BLOCK	MatroskaFileParser.hh	/^  PARSING_BLOCK,$/;"	e	enum:MatroskaParseState
PARSING_CUES	MatroskaFileParser.hh	/^  PARSING_CUES,$/;"	e	enum:MatroskaParseState
PARSING_START_OF_FILE	MatroskaFileParser.hh	/^  PARSING_START_OF_FILE,$/;"	e	enum:MatroskaParseState
PARSING_TRACK	MatroskaFileParser.hh	/^  PARSING_TRACK,$/;"	e	enum:MatroskaParseState
fBlockSize	MatroskaFileParser.hh	/^  unsigned fBlockSize;$/;"	m	class:MatroskaFileParser
fBlockTimecode	MatroskaFileParser.hh	/^  short fBlockTimecode;$/;"	m	class:MatroskaFileParser
fBlockTrackNumber	MatroskaFileParser.hh	/^  unsigned fBlockTrackNumber;$/;"	m	class:MatroskaFileParser
fClusterTimecode	MatroskaFileParser.hh	/^  unsigned fClusterTimecode;$/;"	m	class:MatroskaFileParser
fCurFrameNumBytesToGet	MatroskaFileParser.hh	/^  unsigned fCurFrameNumBytesToGet;$/;"	m	class:MatroskaFileParser
fCurFrameNumBytesToSkip	MatroskaFileParser.hh	/^  unsigned fCurFrameNumBytesToSkip;$/;"	m	class:MatroskaFileParser
fCurFrameTo	MatroskaFileParser.hh	/^  u_int8_t* fCurFrameTo;$/;"	m	class:MatroskaFileParser
fCurOffsetInFile	MatroskaFileParser.hh	/^  u_int64_t fCurOffsetInFile, fSavedCurOffsetInFile, fLimitOffsetInFile;$/;"	m	class:MatroskaFileParser
fCurOffsetWithinFrame	MatroskaFileParser.hh	/^  unsigned fCurOffsetWithinFrame, fSavedCurOffsetWithinFrame; \/\/ used if track->haveSubframes()$/;"	m	class:MatroskaFileParser
fCurrentParseState	MatroskaFileParser.hh	/^  MatroskaParseState fCurrentParseState;$/;"	m	class:MatroskaFileParser
fFrameSizesWithinBlock	MatroskaFileParser.hh	/^  unsigned* fFrameSizesWithinBlock;$/;"	m	class:MatroskaFileParser
fInputSource	MatroskaFileParser.hh	/^  FramedSource* fInputSource;$/;"	m	class:MatroskaFileParser
fLastSeekId	MatroskaFileParser.hh	/^  EBMLId fLastSeekId;$/;"	m	class:MatroskaFileParser
fLimitOffsetInFile	MatroskaFileParser.hh	/^  u_int64_t fCurOffsetInFile, fSavedCurOffsetInFile, fLimitOffsetInFile;$/;"	m	class:MatroskaFileParser
fNextFrameNumberToDeliver	MatroskaFileParser.hh	/^  unsigned fNextFrameNumberToDeliver;$/;"	m	class:MatroskaFileParser
fNumFramesInBlock	MatroskaFileParser.hh	/^  unsigned fNumFramesInBlock;$/;"	m	class:MatroskaFileParser
fNumHeaderBytesToSkip	MatroskaFileParser.hh	/^  u_int64_t fNumHeaderBytesToSkip;$/;"	m	class:MatroskaFileParser
fOnEndClientData	MatroskaFileParser.hh	/^  void* fOnEndClientData;$/;"	m	class:MatroskaFileParser
fOnEndFunc	MatroskaFileParser.hh	/^  FramedSource::onCloseFunc* fOnEndFunc;$/;"	m	class:MatroskaFileParser
fOurDemux	MatroskaFileParser.hh	/^  MatroskaDemux* fOurDemux;$/;"	m	class:MatroskaFileParser
fOurFile	MatroskaFileParser.hh	/^  MatroskaFile& fOurFile;$/;"	m	class:MatroskaFileParser
fPresentationTimeOffset	MatroskaFileParser.hh	/^  double fPresentationTimeOffset;$/;"	m	class:MatroskaFileParser
fSavedCurOffsetInFile	MatroskaFileParser.hh	/^  u_int64_t fCurOffsetInFile, fSavedCurOffsetInFile, fLimitOffsetInFile;$/;"	m	class:MatroskaFileParser
fSavedCurOffsetWithinFrame	MatroskaFileParser.hh	/^  unsigned fCurOffsetWithinFrame, fSavedCurOffsetWithinFrame; \/\/ used if track->haveSubframes()$/;"	m	class:MatroskaFileParser
MatroskaFileServerDemux	MatroskaFileServerDemux.cpp	/^::MatroskaFileServerDemux(UsageEnvironment& env, char const* fileName,$/;"	f	class:MatroskaFileServerDemux
createNew	MatroskaFileServerDemux.cpp	/^::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:MatroskaFileServerDemux
newDemuxedTrack	MatroskaFileServerDemux.cpp	/^FramedSource* MatroskaFileServerDemux::newDemuxedTrack(unsigned clientSessionId, unsigned trackNumber) {$/;"	f	class:MatroskaFileServerDemux
newServerMediaSubsession	MatroskaFileServerDemux.cpp	/^::newServerMediaSubsession(unsigned& resultTrackNumber) {$/;"	f	class:MatroskaFileServerDemux
newServerMediaSubsession	MatroskaFileServerDemux.cpp	/^ServerMediaSubsession* MatroskaFileServerDemux::newServerMediaSubsession() {$/;"	f	class:MatroskaFileServerDemux
newServerMediaSubsessionByTrackNumber	MatroskaFileServerDemux.cpp	/^::newServerMediaSubsessionByTrackNumber(unsigned trackNumber) {$/;"	f	class:MatroskaFileServerDemux
onMatroskaFileCreation	MatroskaFileServerDemux.cpp	/^void MatroskaFileServerDemux::onMatroskaFileCreation(MatroskaFile* newFile) {$/;"	f	class:MatroskaFileServerDemux
onMatroskaFileCreation	MatroskaFileServerDemux.cpp	/^void MatroskaFileServerDemux::onMatroskaFileCreation(MatroskaFile* newFile, void* clientData) {$/;"	f	class:MatroskaFileServerDemux
~MatroskaFileServerDemux	MatroskaFileServerDemux.cpp	/^MatroskaFileServerDemux::~MatroskaFileServerDemux() {$/;"	f	class:MatroskaFileServerDemux
MatroskaFileServerMediaSubsession	MatroskaFileServerMediaSubsession.cpp	/^::MatroskaFileServerMediaSubsession(MatroskaFileServerDemux& demux, MatroskaTrack* track)$/;"	f	class:MatroskaFileServerMediaSubsession
createNew	MatroskaFileServerMediaSubsession.cpp	/^::createNew(MatroskaFileServerDemux& demux, MatroskaTrack* track) {$/;"	f	class:MatroskaFileServerMediaSubsession
createNewRTPSink	MatroskaFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock, unsigned char rtpPayloadTypeIfDynamic, FramedSource* \/*inputSource*\/) {$/;"	f	class:MatroskaFileServerMediaSubsession
createNewStreamSource	MatroskaFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:MatroskaFileServerMediaSubsession
duration	MatroskaFileServerMediaSubsession.cpp	/^float MatroskaFileServerMediaSubsession::duration() const { return fOurDemux.fileDuration(); }$/;"	f	class:MatroskaFileServerMediaSubsession
seekStreamSource	MatroskaFileServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double \/*streamDuration*\/, u_int64_t& \/*numBytes*\/) {$/;"	f	class:MatroskaFileServerMediaSubsession
~MatroskaFileServerMediaSubsession	MatroskaFileServerMediaSubsession.cpp	/^MatroskaFileServerMediaSubsession::~MatroskaFileServerMediaSubsession() {$/;"	f	class:MatroskaFileServerMediaSubsession
MatroskaFileServerMediaSubsession	MatroskaFileServerMediaSubsession.hh	/^class MatroskaFileServerMediaSubsession: public FileServerMediaSubsession {$/;"	c
_MATROSKA_FILE_SERVER_MEDIA_SUBSESSION_HH	MatroskaFileServerMediaSubsession.hh	23;"	d
fNumFiltersInFrontOfTrack	MatroskaFileServerMediaSubsession.hh	/^  unsigned fNumFiltersInFrontOfTrack;$/;"	m	class:MatroskaFileServerMediaSubsession
fOurDemux	MatroskaFileServerMediaSubsession.hh	/^  MatroskaFileServerDemux& fOurDemux;$/;"	m	class:MatroskaFileServerMediaSubsession
fTrack	MatroskaFileServerMediaSubsession.hh	/^  MatroskaTrack* fTrack;$/;"	m	class:MatroskaFileServerMediaSubsession
MediaLookupTable	Media.cpp	/^MediaLookupTable::MediaLookupTable(UsageEnvironment& env)$/;"	f	class:MediaLookupTable
Medium	Media.cpp	/^Medium::Medium(UsageEnvironment& env)$/;"	f	class:Medium
_Tables	Media.cpp	/^_Tables::_Tables(UsageEnvironment& env)$/;"	f	class:_Tables
addNew	Media.cpp	/^void MediaLookupTable::addNew(Medium* medium, char* mediumName) {$/;"	f	class:MediaLookupTable
close	Media.cpp	/^void Medium::close(Medium* medium) {$/;"	f	class:Medium
close	Media.cpp	/^void Medium::close(UsageEnvironment& env, char const* name) {$/;"	f	class:Medium
generateNewName	Media.cpp	/^void MediaLookupTable::generateNewName(char* mediumName,$/;"	f	class:MediaLookupTable
getOurTables	Media.cpp	/^_Tables* _Tables::getOurTables(UsageEnvironment& env, Boolean createIfNotPresent) {$/;"	f	class:_Tables
isMediaSession	Media.cpp	/^Boolean Medium::isMediaSession() const {$/;"	f	class:Medium
isRTCPInstance	Media.cpp	/^Boolean Medium::isRTCPInstance() const {$/;"	f	class:Medium
isRTSPClient	Media.cpp	/^Boolean Medium::isRTSPClient() const {$/;"	f	class:Medium
isRTSPServer	Media.cpp	/^Boolean Medium::isRTSPServer() const {$/;"	f	class:Medium
isServerMediaSession	Media.cpp	/^Boolean Medium::isServerMediaSession() const {$/;"	f	class:Medium
isSink	Media.cpp	/^Boolean Medium::isSink() const {$/;"	f	class:Medium
isSource	Media.cpp	/^Boolean Medium::isSource() const {$/;"	f	class:Medium
lookup	Media.cpp	/^Medium* MediaLookupTable::lookup(char const* name) const {$/;"	f	class:MediaLookupTable
lookupByName	Media.cpp	/^Boolean Medium::lookupByName(UsageEnvironment& env, char const* mediumName,$/;"	f	class:Medium
ourMedia	Media.cpp	/^MediaLookupTable* MediaLookupTable::ourMedia(UsageEnvironment& env) {$/;"	f	class:MediaLookupTable
reclaimIfPossible	Media.cpp	/^void _Tables::reclaimIfPossible() {$/;"	f	class:_Tables
remove	Media.cpp	/^void MediaLookupTable::remove(char const* name) {$/;"	f	class:MediaLookupTable
~MediaLookupTable	Media.cpp	/^MediaLookupTable::~MediaLookupTable() {$/;"	f	class:MediaLookupTable
~Medium	Media.cpp	/^Medium::~Medium() {$/;"	f	class:Medium
~_Tables	Media.cpp	/^_Tables::~_Tables() {$/;"	f	class:_Tables
MediaSession	MediaSession.cpp	/^MediaSession::MediaSession(UsageEnvironment& env)$/;"	f	class:MediaSession
MediaSubsession	MediaSession.cpp	/^MediaSubsession::MediaSubsession(MediaSession& parent)$/;"	f	class:MediaSubsession
MediaSubsessionIterator	MediaSession.cpp	/^MediaSubsessionIterator::MediaSubsessionIterator(MediaSession const& session)$/;"	f	class:MediaSubsessionIterator
SDPAttribute	MediaSession.cpp	/^SDPAttribute::SDPAttribute(char const* strValue, Boolean valueIsHexadecimal)$/;"	f	class:SDPAttribute
SDPAttribute	MediaSession.cpp	/^class SDPAttribute {$/;"	c	file:
absEndTime	MediaSession.cpp	/^char* MediaSession::absEndTime() const {$/;"	f	class:MediaSession
absEndTime	MediaSession.cpp	/^char* MediaSubsession::absEndTime() const {$/;"	f	class:MediaSubsession
absStartTime	MediaSession.cpp	/^char* MediaSession::absStartTime() const {$/;"	f	class:MediaSession
absStartTime	MediaSession.cpp	/^char* MediaSubsession::absStartTime() const {$/;"	f	class:MediaSubsession
addFilter	MediaSession.cpp	/^void MediaSubsession::addFilter(FramedFilter* filter){$/;"	f	class:MediaSubsession
attrVal_int	MediaSession.cpp	/^unsigned MediaSubsession::attrVal_int(char const* attrName) const {$/;"	f	class:MediaSubsession
attrVal_str	MediaSession.cpp	/^char const* MediaSubsession::attrVal_str(char const* attrName) const {$/;"	f	class:MediaSubsession
attrVal_strToLower	MediaSession.cpp	/^char const* MediaSubsession::attrVal_strToLower(char const* attrName) const {$/;"	f	class:MediaSubsession
connectionEndpointAddress	MediaSession.cpp	/^netAddressBits MediaSubsession::connectionEndpointAddress() const {$/;"	f	class:MediaSubsession
createNew	MediaSession.cpp	/^MediaSession* MediaSession::createNew(UsageEnvironment& env,$/;"	f	class:MediaSession
createNewMediaSubsession	MediaSession.cpp	/^MediaSubsession* MediaSession::createNewMediaSubsession() {$/;"	f	class:MediaSession
createSourceObjects	MediaSession.cpp	/^Boolean MediaSubsession::createSourceObjects(int useSpecialRTPoffset) {$/;"	f	class:MediaSubsession
deInitiate	MediaSession.cpp	/^void MediaSubsession::deInitiate() {$/;"	f	class:MediaSubsession
fIntValue	MediaSession.cpp	/^  int fIntValue;$/;"	m	class:SDPAttribute	file:
fStrValue	MediaSession.cpp	/^  char* fStrValue;$/;"	m	class:SDPAttribute	file:
fStrValueToLower	MediaSession.cpp	/^  char* fStrValueToLower;$/;"	m	class:SDPAttribute	file:
fValueIsHexadecimal	MediaSession.cpp	/^  Boolean fValueIsHexadecimal;$/;"	m	class:SDPAttribute	file:
fmtp_config	MediaSession.cpp	/^char const* MediaSubsession::fmtp_config() const {$/;"	f	class:MediaSubsession
getNormalPlayTime	MediaSession.cpp	/^double MediaSubsession::getNormalPlayTime(struct timeval const& presentationTime) {$/;"	f	class:MediaSubsession
guessRTPTimestampFrequency	MediaSession.cpp	/^unsigned MediaSession::guessRTPTimestampFrequency(char const* mediumName,$/;"	f	class:MediaSession
honorSDPPortChoice	MediaSession.cpp	/^static Boolean const honorSDPPortChoice$/;"	v	file:
initializeWithSDP	MediaSession.cpp	/^Boolean MediaSession::initializeWithSDP(char const* sdpDescription) {$/;"	f	class:MediaSession
initiate	MediaSession.cpp	/^Boolean MediaSubsession::initiate(int useSpecialRTPoffset) {$/;"	f	class:MediaSubsession
initiateByMediaType	MediaSession.cpp	/^::initiateByMediaType(char const* mimeType,$/;"	f	class:MediaSession
intValue	MediaSession.cpp	/^  int intValue() const { return fIntValue; }$/;"	f	class:SDPAttribute
isMediaSession	MediaSession.cpp	/^Boolean MediaSession::isMediaSession() const {$/;"	f	class:MediaSession
lookupByName	MediaSession.cpp	/^Boolean MediaSession::lookupByName(UsageEnvironment& env,$/;"	f	class:MediaSession
lookupPayloadFormat	MediaSession.cpp	/^char* MediaSession::lookupPayloadFormat(unsigned char rtpPayloadType,$/;"	f	class:MediaSession
next	MediaSession.cpp	/^MediaSubsession* MediaSubsessionIterator::next() {$/;"	f	class:MediaSubsessionIterator
parseCLine	MediaSession.cpp	/^static char* parseCLine(char const* sdpLine) {$/;"	f	file:
parseRangeAttribute	MediaSession.cpp	/^static Boolean parseRangeAttribute(char const* sdpLine, char*& absStartTime, char*& absEndTime) {$/;"	f	file:
parseRangeAttribute	MediaSession.cpp	/^static Boolean parseRangeAttribute(char const* sdpLine, double& startTime, double& endTime) {$/;"	f	file:
parseSDPAttribute_control	MediaSession.cpp	/^Boolean MediaSession::parseSDPAttribute_control(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPAttribute_control	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_control(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_fmtp	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_fmtp(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_framerate	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_framerate(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_range	MediaSession.cpp	/^Boolean MediaSession::parseSDPAttribute_range(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPAttribute_range	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_range(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_rtcpmux	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_rtcpmux(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_rtpmap	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_rtpmap(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_source_filter	MediaSession.cpp	/^::parseSDPAttribute_source_filter(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPAttribute_source_filter	MediaSession.cpp	/^::parseSDPAttribute_source_filter(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPAttribute_type	MediaSession.cpp	/^Boolean MediaSession::parseSDPAttribute_type(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPAttribute_x_dimensions	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPAttribute_x_dimensions(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPLine	MediaSession.cpp	/^Boolean MediaSession::parseSDPLine(char const* inputLine,$/;"	f	class:MediaSession
parseSDPLine_b	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPLine_b(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPLine_c	MediaSession.cpp	/^Boolean MediaSession::parseSDPLine_c(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPLine_c	MediaSession.cpp	/^Boolean MediaSubsession::parseSDPLine_c(char const* sdpLine) {$/;"	f	class:MediaSubsession
parseSDPLine_i	MediaSession.cpp	/^Boolean MediaSession::parseSDPLine_i(char const* sdpLine) {$/;"	f	class:MediaSession
parseSDPLine_s	MediaSession.cpp	/^Boolean MediaSession::parseSDPLine_s(char const* sdpLine) {$/;"	f	class:MediaSession
parseSourceFilterAttribute	MediaSession.cpp	/^static Boolean parseSourceFilterAttribute(char const* sdpLine,$/;"	f	file:
playEndTime	MediaSession.cpp	/^double MediaSubsession::playEndTime() const {$/;"	f	class:MediaSubsession
playStartTime	MediaSession.cpp	/^double MediaSubsession::playStartTime() const {$/;"	f	class:MediaSubsession
reset	MediaSession.cpp	/^void MediaSubsessionIterator::reset() {$/;"	f	class:MediaSubsessionIterator
setAttribute	MediaSession.cpp	/^::setAttribute(char const* name, char const* value, Boolean valueIsHexadecimal) {$/;"	f	class:MediaSubsession
setClientPortNum	MediaSession.cpp	/^Boolean MediaSubsession::setClientPortNum(unsigned short portNum) {$/;"	f	class:MediaSubsession
setDestinations	MediaSession.cpp	/^void MediaSubsession::setDestinations(netAddressBits defaultDestAddress) {$/;"	f	class:MediaSubsession
setSessionId	MediaSession.cpp	/^void MediaSubsession::setSessionId(char const* sessionId) {$/;"	f	class:MediaSubsession
strValue	MediaSession.cpp	/^  char const* strValue() const { return fStrValue; }$/;"	f	class:SDPAttribute
strValueToLower	MediaSession.cpp	/^  char const* strValueToLower() const { return fStrValueToLower; }$/;"	f	class:SDPAttribute
valueIsHexadecimal	MediaSession.cpp	/^  Boolean valueIsHexadecimal() const { return fValueIsHexadecimal; }$/;"	f	class:SDPAttribute
~MediaSession	MediaSession.cpp	/^MediaSession::~MediaSession() {$/;"	f	class:MediaSession
~MediaSubsession	MediaSession.cpp	/^MediaSubsession::~MediaSubsession() {$/;"	f	class:MediaSubsession
~MediaSubsessionIterator	MediaSession.cpp	/^MediaSubsessionIterator::~MediaSubsessionIterator() {$/;"	f	class:MediaSubsessionIterator
~SDPAttribute	MediaSession.cpp	/^SDPAttribute::~SDPAttribute() {$/;"	f	class:SDPAttribute
MediaSink	MediaSink.cpp	/^MediaSink::MediaSink(UsageEnvironment& env)$/;"	f	class:MediaSink
OutPacketBuffer	MediaSink.cpp	/^::OutPacketBuffer(unsigned preferredPacketSize, unsigned maxPacketSize, unsigned maxBufferSize)$/;"	f	class:OutPacketBuffer
adjustPacketStart	MediaSink.cpp	/^void OutPacketBuffer::adjustPacketStart(unsigned numBytes) {$/;"	f	class:OutPacketBuffer
enqueue	MediaSink.cpp	/^void OutPacketBuffer::enqueue(unsigned char const* from, unsigned numBytes) {$/;"	f	class:OutPacketBuffer
enqueueWord	MediaSink.cpp	/^void OutPacketBuffer::enqueueWord(u_int32_t word) {$/;"	f	class:OutPacketBuffer
extract	MediaSink.cpp	/^void OutPacketBuffer::extract(unsigned char* to, unsigned numBytes,$/;"	f	class:OutPacketBuffer
extractWord	MediaSink.cpp	/^u_int32_t OutPacketBuffer::extractWord(unsigned fromPosition) {$/;"	f	class:OutPacketBuffer
insert	MediaSink.cpp	/^void OutPacketBuffer::insert(unsigned char const* from, unsigned numBytes,$/;"	f	class:OutPacketBuffer
insertWord	MediaSink.cpp	/^void OutPacketBuffer::insertWord(u_int32_t word, unsigned toPosition) {$/;"	f	class:OutPacketBuffer
isRTPSink	MediaSink.cpp	/^Boolean MediaSink::isRTPSink() const {$/;"	f	class:MediaSink
isSink	MediaSink.cpp	/^Boolean MediaSink::isSink() const {$/;"	f	class:MediaSink
lookupByName	MediaSink.cpp	/^Boolean MediaSink::lookupByName(UsageEnvironment& env, char const* sinkName,$/;"	f	class:MediaSink
maxSize	MediaSink.cpp	/^unsigned OutPacketBuffer::maxSize = 60000; \/\/ by default$/;"	m	class:OutPacketBuffer	file:
onSourceClosure	MediaSink.cpp	/^void MediaSink::onSourceClosure() {$/;"	f	class:MediaSink
onSourceClosure	MediaSink.cpp	/^void MediaSink::onSourceClosure(void* clientData) {$/;"	f	class:MediaSink
resetPacketStart	MediaSink.cpp	/^void OutPacketBuffer::resetPacketStart() {$/;"	f	class:OutPacketBuffer
setOverflowData	MediaSink.cpp	/^::setOverflowData(unsigned overflowDataOffset,$/;"	f	class:OutPacketBuffer
skipBytes	MediaSink.cpp	/^void OutPacketBuffer::skipBytes(unsigned numBytes) {$/;"	f	class:OutPacketBuffer
sourceIsCompatibleWithUs	MediaSink.cpp	/^Boolean MediaSink::sourceIsCompatibleWithUs(MediaSource& source) {$/;"	f	class:MediaSink
startPlaying	MediaSink.cpp	/^Boolean MediaSink::startPlaying(MediaSource& source,$/;"	f	class:MediaSink
stopPlaying	MediaSink.cpp	/^void MediaSink::stopPlaying() {$/;"	f	class:MediaSink
useOverflowData	MediaSink.cpp	/^void OutPacketBuffer::useOverflowData() {$/;"	f	class:OutPacketBuffer
~MediaSink	MediaSink.cpp	/^MediaSink::~MediaSink() {$/;"	f	class:MediaSink
~OutPacketBuffer	MediaSink.cpp	/^OutPacketBuffer::~OutPacketBuffer() {$/;"	f	class:OutPacketBuffer
MIMEtype	MediaSource.cpp	/^char const* MediaSource::MIMEtype() const {$/;"	f	class:MediaSource
MediaSource	MediaSource.cpp	/^MediaSource::MediaSource(UsageEnvironment& env)$/;"	f	class:MediaSource
getAttributes	MediaSource.cpp	/^void MediaSource::getAttributes() const {$/;"	f	class:MediaSource
isAMRAudioSource	MediaSource.cpp	/^Boolean MediaSource::isAMRAudioSource() const {$/;"	f	class:MediaSource
isDVVideoStreamFramer	MediaSource.cpp	/^Boolean MediaSource::isDVVideoStreamFramer() const {$/;"	f	class:MediaSource
isFramedSource	MediaSource.cpp	/^Boolean MediaSource::isFramedSource() const {$/;"	f	class:MediaSource
isH264VideoStreamFramer	MediaSource.cpp	/^Boolean MediaSource::isH264VideoStreamFramer() const {$/;"	f	class:MediaSource
isH265VideoStreamFramer	MediaSource.cpp	/^Boolean MediaSource::isH265VideoStreamFramer() const {$/;"	f	class:MediaSource
isJPEGVideoSource	MediaSource.cpp	/^Boolean MediaSource::isJPEGVideoSource() const {$/;"	f	class:MediaSource
isMPEG1or2VideoStreamFramer	MediaSource.cpp	/^Boolean MediaSource::isMPEG1or2VideoStreamFramer() const {$/;"	f	class:MediaSource
isMPEG4VideoStreamFramer	MediaSource.cpp	/^Boolean MediaSource::isMPEG4VideoStreamFramer() const {$/;"	f	class:MediaSource
isRTPSource	MediaSource.cpp	/^Boolean MediaSource::isRTPSource() const {$/;"	f	class:MediaSource
isSource	MediaSource.cpp	/^Boolean MediaSource::isSource() const {$/;"	f	class:MediaSource
lookupByName	MediaSource.cpp	/^Boolean MediaSource::lookupByName(UsageEnvironment& env,$/;"	f	class:MediaSource
~MediaSource	MediaSource.cpp	/^MediaSource::~MediaSource() {$/;"	f	class:MediaSource
MultiFramedRTPSink	MultiFramedRTPSink.cpp	/^MultiFramedRTPSink::MultiFramedRTPSink(UsageEnvironment& env,$/;"	f	class:MultiFramedRTPSink
afterGettingFrame	MultiFramedRTPSink.cpp	/^::afterGettingFrame(void* clientData, unsigned numBytesRead,$/;"	f	class:MultiFramedRTPSink
afterGettingFrame1	MultiFramedRTPSink.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:MultiFramedRTPSink
allowFragmentationAfterStart	MultiFramedRTPSink.cpp	/^Boolean MultiFramedRTPSink::allowFragmentationAfterStart() const {$/;"	f	class:MultiFramedRTPSink
allowOtherFramesAfterLastFragment	MultiFramedRTPSink.cpp	/^Boolean MultiFramedRTPSink::allowOtherFramesAfterLastFragment() const {$/;"	f	class:MultiFramedRTPSink
buildAndSendPacket	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::buildAndSendPacket(Boolean isFirstPacket) {$/;"	f	class:MultiFramedRTPSink
computeOverflowForNewFrame	MultiFramedRTPSink.cpp	/^unsigned MultiFramedRTPSink::computeOverflowForNewFrame(unsigned newFrameSize) const {$/;"	f	class:MultiFramedRTPSink
continuePlaying	MultiFramedRTPSink.cpp	/^Boolean MultiFramedRTPSink::continuePlaying() {$/;"	f	class:MultiFramedRTPSink
doSpecialFrameHandling	MultiFramedRTPSink.cpp	/^::doSpecialFrameHandling(unsigned \/*fragmentationOffset*\/,$/;"	f	class:MultiFramedRTPSink
frameCanAppearAfterPacketStart	MultiFramedRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:MultiFramedRTPSink
frameSpecificHeaderSize	MultiFramedRTPSink.cpp	/^unsigned MultiFramedRTPSink::frameSpecificHeaderSize() const {$/;"	f	class:MultiFramedRTPSink
isTooBigForAPacket	MultiFramedRTPSink.cpp	/^Boolean MultiFramedRTPSink::isTooBigForAPacket(unsigned numBytes) const {$/;"	f	class:MultiFramedRTPSink
ourHandleClosure	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::ourHandleClosure(void* clientData) {$/;"	f	class:MultiFramedRTPSink
packFrame	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::packFrame() {$/;"	f	class:MultiFramedRTPSink
rtpHeaderSize	MultiFramedRTPSink.cpp	/^static unsigned const rtpHeaderSize = 12;$/;"	v	file:
sendNext	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::sendNext(void* firstArg) {$/;"	f	class:MultiFramedRTPSink
sendPacketIfNecessary	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::sendPacketIfNecessary() {$/;"	f	class:MultiFramedRTPSink
setFramePadding	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setFramePadding(unsigned numPaddingBytes) {$/;"	f	class:MultiFramedRTPSink
setFrameSpecificHeaderBytes	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setFrameSpecificHeaderBytes(unsigned char const* bytes,$/;"	f	class:MultiFramedRTPSink
setFrameSpecificHeaderWord	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setFrameSpecificHeaderWord(unsigned word,$/;"	f	class:MultiFramedRTPSink
setMarkerBit	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setMarkerBit() {$/;"	f	class:MultiFramedRTPSink
setPacketSizes	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setPacketSizes(unsigned preferredPacketSize,$/;"	f	class:MultiFramedRTPSink
setSpecialHeaderBytes	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setSpecialHeaderBytes(unsigned char const* bytes,$/;"	f	class:MultiFramedRTPSink
setSpecialHeaderWord	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setSpecialHeaderWord(unsigned word,$/;"	f	class:MultiFramedRTPSink
setTimestamp	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::setTimestamp(struct timeval framePresentationTime) {$/;"	f	class:MultiFramedRTPSink
specialHeaderSize	MultiFramedRTPSink.cpp	/^unsigned MultiFramedRTPSink::specialHeaderSize() const {$/;"	f	class:MultiFramedRTPSink
stopPlaying	MultiFramedRTPSink.cpp	/^void MultiFramedRTPSink::stopPlaying() {$/;"	f	class:MultiFramedRTPSink
~MultiFramedRTPSink	MultiFramedRTPSink.cpp	/^MultiFramedRTPSink::~MultiFramedRTPSink() {$/;"	f	class:MultiFramedRTPSink
ADVANCE	MultiFramedRTPSource.cpp	223;"	d	file:
BufferedPacket	MultiFramedRTPSource.cpp	/^BufferedPacket::BufferedPacket()$/;"	f	class:BufferedPacket
BufferedPacketFactory	MultiFramedRTPSource.cpp	/^BufferedPacketFactory::BufferedPacketFactory() {$/;"	f	class:BufferedPacketFactory
MAX_PACKET_SIZE	MultiFramedRTPSource.cpp	345;"	d	file:
MultiFramedRTPSource	MultiFramedRTPSource.cpp	/^::MultiFramedRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:MultiFramedRTPSource
ReorderingPacketBuffer	MultiFramedRTPSource.cpp	/^::ReorderingPacketBuffer(BufferedPacketFactory* packetFactory)$/;"	f	class:ReorderingPacketBuffer
ReorderingPacketBuffer	MultiFramedRTPSource.cpp	/^class ReorderingPacketBuffer {$/;"	c	file:
appendData	MultiFramedRTPSource.cpp	/^void BufferedPacket::appendData(unsigned char* newData, unsigned numBytes) {$/;"	f	class:BufferedPacket
assignMiscParams	MultiFramedRTPSource.cpp	/^::assignMiscParams(unsigned short rtpSeqNo, unsigned rtpTimestamp,$/;"	f	class:BufferedPacket
createNewPacket	MultiFramedRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* \/*ourSource*\/) {$/;"	f	class:BufferedPacketFactory
doGetNextFrame	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::doGetNextFrame() {$/;"	f	class:MultiFramedRTPSource
doGetNextFrame1	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::doGetNextFrame1() {$/;"	f	class:MultiFramedRTPSource
doStopGettingFrames	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::doStopGettingFrames() {$/;"	f	class:MultiFramedRTPSource
fHaveSeenFirstPacket	MultiFramedRTPSource.cpp	/^  Boolean fHaveSeenFirstPacket; \/\/ used to set initial "fNextExpectedSeqNo"$/;"	m	class:ReorderingPacketBuffer	file:
fHeadPacket	MultiFramedRTPSource.cpp	/^  BufferedPacket* fHeadPacket;$/;"	m	class:ReorderingPacketBuffer	file:
fNextExpectedSeqNo	MultiFramedRTPSource.cpp	/^  unsigned short fNextExpectedSeqNo;$/;"	m	class:ReorderingPacketBuffer	file:
fPacketFactory	MultiFramedRTPSource.cpp	/^  BufferedPacketFactory* fPacketFactory;$/;"	m	class:ReorderingPacketBuffer	file:
fSavedPacket	MultiFramedRTPSource.cpp	/^  BufferedPacket* fSavedPacket;$/;"	m	class:ReorderingPacketBuffer	file:
fSavedPacketFree	MultiFramedRTPSource.cpp	/^  Boolean fSavedPacketFree;$/;"	m	class:ReorderingPacketBuffer	file:
fTailPacket	MultiFramedRTPSource.cpp	/^  BufferedPacket* fTailPacket;$/;"	m	class:ReorderingPacketBuffer	file:
fThresholdTime	MultiFramedRTPSource.cpp	/^  unsigned fThresholdTime; \/\/ uSeconds$/;"	m	class:ReorderingPacketBuffer	file:
fillInData	MultiFramedRTPSource.cpp	/^Boolean BufferedPacket::fillInData(RTPInterface& rtpInterface, struct sockaddr_in& fromAddress,$/;"	f	class:BufferedPacket
freePacket	MultiFramedRTPSource.cpp	/^  void freePacket(BufferedPacket* packet) {$/;"	f	class:ReorderingPacketBuffer
getFreePacket	MultiFramedRTPSource.cpp	/^BufferedPacket* ReorderingPacketBuffer::getFreePacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:ReorderingPacketBuffer
getNextCompletedPacket	MultiFramedRTPSource.cpp	/^::getNextCompletedPacket(Boolean& packetLossPreceded) {$/;"	f	class:ReorderingPacketBuffer
getNextEnclosedFrameParameters	MultiFramedRTPSource.cpp	/^::getNextEnclosedFrameParameters(unsigned char*& framePtr, unsigned dataSize,$/;"	f	class:BufferedPacket
isEmpty	MultiFramedRTPSource.cpp	/^  Boolean isEmpty() const { return fHeadPacket == NULL; }$/;"	f	class:ReorderingPacketBuffer
networkReadHandler	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::networkReadHandler(MultiFramedRTPSource* source, int \/*mask*\/) {$/;"	f	class:MultiFramedRTPSource
networkReadHandler1	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::networkReadHandler1() {$/;"	f	class:MultiFramedRTPSource
nextEnclosedFrameSize	MultiFramedRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& \/*framePtr*\/, unsigned dataSize) {$/;"	f	class:BufferedPacket
packetIsUsableInJitterCalculation	MultiFramedRTPSource.cpp	/^::packetIsUsableInJitterCalculation(unsigned char* \/*packet*\/,$/;"	f	class:MultiFramedRTPSource
processSpecialHeader	MultiFramedRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* \/*packet*\/,$/;"	f	class:MultiFramedRTPSource
releaseUsedPacket	MultiFramedRTPSource.cpp	/^void ReorderingPacketBuffer::releaseUsedPacket(BufferedPacket* packet) {$/;"	f	class:ReorderingPacketBuffer
removePadding	MultiFramedRTPSource.cpp	/^void BufferedPacket::removePadding(unsigned numBytes) {$/;"	f	class:BufferedPacket
reset	MultiFramedRTPSource.cpp	/^void BufferedPacket::reset() {$/;"	f	class:BufferedPacket
reset	MultiFramedRTPSource.cpp	/^void MultiFramedRTPSource::reset() {$/;"	f	class:MultiFramedRTPSource
reset	MultiFramedRTPSource.cpp	/^void ReorderingPacketBuffer::reset() {$/;"	f	class:ReorderingPacketBuffer
resetHaveSeenFirstPacket	MultiFramedRTPSource.cpp	/^  void resetHaveSeenFirstPacket() { fHaveSeenFirstPacket = False; }$/;"	f	class:ReorderingPacketBuffer
setPacketReorderingThresholdTime	MultiFramedRTPSource.cpp	/^::setPacketReorderingThresholdTime(unsigned uSeconds) {$/;"	f	class:MultiFramedRTPSource
setThresholdTime	MultiFramedRTPSource.cpp	/^  void setThresholdTime(unsigned uSeconds) { fThresholdTime = uSeconds; }$/;"	f	class:ReorderingPacketBuffer
skip	MultiFramedRTPSource.cpp	/^void BufferedPacket::skip(unsigned numBytes) {$/;"	f	class:BufferedPacket
storePacket	MultiFramedRTPSource.cpp	/^Boolean ReorderingPacketBuffer::storePacket(BufferedPacket* bPacket) {$/;"	f	class:ReorderingPacketBuffer
use	MultiFramedRTPSource.cpp	/^void BufferedPacket::use(unsigned char* to, unsigned toSize,$/;"	f	class:BufferedPacket
~BufferedPacket	MultiFramedRTPSource.cpp	/^BufferedPacket::~BufferedPacket() {$/;"	f	class:BufferedPacket
~BufferedPacketFactory	MultiFramedRTPSource.cpp	/^BufferedPacketFactory::~BufferedPacketFactory() {$/;"	f	class:BufferedPacketFactory
~MultiFramedRTPSource	MultiFramedRTPSource.cpp	/^MultiFramedRTPSource::~MultiFramedRTPSource() {$/;"	f	class:MultiFramedRTPSource
~ReorderingPacketBuffer	MultiFramedRTPSource.cpp	/^ReorderingPacketBuffer::~ReorderingPacketBuffer() {$/;"	f	class:ReorderingPacketBuffer
MIMEtype	OggDemuxedTrack.cpp	/^char const* OggDemuxedTrack::MIMEtype() const {$/;"	f	class:OggDemuxedTrack
OggDemuxedTrack	OggDemuxedTrack.cpp	/^OggDemuxedTrack::OggDemuxedTrack(UsageEnvironment& env, unsigned trackNumber, OggDemux& sourceDemux)$/;"	f	class:OggDemuxedTrack
doGetNextFrame	OggDemuxedTrack.cpp	/^void OggDemuxedTrack::doGetNextFrame() {$/;"	f	class:OggDemuxedTrack
~OggDemuxedTrack	OggDemuxedTrack.cpp	/^OggDemuxedTrack::~OggDemuxedTrack() {$/;"	f	class:OggDemuxedTrack
OggDemuxedTrack	OggDemuxedTrack.hh	/^class OggDemuxedTrack: public FramedSource {$/;"	c
_OGG_DEMUXED_TRACK_HH	OggDemuxedTrack.hh	22;"	d
durationInMicroseconds	OggDemuxedTrack.hh	/^  unsigned& durationInMicroseconds() { return fDurationInMicroseconds; }$/;"	f	class:OggDemuxedTrack
fCurrentPageIsContinuation	OggDemuxedTrack.hh	/^  Boolean fCurrentPageIsContinuation;$/;"	m	class:OggDemuxedTrack
fNextPresentationTime	OggDemuxedTrack.hh	/^  struct timeval fNextPresentationTime;$/;"	m	class:OggDemuxedTrack	typeref:struct:OggDemuxedTrack::timeval
fOurSourceDemux	OggDemuxedTrack.hh	/^  OggDemux& fOurSourceDemux;$/;"	m	class:OggDemuxedTrack
fOurTrackNumber	OggDemuxedTrack.hh	/^  unsigned fOurTrackNumber;$/;"	m	class:OggDemuxedTrack
frameSize	OggDemuxedTrack.hh	/^  unsigned& frameSize() { return fFrameSize; }$/;"	f	class:OggDemuxedTrack
maxSize	OggDemuxedTrack.hh	/^  unsigned& maxSize() { return fMaxSize; }$/;"	f	class:OggDemuxedTrack
nextPresentationTime	OggDemuxedTrack.hh	/^  struct timeval& nextPresentationTime() { return fNextPresentationTime; }$/;"	f	class:OggDemuxedTrack
numTruncatedBytes	OggDemuxedTrack.hh	/^  unsigned& numTruncatedBytes() { return fNumTruncatedBytes; }$/;"	f	class:OggDemuxedTrack
presentationTime	OggDemuxedTrack.hh	/^  struct timeval& presentationTime() { return fPresentationTime; }$/;"	f	class:OggDemuxedTrack
to	OggDemuxedTrack.hh	/^  unsigned char*& to() { return fTo; }$/;"	f	class:OggDemuxedTrack
OggDemux	OggFile.cpp	/^OggDemux::OggDemux(OggFile& ourFile)$/;"	f	class:OggDemux
OggFile	OggFile.cpp	/^OggFile::OggFile(UsageEnvironment& env, char const* fileName,$/;"	f	class:OggFile
OggTrack	OggFile.cpp	/^OggTrack::OggTrack()$/;"	f	class:OggTrack
OggTrackTable	OggFile.cpp	/^OggTrackTable::OggTrackTable()$/;"	f	class:OggTrackTable
OggTrackTable	OggFile.cpp	/^class OggTrackTable {$/;"	c	file:
OggTrackTableIterator	OggFile.cpp	/^OggTrackTableIterator::OggTrackTableIterator(OggTrackTable& ourTable) {$/;"	f	class:OggTrackTableIterator
add	OggFile.cpp	/^void OggTrackTable::add(OggTrack* newTrack) {$/;"	f	class:OggTrackTable
addTrack	OggFile.cpp	/^void OggFile::addTrack(OggTrack* newTrack) {$/;"	f	class:OggFile
continueReading	OggFile.cpp	/^void OggDemux::continueReading() {$/;"	f	class:OggDemux
createNew	OggFile.cpp	/^void OggFile::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:OggFile
createRTPSinkForTrackNumber	OggFile.cpp	/^::createRTPSinkForTrackNumber(u_int32_t trackNumber, Groupsock* rtpGroupsock,$/;"	f	class:OggFile
createSourceForStreaming	OggFile.cpp	/^::createSourceForStreaming(FramedSource* baseSource, u_int32_t trackNumber,$/;"	f	class:OggFile
fTable	OggFile.cpp	/^  HashTable* fTable;$/;"	m	class:OggTrackTable	file:
handleEndOfBosPageParsing	OggFile.cpp	/^void OggFile::handleEndOfBosPageParsing() {$/;"	f	class:OggFile
handleEndOfBosPageParsing	OggFile.cpp	/^void OggFile::handleEndOfBosPageParsing(void* clientData) {$/;"	f	class:OggFile
handleEndOfFile	OggFile.cpp	/^void OggDemux::handleEndOfFile() {$/;"	f	class:OggDemux
handleEndOfFile	OggFile.cpp	/^void OggDemux::handleEndOfFile(void* clientData) {$/;"	f	class:OggDemux
lookup	OggFile.cpp	/^OggTrack* OggFile::lookup(u_int32_t trackNumber) {$/;"	f	class:OggFile
lookup	OggFile.cpp	/^OggTrack* OggTrackTable::lookup(u_int32_t trackNumber) {$/;"	f	class:OggTrackTable
lookupDemuxedTrack	OggFile.cpp	/^OggDemuxedTrack* OggDemux::lookupDemuxedTrack(u_int32_t trackNumber) {$/;"	f	class:OggDemux
newDemux	OggFile.cpp	/^OggDemux* OggFile::newDemux() {$/;"	f	class:OggFile
newDemuxedTrack	OggFile.cpp	/^FramedSource* OggDemux::newDemuxedTrack(u_int32_t& resultTrackNumber) {$/;"	f	class:OggDemux
newDemuxedTrackByTrackNumber	OggFile.cpp	/^FramedSource* OggDemux::newDemuxedTrackByTrackNumber(unsigned trackNumber) {$/;"	f	class:OggDemux
next	OggFile.cpp	/^OggTrack* OggTrackTableIterator::next() {$/;"	f	class:OggTrackTableIterator
numTracks	OggFile.cpp	/^unsigned OggFile::numTracks() const {$/;"	f	class:OggFile
numTracks	OggFile.cpp	/^unsigned OggTrackTable::numTracks() const { return fTable->numEntries(); }$/;"	f	class:OggTrackTable
removeDemux	OggFile.cpp	/^void OggFile::removeDemux(OggDemux* demux) {$/;"	f	class:OggFile
removeTrack	OggFile.cpp	/^void OggDemux::removeTrack(u_int32_t trackNumber) {$/;"	f	class:OggDemux
~OggDemux	OggFile.cpp	/^OggDemux::~OggDemux() {$/;"	f	class:OggDemux
~OggFile	OggFile.cpp	/^OggFile::~OggFile() {$/;"	f	class:OggFile
~OggTrack	OggFile.cpp	/^OggTrack::~OggTrack() {$/;"	f	class:OggTrack
~OggTrackTable	OggFile.cpp	/^OggTrackTable::~OggTrackTable() {$/;"	f	class:OggTrackTable
~OggTrackTableIterator	OggFile.cpp	/^OggTrackTableIterator::~OggTrackTableIterator() {$/;"	f	class:OggTrackTableIterator
CHECK_PTR	OggFileParser.cpp	639;"	d	file:
LEBitVector	OggFileParser.cpp	/^  LEBitVector(u_int8_t const* p, unsigned numBytes)$/;"	f	class:LEBitVector
LEBitVector	OggFileParser.cpp	/^class LEBitVector {$/;"	c	file:
OggFileParser	OggFileParser.cpp	/^OggFileParser::OggFileParser(OggFile& ourFile, FramedSource* inputSource,$/;"	f	class:OggFileParser
PacketSizeTable	OggFileParser.cpp	/^PacketSizeTable::PacketSizeTable(unsigned number_page_segments)$/;"	f	class:PacketSizeTable
blocksizeFromExponent	OggFileParser.cpp	/^static unsigned blocksizeFromExponent(unsigned exponent) {$/;"	f	file:
byteSwap	OggFileParser.cpp	/^static u_int32_t byteSwap(u_int32_t x) {$/;"	f	file:
continueParsing	OggFileParser.cpp	/^void OggFileParser::continueParsing() {$/;"	f	class:OggFileParser
continueParsing	OggFileParser.cpp	/^void OggFileParser::continueParsing(void* clientData, unsigned char* ptr, unsigned size, struct timeval presentationTime) {$/;"	f	class:OggFileParser
deliverPacketWithinPage	OggFileParser.cpp	/^Boolean OggFileParser::deliverPacketWithinPage() {$/;"	f	class:OggFileParser
fEnd	OggFileParser.cpp	/^  u_int8_t const* fEnd;$/;"	m	class:LEBitVector	file:
fNumBitsRemainingInCurrentByte	OggFileParser.cpp	/^  unsigned fNumBitsRemainingInCurrentByte; \/\/ 1..8$/;"	m	class:LEBitVector	file:
fPtr	OggFileParser.cpp	/^  u_int8_t const* fPtr;$/;"	m	class:LEBitVector	file:
getBits	OggFileParser.cpp	/^  u_int32_t getBits(unsigned numBits\/*<=32*\/) {$/;"	f	class:LEBitVector
ilog	OggFileParser.cpp	/^static unsigned ilog(int n) {$/;"	f	file:
lookup1_values	OggFileParser.cpp	/^static unsigned lookup1_values(unsigned codebook_entries, unsigned codebook_dimensions) {$/;"	f	file:
noMoreBits	OggFileParser.cpp	/^  Boolean noMoreBits() const { return fPtr >= fEnd; }$/;"	f	class:LEBitVector
numBitsRemaining	OggFileParser.cpp	/^  unsigned numBitsRemaining() { return (fEnd-fPtr-1)*8 + fNumBitsRemainingInCurrentByte; }$/;"	f	class:LEBitVector
parse	OggFileParser.cpp	/^Boolean OggFileParser::parse() {$/;"	f	class:OggFileParser
parseAndDeliverPage	OggFileParser.cpp	/^Boolean OggFileParser::parseAndDeliverPage() {$/;"	f	class:OggFileParser
parseAndDeliverPages	OggFileParser.cpp	/^void OggFileParser::parseAndDeliverPages() {$/;"	f	class:OggFileParser
parseInitialPage	OggFileParser.cpp	/^u_int8_t OggFileParser::parseInitialPage() {$/;"	f	class:OggFileParser
parseStartOfFile	OggFileParser.cpp	/^Boolean OggFileParser::parseStartOfFile() {$/;"	f	class:OggFileParser
parseStartOfPage	OggFileParser.cpp	/^void OggFileParser::parseStartOfPage(u_int8_t& header_type_flag,$/;"	f	class:OggFileParser
parseVorbisSetupHeader	OggFileParser.cpp	/^static Boolean parseVorbisSetupHeader(OggTrack* track, u_int8_t const* p, unsigned headerSize) {$/;"	f	file:
parseVorbisSetup_codebook	OggFileParser.cpp	/^static Boolean parseVorbisSetup_codebook(LEBitVector& bv) {$/;"	f	file:
parseVorbisSetup_codebooks	OggFileParser.cpp	/^static Boolean parseVorbisSetup_codebooks(LEBitVector& bv) {$/;"	f	file:
parseVorbisSetup_floors	OggFileParser.cpp	/^static Boolean parseVorbisSetup_floors(LEBitVector& bv) {$/;"	f	file:
parseVorbisSetup_mappings	OggFileParser.cpp	/^static Boolean parseVorbisSetup_mappings(LEBitVector& bv, unsigned audio_channels) {$/;"	f	file:
parseVorbisSetup_modes	OggFileParser.cpp	/^static Boolean parseVorbisSetup_modes(LEBitVector& bv, OggTrack* track) {$/;"	f	file:
parseVorbisSetup_residues	OggFileParser.cpp	/^static Boolean parseVorbisSetup_residues(LEBitVector& bv) {$/;"	f	file:
parseVorbisSetup_timeDomainTransforms	OggFileParser.cpp	/^static Boolean parseVorbisSetup_timeDomainTransforms(LEBitVector& bv) {$/;"	f	file:
printComment	OggFileParser.cpp	640;"	d	file:
skipBits	OggFileParser.cpp	/^  void skipBits(unsigned numBits) {$/;"	f	class:LEBitVector
validateCommentHeader	OggFileParser.cpp	/^static Boolean validateCommentHeader(u_int8_t const *p, unsigned headerSize,$/;"	f	file:
validateHeader	OggFileParser.cpp	/^Boolean OggFileParser::validateHeader(OggTrack* track, u_int8_t const* p, unsigned headerSize) {$/;"	f	class:OggFileParser
~OggFileParser	OggFileParser.cpp	/^OggFileParser::~OggFileParser() {$/;"	f	class:OggFileParser
~PacketSizeTable	OggFileParser.cpp	/^PacketSizeTable::~PacketSizeTable() {$/;"	f	class:PacketSizeTable
DELIVERING_PACKET_WITHIN_PAGE	OggFileParser.hh	/^  DELIVERING_PACKET_WITHIN_PAGE$/;"	e	enum:OggParseState
OggFileParser	OggFileParser.hh	/^class OggFileParser: public StreamParser {$/;"	c
OggParseState	OggFileParser.hh	/^enum OggParseState {$/;"	g
PARSING_AND_DELIVERING_PAGES	OggFileParser.hh	/^  PARSING_AND_DELIVERING_PAGES,$/;"	e	enum:OggParseState
PARSING_START_OF_FILE	OggFileParser.hh	/^  PARSING_START_OF_FILE,$/;"	e	enum:OggParseState
PacketSizeTable	OggFileParser.hh	/^class PacketSizeTable {$/;"	c
fCurrentParseState	OggFileParser.hh	/^  OggParseState fCurrentParseState;$/;"	m	class:OggFileParser
fCurrentTrackNumber	OggFileParser.hh	/^  u_int32_t fCurrentTrackNumber;$/;"	m	class:OggFileParser
fInputSource	OggFileParser.hh	/^  FramedSource* fInputSource;$/;"	m	class:OggFileParser
fNumUnfulfilledTracks	OggFileParser.hh	/^  unsigned fNumUnfulfilledTracks;$/;"	m	class:OggFileParser
fOnEndClientData	OggFileParser.hh	/^  void* fOnEndClientData;$/;"	m	class:OggFileParser
fOnEndFunc	OggFileParser.hh	/^  FramedSource::onCloseFunc* fOnEndFunc;$/;"	m	class:OggFileParser
fOurDemux	OggFileParser.hh	/^  OggDemux* fOurDemux;$/;"	m	class:OggFileParser
fOurFile	OggFileParser.hh	/^  OggFile& fOurFile;$/;"	m	class:OggFileParser
fPacketSizeTable	OggFileParser.hh	/^  PacketSizeTable* fPacketSizeTable;$/;"	m	class:OggFileParser
fSavedPacket	OggFileParser.hh	/^  u_int8_t* fSavedPacket; \/\/ used to temporarily save a copy of a 'packet' from a page$/;"	m	class:OggFileParser
lastPacketIsIncomplete	OggFileParser.hh	/^  Boolean lastPacketIsIncomplete; \/\/ iff the last segment's 'lacing' was 255$/;"	m	class:PacketSizeTable
needHeaders	OggFileParser.hh	/^  Boolean needHeaders() { return fNumUnfulfilledTracks > 0; }$/;"	f	class:OggFileParser
nextPacketNumToDeliver	OggFileParser.hh	/^  unsigned nextPacketNumToDeliver;$/;"	m	class:PacketSizeTable
numCompletedPackets	OggFileParser.hh	/^  unsigned numCompletedPackets; \/\/ will be <= "number_page_segments"$/;"	m	class:PacketSizeTable
size	OggFileParser.hh	/^  unsigned* size; \/\/ an array of sizes of each of the packets$/;"	m	class:PacketSizeTable
totSizes	OggFileParser.hh	/^  unsigned totSizes;$/;"	m	class:PacketSizeTable
OggFileServerDemux	OggFileServerDemux.cpp	/^::OggFileServerDemux(UsageEnvironment& env, char const* fileName,$/;"	f	class:OggFileServerDemux
createNew	OggFileServerDemux.cpp	/^::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:OggFileServerDemux
newDemuxedTrack	OggFileServerDemux.cpp	/^FramedSource* OggFileServerDemux::newDemuxedTrack(unsigned clientSessionId, u_int32_t trackNumber) {$/;"	f	class:OggFileServerDemux
newServerMediaSubsession	OggFileServerDemux.cpp	/^::newServerMediaSubsession(u_int32_t& resultTrackNumber) {$/;"	f	class:OggFileServerDemux
newServerMediaSubsession	OggFileServerDemux.cpp	/^ServerMediaSubsession* OggFileServerDemux::newServerMediaSubsession() {$/;"	f	class:OggFileServerDemux
newServerMediaSubsessionByTrackNumber	OggFileServerDemux.cpp	/^::newServerMediaSubsessionByTrackNumber(u_int32_t trackNumber) {$/;"	f	class:OggFileServerDemux
onOggFileCreation	OggFileServerDemux.cpp	/^void OggFileServerDemux::onOggFileCreation(OggFile* newFile) {$/;"	f	class:OggFileServerDemux
onOggFileCreation	OggFileServerDemux.cpp	/^void OggFileServerDemux::onOggFileCreation(OggFile* newFile, void* clientData) {$/;"	f	class:OggFileServerDemux
~OggFileServerDemux	OggFileServerDemux.cpp	/^OggFileServerDemux::~OggFileServerDemux() {$/;"	f	class:OggFileServerDemux
OggFileServerMediaSubsession	OggFileServerMediaSubsession.cpp	/^::OggFileServerMediaSubsession(OggFileServerDemux& demux, OggTrack* track)$/;"	f	class:OggFileServerMediaSubsession
createNew	OggFileServerMediaSubsession.cpp	/^::createNew(OggFileServerDemux& demux, OggTrack* track) {$/;"	f	class:OggFileServerMediaSubsession
createNewRTPSink	OggFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock, unsigned char rtpPayloadTypeIfDynamic, FramedSource* \/*inputSource*\/) {$/;"	f	class:OggFileServerMediaSubsession
createNewStreamSource	OggFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:OggFileServerMediaSubsession
~OggFileServerMediaSubsession	OggFileServerMediaSubsession.cpp	/^OggFileServerMediaSubsession::~OggFileServerMediaSubsession() {$/;"	f	class:OggFileServerMediaSubsession
OggFileServerMediaSubsession	OggFileServerMediaSubsession.hh	/^class OggFileServerMediaSubsession: public FileServerMediaSubsession {$/;"	c
_OGG_FILE_SERVER_MEDIA_SUBSESSION_HH	OggFileServerMediaSubsession.hh	23;"	d
fNumFiltersInFrontOfTrack	OggFileServerMediaSubsession.hh	/^  unsigned fNumFiltersInFrontOfTrack;$/;"	m	class:OggFileServerMediaSubsession
fOurDemux	OggFileServerMediaSubsession.hh	/^  OggFileServerDemux& fOurDemux;$/;"	m	class:OggFileServerMediaSubsession
fTrack	OggFileServerMediaSubsession.hh	/^  OggTrack* fTrack;$/;"	m	class:OggFileServerMediaSubsession
OggFileSink	OggFileSink.cpp	/^OggFileSink::OggFileSink(UsageEnvironment& env, FILE* fid,$/;"	f	class:OggFileSink
PAGE_DATA_MAX_SIZE	OggFileSink.cpp	94;"	d	file:
addData	OggFileSink.cpp	/^void OggFileSink::addData(unsigned char const* data, unsigned dataSize,$/;"	f	class:OggFileSink
afterGettingFrame	OggFileSink.cpp	/^void OggFileSink::afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes, struct timeval presentationTime) {$/;"	f	class:OggFileSink
continuePlaying	OggFileSink.cpp	/^Boolean OggFileSink::continuePlaying() {$/;"	f	class:OggFileSink
createNew	OggFileSink.cpp	/^::createNew(UsageEnvironment& env, char const* fileName,$/;"	f	class:OggFileSink
ourOnSourceClosure	OggFileSink.cpp	/^void OggFileSink::ourOnSourceClosure() {$/;"	f	class:OggFileSink
ourOnSourceClosure	OggFileSink.cpp	/^void OggFileSink::ourOnSourceClosure(void* clientData) {$/;"	f	class:OggFileSink
~OggFileSink	OggFileSink.cpp	/^OggFileSink::~OggFileSink() {$/;"	f	class:OggFileSink
OnDemandServerMediaSubsession	OnDemandServerMediaSubsession.cpp	/^::OnDemandServerMediaSubsession(UsageEnvironment& env,$/;"	f	class:OnDemandServerMediaSubsession
StreamState	OnDemandServerMediaSubsession.cpp	/^StreamState::StreamState(OnDemandServerMediaSubsession& master,$/;"	f	class:StreamState
afterPlayingStreamState	OnDemandServerMediaSubsession.cpp	/^static void afterPlayingStreamState(void* clientData) {$/;"	f	file:
closeStreamSource	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::closeStreamSource(FramedSource *inputSource) {$/;"	f	class:OnDemandServerMediaSubsession
createGroupsock	OnDemandServerMediaSubsession.cpp	/^::createGroupsock(struct in_addr const& addr, Port port) {$/;"	f	class:OnDemandServerMediaSubsession
createRTCP	OnDemandServerMediaSubsession.cpp	/^::createRTCP(Groupsock* RTCPgs, unsigned totSessionBW, \/* in kbps *\/$/;"	f	class:OnDemandServerMediaSubsession
deleteStream	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::deleteStream(unsigned clientSessionId,$/;"	f	class:OnDemandServerMediaSubsession
endPlaying	OnDemandServerMediaSubsession.cpp	/^void StreamState::endPlaying(Destinations* dests, unsigned clientSessionId) {$/;"	f	class:StreamState
getAuxSDPLine	OnDemandServerMediaSubsession.cpp	/^::getAuxSDPLine(RTPSink* rtpSink, FramedSource* \/*inputSource*\/) {$/;"	f	class:OnDemandServerMediaSubsession
getCurrentNPT	OnDemandServerMediaSubsession.cpp	/^float OnDemandServerMediaSubsession::getCurrentNPT(void* streamToken) {$/;"	f	class:OnDemandServerMediaSubsession
getRTPSinkandRTCP	OnDemandServerMediaSubsession.cpp	/^::getRTPSinkandRTCP(void* streamToken,$/;"	f	class:OnDemandServerMediaSubsession
getStreamParameters	OnDemandServerMediaSubsession.cpp	/^::getStreamParameters(unsigned clientSessionId,$/;"	f	class:OnDemandServerMediaSubsession
getStreamSource	OnDemandServerMediaSubsession.cpp	/^FramedSource* OnDemandServerMediaSubsession::getStreamSource(void* streamToken) {$/;"	f	class:OnDemandServerMediaSubsession
nullSeekStream	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::nullSeekStream(unsigned \/*clientSessionId*\/, void* streamToken,$/;"	f	class:OnDemandServerMediaSubsession
pause	OnDemandServerMediaSubsession.cpp	/^void StreamState::pause() {$/;"	f	class:StreamState
pauseStream	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::pauseStream(unsigned \/*clientSessionId*\/,$/;"	f	class:OnDemandServerMediaSubsession
reclaim	OnDemandServerMediaSubsession.cpp	/^void StreamState::reclaim() {$/;"	f	class:StreamState
sdpLines	OnDemandServerMediaSubsession.cpp	/^OnDemandServerMediaSubsession::sdpLines() {$/;"	f	class:OnDemandServerMediaSubsession
seekStream	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::seekStream(unsigned \/*clientSessionId*\/,$/;"	f	class:OnDemandServerMediaSubsession
seekStreamSource	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::seekStreamSource(FramedSource* \/*inputSource*\/,$/;"	f	class:OnDemandServerMediaSubsession
sendRTCPAppPacket	OnDemandServerMediaSubsession.cpp	/^::sendRTCPAppPacket(u_int8_t subtype, char const* name,$/;"	f	class:OnDemandServerMediaSubsession
sendRTCPAppPacket	OnDemandServerMediaSubsession.cpp	/^void StreamState::sendRTCPAppPacket(u_int8_t subtype, char const* name,$/;"	f	class:StreamState
setRTCPAppPacketHandler	OnDemandServerMediaSubsession.cpp	/^::setRTCPAppPacketHandler(RTCPAppHandlerFunc* handler, void* clientData) {$/;"	f	class:OnDemandServerMediaSubsession
setSDPLinesFromRTPSink	OnDemandServerMediaSubsession.cpp	/^::setSDPLinesFromRTPSink(RTPSink* rtpSink, FramedSource* inputSource, unsigned estBitrate) {$/;"	f	class:OnDemandServerMediaSubsession
setStreamScale	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::setStreamScale(unsigned \/*clientSessionId*\/,$/;"	f	class:OnDemandServerMediaSubsession
setStreamSourceDuration	OnDemandServerMediaSubsession.cpp	/^::setStreamSourceDuration(FramedSource* \/*inputSource*\/, double \/*streamDuration*\/, u_int64_t& numBytes) {$/;"	f	class:OnDemandServerMediaSubsession
setStreamSourceScale	OnDemandServerMediaSubsession.cpp	/^::setStreamSourceScale(FramedSource* \/*inputSource*\/, float \/*scale*\/) {$/;"	f	class:OnDemandServerMediaSubsession
startPlaying	OnDemandServerMediaSubsession.cpp	/^::startPlaying(Destinations* dests, unsigned clientSessionId,$/;"	f	class:StreamState
startStream	OnDemandServerMediaSubsession.cpp	/^void OnDemandServerMediaSubsession::startStream(unsigned clientSessionId,$/;"	f	class:OnDemandServerMediaSubsession
~OnDemandServerMediaSubsession	OnDemandServerMediaSubsession.cpp	/^OnDemandServerMediaSubsession::~OnDemandServerMediaSubsession() {$/;"	f	class:OnDemandServerMediaSubsession
~StreamState	OnDemandServerMediaSubsession.cpp	/^StreamState::~StreamState() {$/;"	f	class:StreamState
CloseOutputFile	OutputFile.cpp	/^void CloseOutputFile(FILE* fid) {$/;"	f
OpenOutputFile	OutputFile.cpp	/^FILE* OpenOutputFile(UsageEnvironment& env, char const* fileName) {$/;"	f
PassiveServerMediaSubsession	PassiveServerMediaSubsession.cpp	/^::PassiveServerMediaSubsession(RTPSink& rtpSink, RTCPInstance* rtcpInstance)$/;"	f	class:PassiveServerMediaSubsession
RTCPSourceRecord	PassiveServerMediaSubsession.cpp	/^  RTCPSourceRecord(netAddressBits addr, Port const& port)$/;"	f	class:RTCPSourceRecord
RTCPSourceRecord	PassiveServerMediaSubsession.cpp	/^class RTCPSourceRecord {$/;"	c	file:
addr	PassiveServerMediaSubsession.cpp	/^  netAddressBits addr;$/;"	m	class:RTCPSourceRecord	file:
createNew	PassiveServerMediaSubsession.cpp	/^PassiveServerMediaSubsession::createNew(RTPSink& rtpSink,$/;"	f	class:PassiveServerMediaSubsession
deleteStream	PassiveServerMediaSubsession.cpp	/^void PassiveServerMediaSubsession::deleteStream(unsigned clientSessionId, void*& \/*streamToken*\/) {$/;"	f	class:PassiveServerMediaSubsession
getCurrentNPT	PassiveServerMediaSubsession.cpp	/^float PassiveServerMediaSubsession::getCurrentNPT(void* streamToken) {$/;"	f	class:PassiveServerMediaSubsession
getRTPSinkandRTCP	PassiveServerMediaSubsession.cpp	/^::getRTPSinkandRTCP(void* streamToken,$/;"	f	class:PassiveServerMediaSubsession
getStreamParameters	PassiveServerMediaSubsession.cpp	/^::getStreamParameters(unsigned clientSessionId,$/;"	f	class:PassiveServerMediaSubsession
port	PassiveServerMediaSubsession.cpp	/^  Port port;$/;"	m	class:RTCPSourceRecord	file:
rtcpIsMuxed	PassiveServerMediaSubsession.cpp	/^Boolean PassiveServerMediaSubsession::rtcpIsMuxed() {$/;"	f	class:PassiveServerMediaSubsession
sdpLines	PassiveServerMediaSubsession.cpp	/^PassiveServerMediaSubsession::sdpLines() {$/;"	f	class:PassiveServerMediaSubsession
startStream	PassiveServerMediaSubsession.cpp	/^void PassiveServerMediaSubsession::startStream(unsigned clientSessionId,$/;"	f	class:PassiveServerMediaSubsession
~PassiveServerMediaSubsession	PassiveServerMediaSubsession.cpp	/^PassiveServerMediaSubsession::~PassiveServerMediaSubsession() {$/;"	f	class:PassiveServerMediaSubsession
MILLION	ProxyServerMediaSession.cpp	27;"	d	file:
PresentationTimeSessionNormalizer	ProxyServerMediaSession.cpp	/^PresentationTimeSessionNormalizer::PresentationTimeSessionNormalizer(UsageEnvironment& env)$/;"	f	class:PresentationTimeSessionNormalizer
PresentationTimeSubsessionNormalizer	ProxyServerMediaSession.cpp	/^::PresentationTimeSubsessionNormalizer(PresentationTimeSessionNormalizer& parent, FramedSource* inputSource, RTPSource* rtpSource,$/;"	f	class:PresentationTimeSubsessionNormalizer
ProxyRTSPClient	ProxyServerMediaSession.cpp	/^ProxyRTSPClient::ProxyRTSPClient(ProxyServerMediaSession& ourServerMediaSession, char const* rtspURL,$/;"	f	class:ProxyRTSPClient
ProxyServerMediaSession	ProxyServerMediaSession.cpp	/^::ProxyServerMediaSession(UsageEnvironment& env, GenericMediaServer* ourMediaServer,$/;"	f	class:ProxyServerMediaSession
ProxyServerMediaSubsession	ProxyServerMediaSession.cpp	/^::ProxyServerMediaSubsession(MediaSubsession& mediaSubsession,$/;"	f	class:ProxyServerMediaSubsession
ProxyServerMediaSubsession	ProxyServerMediaSession.cpp	/^class ProxyServerMediaSubsession: public OnDemandServerMediaSubsession {$/;"	c	file:
SUBSESSION_TIMEOUT_SECONDS	ProxyServerMediaSession.cpp	321;"	d	file:
afterGettingFrame	ProxyServerMediaSession.cpp	/^void PresentationTimeSubsessionNormalizer::afterGettingFrame(unsigned frameSize,$/;"	f	class:PresentationTimeSubsessionNormalizer
afterGettingFrame	ProxyServerMediaSession.cpp	/^void PresentationTimeSubsessionNormalizer::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:PresentationTimeSubsessionNormalizer
closeStreamSource	ProxyServerMediaSession.cpp	/^void ProxyServerMediaSubsession::closeStreamSource(FramedSource* inputSource) {$/;"	f	class:ProxyServerMediaSubsession
codecName	ProxyServerMediaSession.cpp	/^  char const* codecName() const { return fCodecName; }$/;"	f	class:ProxyServerMediaSubsession
continueAfterDESCRIBE	ProxyServerMediaSession.cpp	/^static void continueAfterDESCRIBE(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f	file:
continueAfterDESCRIBE	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::continueAfterDESCRIBE(char const* sdpDescription) {$/;"	f	class:ProxyRTSPClient
continueAfterDESCRIBE	ProxyServerMediaSession.cpp	/^void ProxyServerMediaSession::continueAfterDESCRIBE(char const* sdpDescription) {$/;"	f	class:ProxyServerMediaSession
continueAfterGET_PARAMETER	ProxyServerMediaSession.cpp	/^static void continueAfterGET_PARAMETER(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f	file:
continueAfterLivenessCommand	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::continueAfterLivenessCommand(int resultCode, Boolean serverSupportsGetParameter) {$/;"	f	class:ProxyRTSPClient
continueAfterOPTIONS	ProxyServerMediaSession.cpp	/^static void continueAfterOPTIONS(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f	file:
continueAfterPLAY	ProxyServerMediaSession.cpp	/^static void continueAfterPLAY(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f	file:
continueAfterPLAY	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::continueAfterPLAY(int resultCode) {$/;"	f	class:ProxyRTSPClient
continueAfterSETUP	ProxyServerMediaSession.cpp	/^static void continueAfterSETUP(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f	file:
continueAfterSETUP	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::continueAfterSETUP(int resultCode) {$/;"	f	class:ProxyRTSPClient
createGroupsock	ProxyServerMediaSession.cpp	/^Groupsock* ProxyServerMediaSession::createGroupsock(struct in_addr const& addr, Port port) {$/;"	f	class:ProxyServerMediaSession
createGroupsock	ProxyServerMediaSession.cpp	/^Groupsock* ProxyServerMediaSubsession::createGroupsock(struct in_addr const& addr, Port port) {$/;"	f	class:ProxyServerMediaSubsession
createNew	ProxyServerMediaSession.cpp	/^::createNew(UsageEnvironment& env, GenericMediaServer* ourMediaServer,$/;"	f	class:ProxyServerMediaSession
createNewPresentationTimeSubsessionNormalizer	ProxyServerMediaSession.cpp	/^::createNewPresentationTimeSubsessionNormalizer(FramedSource* inputSource, RTPSource* rtpSource,$/;"	f	class:PresentationTimeSessionNormalizer
createNewRTPSink	ProxyServerMediaSession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock, unsigned char rtpPayloadTypeIfDynamic, FramedSource* inputSource) {$/;"	f	class:ProxyServerMediaSubsession
createNewStreamSource	ProxyServerMediaSession.cpp	/^FramedSource* ProxyServerMediaSubsession::createNewStreamSource(unsigned clientSessionId, unsigned& estBitrate) {$/;"	f	class:ProxyServerMediaSubsession
createRTCP	ProxyServerMediaSession.cpp	/^::createRTCP(Groupsock* RTCPgs, unsigned totSessionBW, \/* in kbps *\/$/;"	f	class:ProxyServerMediaSession
createRTCP	ProxyServerMediaSession.cpp	/^::createRTCP(Groupsock* RTCPgs, unsigned totSessionBW, \/* in kbps *\/$/;"	f	class:ProxyServerMediaSubsession
defaultCreateNewProxyRTSPClientFunc	ProxyServerMediaSession.cpp	/^defaultCreateNewProxyRTSPClientFunc(ProxyServerMediaSession& ourServerMediaSession,$/;"	f
doGetNextFrame	ProxyServerMediaSession.cpp	/^void PresentationTimeSubsessionNormalizer::doGetNextFrame() {$/;"	f	class:PresentationTimeSubsessionNormalizer
fClientMediaSubsession	ProxyServerMediaSession.cpp	/^  MediaSubsession& fClientMediaSubsession; \/\/ the 'client' media subsession object that corresponds to this 'server' media subsession$/;"	m	class:ProxyServerMediaSubsession	file:
fCodecName	ProxyServerMediaSession.cpp	/^  char const* fCodecName;  \/\/ copied from "fClientMediaSubsession" once it's been set up$/;"	m	class:ProxyServerMediaSubsession	file:
fHaveSetupStream	ProxyServerMediaSession.cpp	/^  Boolean fHaveSetupStream;$/;"	m	class:ProxyServerMediaSubsession	file:
fNext	ProxyServerMediaSession.cpp	/^  ProxyServerMediaSubsession* fNext; \/\/ used when we're part of a queue$/;"	m	class:ProxyServerMediaSubsession	file:
handleSubsessionTimeout	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::handleSubsessionTimeout() {$/;"	f	class:ProxyRTSPClient
normalizePresentationTime	ProxyServerMediaSession.cpp	/^::normalizePresentationTime(PresentationTimeSubsessionNormalizer* ssNormalizer,$/;"	f	class:PresentationTimeSessionNormalizer
operator <<	ProxyServerMediaSession.cpp	/^UsageEnvironment& operator<<(UsageEnvironment& env, const ProxyRTSPClient& proxyRTSPClient) { \/\/ used for debugging$/;"	f
operator <<	ProxyServerMediaSession.cpp	/^UsageEnvironment& operator<<(UsageEnvironment& env, const ProxyServerMediaSession& psms) { \/\/ used for debugging$/;"	f
operator <<	ProxyServerMediaSession.cpp	/^UsageEnvironment& operator<<(UsageEnvironment& env, const ProxyServerMediaSubsession& psmss) { \/\/ used for debugging$/;"	f
removePresentationTimeSubsessionNormalizer	ProxyServerMediaSession.cpp	/^::removePresentationTimeSubsessionNormalizer(PresentationTimeSubsessionNormalizer* ssNormalizer) {$/;"	f	class:PresentationTimeSessionNormalizer
reset	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::reset() {$/;"	f	class:ProxyRTSPClient
resetDESCRIBEState	ProxyServerMediaSession.cpp	/^void ProxyServerMediaSession::resetDESCRIBEState() {$/;"	f	class:ProxyServerMediaSession
scheduleDESCRIBECommand	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::scheduleDESCRIBECommand() {$/;"	f	class:ProxyRTSPClient
scheduleLivenessCommand	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::scheduleLivenessCommand() {$/;"	f	class:ProxyRTSPClient
sendDESCRIBE	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::sendDESCRIBE(void* clientData) {$/;"	f	class:ProxyRTSPClient
sendLivenessCommand	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::sendLivenessCommand(void* clientData) {$/;"	f	class:ProxyRTSPClient
subsessionByeHandler	ProxyServerMediaSession.cpp	/^void ProxyServerMediaSubsession::subsessionByeHandler() {$/;"	f	class:ProxyServerMediaSubsession
subsessionByeHandler	ProxyServerMediaSession.cpp	/^void ProxyServerMediaSubsession::subsessionByeHandler(void* clientData) {$/;"	f	class:ProxyServerMediaSubsession
subsessionTimeout	ProxyServerMediaSession.cpp	/^void ProxyRTSPClient::subsessionTimeout(void* clientData) {$/;"	f	class:ProxyRTSPClient
url	ProxyServerMediaSession.cpp	/^char const* ProxyServerMediaSession::url() const {$/;"	f	class:ProxyServerMediaSession
verbosityLevel	ProxyServerMediaSession.cpp	/^  int verbosityLevel() const { return ((ProxyServerMediaSession*)fParentSession)->fVerbosityLevel; }$/;"	f	class:ProxyServerMediaSubsession	file:
~PresentationTimeSessionNormalizer	ProxyServerMediaSession.cpp	/^PresentationTimeSessionNormalizer::~PresentationTimeSessionNormalizer() {$/;"	f	class:PresentationTimeSessionNormalizer
~PresentationTimeSubsessionNormalizer	ProxyServerMediaSession.cpp	/^PresentationTimeSubsessionNormalizer::~PresentationTimeSubsessionNormalizer() {$/;"	f	class:PresentationTimeSubsessionNormalizer
~ProxyRTSPClient	ProxyServerMediaSession.cpp	/^ProxyRTSPClient::~ProxyRTSPClient() {$/;"	f	class:ProxyRTSPClient
~ProxyServerMediaSession	ProxyServerMediaSession.cpp	/^ProxyServerMediaSession::~ProxyServerMediaSession() {$/;"	f	class:ProxyServerMediaSession
~ProxyServerMediaSubsession	ProxyServerMediaSession.cpp	/^ProxyServerMediaSubsession::~ProxyServerMediaSubsession() {$/;"	f	class:ProxyServerMediaSubsession
FrameDescriptor	QCELPAudioRTPSource.cpp	/^  class FrameDescriptor {$/;"	c	class:QCELPDeinterleavingBuffer	file:
FrameDescriptor	QCELPAudioRTPSource.cpp	/^QCELPDeinterleavingBuffer::FrameDescriptor::FrameDescriptor()$/;"	f	class:QCELPDeinterleavingBuffer::FrameDescriptor
MIMEtype	QCELPAudioRTPSource.cpp	/^char const* RawQCELPRTPSource::MIMEtype() const {$/;"	f	class:RawQCELPRTPSource
QCELPBufferedPacket	QCELPAudioRTPSource.cpp	/^QCELPBufferedPacket::QCELPBufferedPacket(RawQCELPRTPSource& ourSource)$/;"	f	class:QCELPBufferedPacket
QCELPBufferedPacket	QCELPAudioRTPSource.cpp	/^class QCELPBufferedPacket: public BufferedPacket {$/;"	c	file:
QCELPBufferedPacketFactory	QCELPAudioRTPSource.cpp	/^class QCELPBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
QCELPDeinterleaver	QCELPAudioRTPSource.cpp	/^QCELPDeinterleaver::QCELPDeinterleaver(UsageEnvironment& env,$/;"	f	class:QCELPDeinterleaver
QCELPDeinterleaver	QCELPAudioRTPSource.cpp	/^class QCELPDeinterleaver: public FramedFilter {$/;"	c	file:
QCELPDeinterleavingBuffer	QCELPAudioRTPSource.cpp	/^QCELPDeinterleavingBuffer::QCELPDeinterleavingBuffer()$/;"	f	class:QCELPDeinterleavingBuffer
QCELPDeinterleavingBuffer	QCELPAudioRTPSource.cpp	/^class QCELPDeinterleavingBuffer {$/;"	c	file:
QCELP_MAX_FRAMES_PER_PACKET	QCELPAudioRTPSource.cpp	259;"	d	file:
QCELP_MAX_FRAME_SIZE	QCELPAudioRTPSource.cpp	257;"	d	file:
QCELP_MAX_INTERLEAVE_GROUP_SIZE	QCELPAudioRTPSource.cpp	260;"	d	file:
QCELP_MAX_INTERLEAVE_L	QCELPAudioRTPSource.cpp	258;"	d	file:
RawQCELPRTPSource	QCELPAudioRTPSource.cpp	/^RawQCELPRTPSource::RawQCELPRTPSource(UsageEnvironment& env,$/;"	f	class:RawQCELPRTPSource
RawQCELPRTPSource	QCELPAudioRTPSource.cpp	/^class RawQCELPRTPSource: public MultiFramedRTPSource {$/;"	c	file:
afterGettingFrame	QCELPAudioRTPSource.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:QCELPDeinterleaver
afterGettingFrame1	QCELPAudioRTPSource.cpp	/^::afterGettingFrame1(unsigned frameSize, struct timeval presentationTime) {$/;"	f	class:QCELPDeinterleaver
createNew	QCELPAudioRTPSource.cpp	/^QCELPAudioRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:QCELPAudioRTPSource
createNew	QCELPAudioRTPSource.cpp	/^QCELPDeinterleaver::createNew(UsageEnvironment& env,$/;"	f	class:QCELPDeinterleaver
createNew	QCELPAudioRTPSource.cpp	/^RawQCELPRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:RawQCELPRTPSource
createNewPacket	QCELPAudioRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:QCELPBufferedPacketFactory
deliverIncomingFrame	QCELPAudioRTPSource.cpp	/^::deliverIncomingFrame(unsigned frameSize,$/;"	f	class:QCELPDeinterleavingBuffer
doGetNextFrame	QCELPAudioRTPSource.cpp	/^void QCELPDeinterleaver::doGetNextFrame() {$/;"	f	class:QCELPDeinterleaver
doStopGettingFrames	QCELPAudioRTPSource.cpp	/^void QCELPDeinterleaver::doStopGettingFrames() {$/;"	f	class:QCELPDeinterleaver
fDeinterleavingBuffer	QCELPAudioRTPSource.cpp	/^  class QCELPDeinterleavingBuffer* fDeinterleavingBuffer;$/;"	m	class:QCELPDeinterleaver	typeref:class:QCELPDeinterleaver::QCELPDeinterleavingBuffer	file:
fFrameIndex	QCELPAudioRTPSource.cpp	/^  unsigned char fInterleaveL, fInterleaveN, fFrameIndex;$/;"	m	class:RawQCELPRTPSource	file:
fFrames	QCELPAudioRTPSource.cpp	/^  FrameDescriptor fFrames[QCELP_MAX_INTERLEAVE_GROUP_SIZE][2];$/;"	m	class:QCELPDeinterleavingBuffer	file:
fHaveSeenPackets	QCELPAudioRTPSource.cpp	/^  Boolean fHaveSeenPackets;$/;"	m	class:QCELPDeinterleavingBuffer	file:
fIncomingBankId	QCELPAudioRTPSource.cpp	/^  unsigned char fIncomingBankId; \/\/ toggles between 0 and 1$/;"	m	class:QCELPDeinterleavingBuffer	file:
fIncomingBinMax	QCELPAudioRTPSource.cpp	/^  unsigned char fIncomingBinMax; \/\/ in the incoming bank$/;"	m	class:QCELPDeinterleavingBuffer	file:
fInputBuffer	QCELPAudioRTPSource.cpp	/^  unsigned char* fInputBuffer;$/;"	m	class:QCELPDeinterleavingBuffer	file:
fInterleaveL	QCELPAudioRTPSource.cpp	/^  unsigned char fInterleaveL, fInterleaveN, fFrameIndex;$/;"	m	class:RawQCELPRTPSource	file:
fInterleaveN	QCELPAudioRTPSource.cpp	/^  unsigned char fInterleaveL, fInterleaveN, fFrameIndex;$/;"	m	class:RawQCELPRTPSource	file:
fLastPacketSeqNumForGroup	QCELPAudioRTPSource.cpp	/^  u_int16_t fLastPacketSeqNumForGroup;$/;"	m	class:QCELPDeinterleavingBuffer	file:
fLastRetrievedPresentationTime	QCELPAudioRTPSource.cpp	/^  struct timeval fLastRetrievedPresentationTime;$/;"	m	class:QCELPDeinterleavingBuffer	typeref:struct:QCELPDeinterleavingBuffer::timeval	file:
fNeedAFrame	QCELPAudioRTPSource.cpp	/^  Boolean fNeedAFrame;$/;"	m	class:QCELPDeinterleaver	file:
fNextOutgoingBin	QCELPAudioRTPSource.cpp	/^  unsigned char fNextOutgoingBin;$/;"	m	class:QCELPDeinterleavingBuffer	file:
fNumSuccessiveSyncedPackets	QCELPAudioRTPSource.cpp	/^  unsigned fNumSuccessiveSyncedPackets;$/;"	m	class:RawQCELPRTPSource	file:
fOurSource	QCELPAudioRTPSource.cpp	/^  RawQCELPRTPSource& fOurSource;$/;"	m	class:QCELPBufferedPacket	file:
fOutgoingBinMax	QCELPAudioRTPSource.cpp	/^  unsigned char fOutgoingBinMax; \/\/ in the outgoing bank$/;"	m	class:QCELPDeinterleavingBuffer	file:
frameData	QCELPAudioRTPSource.cpp	/^    unsigned char* frameData;$/;"	m	class:QCELPDeinterleavingBuffer::FrameDescriptor	file:
frameIndex	QCELPAudioRTPSource.cpp	/^  unsigned char& frameIndex() { return fFrameIndex; } \/\/ index within pkt$/;"	f	class:RawQCELPRTPSource
frameSize	QCELPAudioRTPSource.cpp	/^    unsigned frameSize;$/;"	m	class:QCELPDeinterleavingBuffer::FrameDescriptor	file:
hasBeenSynchronizedUsingRTCP	QCELPAudioRTPSource.cpp	/^Boolean RawQCELPRTPSource::hasBeenSynchronizedUsingRTCP() {$/;"	f	class:RawQCELPRTPSource
inputBuffer	QCELPAudioRTPSource.cpp	/^  unsigned char* inputBuffer() { return fInputBuffer; }$/;"	f	class:QCELPDeinterleavingBuffer
inputBufferSize	QCELPAudioRTPSource.cpp	/^  unsigned inputBufferSize() const { return QCELP_MAX_FRAME_SIZE; }$/;"	f	class:QCELPDeinterleavingBuffer
interleaveL	QCELPAudioRTPSource.cpp	/^  unsigned char interleaveL() const { return fInterleaveL; }$/;"	f	class:RawQCELPRTPSource
interleaveN	QCELPAudioRTPSource.cpp	/^  unsigned char interleaveN() const { return fInterleaveN; }$/;"	f	class:RawQCELPRTPSource
nextEnclosedFrameSize	QCELPAudioRTPSource.cpp	/^  nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:QCELPBufferedPacket
presentationTime	QCELPAudioRTPSource.cpp	/^    struct timeval presentationTime;$/;"	m	class:QCELPDeinterleavingBuffer::FrameDescriptor	typeref:struct:QCELPDeinterleavingBuffer::FrameDescriptor::timeval	file:
processSpecialHeader	QCELPAudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:RawQCELPRTPSource
retrieveFrame	QCELPAudioRTPSource.cpp	/^::retrieveFrame(unsigned char* to, unsigned maxSize,$/;"	f	class:QCELPDeinterleavingBuffer
uSecsPerFrame	QCELPAudioRTPSource.cpp	/^static unsigned const uSecsPerFrame = 20000; \/\/ 20 ms$/;"	v	file:
~FrameDescriptor	QCELPAudioRTPSource.cpp	/^QCELPDeinterleavingBuffer::FrameDescriptor::~FrameDescriptor() {$/;"	f	class:QCELPDeinterleavingBuffer::FrameDescriptor
~QCELPBufferedPacket	QCELPAudioRTPSource.cpp	/^QCELPBufferedPacket::~QCELPBufferedPacket() {$/;"	f	class:QCELPBufferedPacket
~QCELPDeinterleaver	QCELPAudioRTPSource.cpp	/^QCELPDeinterleaver::~QCELPDeinterleaver() {$/;"	f	class:QCELPDeinterleaver
~QCELPDeinterleavingBuffer	QCELPAudioRTPSource.cpp	/^QCELPDeinterleavingBuffer::~QCELPDeinterleavingBuffer() {$/;"	f	class:QCELPDeinterleavingBuffer
~RawQCELPRTPSource	QCELPAudioRTPSource.cpp	/^RawQCELPRTPSource::~RawQCELPRTPSource() {$/;"	f	class:RawQCELPRTPSource
ChunkDescriptor	QuickTimeFileSink.cpp	/^::ChunkDescriptor(int64_t offsetInFile, unsigned size,$/;"	f	class:ChunkDescriptor
ChunkDescriptor	QuickTimeFileSink.cpp	/^class ChunkDescriptor {$/;"	c	file:
Count64	QuickTimeFileSink.cpp	/^  Count64()$/;"	f	class:Count64
Count64	QuickTimeFileSink.cpp	/^class Count64 {$/;"	c	file:
H264_IDR_FRAME	QuickTimeFileSink.cpp	35;"	d	file:
QuickTimeFileSink	QuickTimeFileSink.cpp	/^QuickTimeFileSink::QuickTimeFileSink(UsageEnvironment& env,$/;"	f	class:QuickTimeFileSink
SubsessionBuffer	QuickTimeFileSink.cpp	/^  SubsessionBuffer(unsigned bufferSize)$/;"	f	class:SubsessionBuffer
SubsessionBuffer	QuickTimeFileSink.cpp	/^class SubsessionBuffer {$/;"	c	file:
SubsessionIOState	QuickTimeFileSink.cpp	/^SubsessionIOState::SubsessionIOState(QuickTimeFileSink& sink,$/;"	f	class:SubsessionIOState
SubsessionIOState	QuickTimeFileSink.cpp	/^class SubsessionIOState {$/;"	c	file:
SyncFrame	QuickTimeFileSink.cpp	/^SyncFrame::SyncFrame(unsigned frameNum)$/;"	f	class:SyncFrame
SyncFrame	QuickTimeFileSink.cpp	/^class SyncFrame {$/;"	c	file:
add4ByteString	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::add4ByteString(char const* str) {$/;"	f	class:QuickTimeFileSink
addArbitraryString	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addArbitraryString(char const* str,$/;"	f	class:QuickTimeFileSink
addAtom	QuickTimeFileSink.cpp	1307;"	d	file:
addAtomEnd	QuickTimeFileSink.cpp	1312;"	d	file:
addAtomHeader	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addAtomHeader(char const* atomName) {$/;"	f	class:QuickTimeFileSink
addAtomHeader64	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addAtomHeader64(char const* atomName) {$/;"	f	class:QuickTimeFileSink
addAtom_hdlr2	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addAtom_hdlr2() {$/;"	f	class:QuickTimeFileSink
addBytes	QuickTimeFileSink.cpp	/^  void addBytes(unsigned numBytes) { fBytesInUse += numBytes; }$/;"	f	class:SubsessionBuffer
addEdit	QuickTimeFileSink.cpp	1461;"	d	file:
addEdit1	QuickTimeFileSink.cpp	1451;"	d	file:
addEmptyEdit	QuickTimeFileSink.cpp	1462;"	d	file:
addHalfWord	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addHalfWord(unsigned short halfWord) {$/;"	f	class:QuickTimeFileSink
addWord	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addWord(unsigned word) {$/;"	f	class:QuickTimeFileSink
addWord64	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addWord64(u_int64_t word) {$/;"	f	class:QuickTimeFileSink
addZeroWords	QuickTimeFileSink.cpp	/^unsigned QuickTimeFileSink::addZeroWords(unsigned numWords) {$/;"	f	class:QuickTimeFileSink
afterGettingFrame	QuickTimeFileSink.cpp	/^::afterGettingFrame(void* clientData, unsigned packetDataSize,$/;"	f	class:QuickTimeFileSink
afterGettingFrame	QuickTimeFileSink.cpp	/^void SubsessionIOState::afterGettingFrame(unsigned packetDataSize,$/;"	f	class:SubsessionIOState
atomCreationFunc	QuickTimeFileSink.cpp	/^  typedef unsigned (QuickTimeFileSink::*atomCreationFunc)();$/;"	t	class:SubsessionIOState	file:
bytesAvailable	QuickTimeFileSink.cpp	/^  unsigned bytesAvailable() const { return fBufferSize - fBytesInUse; }$/;"	f	class:SubsessionBuffer
bytesInUse	QuickTimeFileSink.cpp	/^  unsigned bytesInUse() const { return fBytesInUse; }$/;"	f	class:SubsessionBuffer
chunk	QuickTimeFileSink.cpp	/^  ChunkDescriptor* chunk = fCurrentIOState->fHeadChunk;$/;"	v
chunkDuration	QuickTimeFileSink.cpp	/^  unsigned chunkDuration = 0;$/;"	v
completeOutputFile	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::completeOutputFile() {$/;"	f	class:QuickTimeFileSink
continuePlaying	QuickTimeFileSink.cpp	/^Boolean QuickTimeFileSink::continuePlaying() {$/;"	f	class:QuickTimeFileSink
createNew	QuickTimeFileSink.cpp	/^QuickTimeFileSink::createNew(UsageEnvironment& env,$/;"	f	class:QuickTimeFileSink
currentTrackPosition	QuickTimeFileSink.cpp	/^  unsigned currentTrackPosition = 0;$/;"	v
dataEnd	QuickTimeFileSink.cpp	/^  unsigned char* dataEnd() { return &fData[fBytesInUse]; }$/;"	f	class:SubsessionBuffer
dataStart	QuickTimeFileSink.cpp	/^  unsigned char* dataStart() { return &fData[0]; }$/;"	f	class:SubsessionBuffer
destFileOffset	QuickTimeFileSink.cpp	/^    int64_t destFileOffset; \/\/ used for non-hint tracks only$/;"	m	struct:SubsessionIOState::__anon6	file:
dimm	QuickTimeFileSink.cpp	/^    Count64 dimm;$/;"	m	struct:SubsessionIOState::hinf	file:
dmax	QuickTimeFileSink.cpp	/^    unsigned dmax;$/;"	m	struct:SubsessionIOState::hinf	file:
dmed	QuickTimeFileSink.cpp	/^    Count64 dmed;$/;"	m	struct:SubsessionIOState::hinf	file:
duration	QuickTimeFileSink.cpp	/^  unsigned const duration = fCurrentIOState->fQTDurationM; \/\/ movie units$/;"	v
duration	QuickTimeFileSink.cpp	/^  unsigned const duration = fCurrentIOState->fQTDurationT; \/\/ track units$/;"	v
duration	QuickTimeFileSink.cpp	/^  unsigned const duration = fMaxTrackDurationM;$/;"	v
editStartTime	QuickTimeFileSink.cpp	/^  struct timeval editStartTime = fFirstDataTime;$/;"	v	typeref:struct:timeval
editTrackPosition	QuickTimeFileSink.cpp	/^  unsigned editTrackPosition = 0;$/;"	v
edts	QuickTimeFileSink.cpp	/^addAtom(edts);$/;"	v
elst	QuickTimeFileSink.cpp	/^addAtom(elst);$/;"	v
envir	QuickTimeFileSink.cpp	/^  UsageEnvironment& envir() const { return fOurSink.envir(); }$/;"	f	class:SubsessionIOState
extendChunk	QuickTimeFileSink.cpp	/^::extendChunk(int64_t newOffsetInFile, unsigned newSize,$/;"	f	class:ChunkDescriptor
fBuffer	QuickTimeFileSink.cpp	/^  SubsessionBuffer *fBuffer, *fPrevBuffer;$/;"	m	class:SubsessionIOState	file:
fBufferSize	QuickTimeFileSink.cpp	/^  unsigned fBufferSize;$/;"	m	class:SubsessionBuffer	file:
fBytesInUse	QuickTimeFileSink.cpp	/^  unsigned fBytesInUse;$/;"	m	class:SubsessionBuffer	file:
fCurrentTrackNumber	QuickTimeFileSink.cpp	/^  static unsigned fCurrentTrackNumber;$/;"	m	class:SubsessionIOState	file:
fCurrentTrackNumber	QuickTimeFileSink.cpp	/^unsigned SubsessionIOState::fCurrentTrackNumber = 0;$/;"	m	class:SubsessionIOState	file:
fData	QuickTimeFileSink.cpp	/^  unsigned char* fData;$/;"	m	class:SubsessionBuffer	file:
fFrameDuration	QuickTimeFileSink.cpp	/^  unsigned fFrameDuration;$/;"	m	class:ChunkDescriptor	file:
fFrameSize	QuickTimeFileSink.cpp	/^  unsigned fFrameSize;$/;"	m	class:ChunkDescriptor	file:
fHINF	QuickTimeFileSink.cpp	/^  } fHINF;$/;"	m	class:SubsessionIOState	typeref:struct:SubsessionIOState::hinf	file:
fHaveBeenSynced	QuickTimeFileSink.cpp	/^  Boolean fHaveBeenSynced; \/\/ used in synchronizing with other streams$/;"	m	class:SubsessionIOState	file:
fHeadChunk	QuickTimeFileSink.cpp	/^  ChunkDescriptor *fHeadChunk, *fTailChunk;$/;"	m	class:SubsessionIOState	file:
fHeadSyncFrame	QuickTimeFileSink.cpp	/^  SyncFrame *fHeadSyncFrame, *fTailSyncFrame;$/;"	m	class:SubsessionIOState	file:
fHintTrackForUs	QuickTimeFileSink.cpp	/^  SubsessionIOState* fHintTrackForUs; SubsessionIOState* fTrackHintedByUs;$/;"	m	class:SubsessionIOState	file:
fLastPacketRTPSeqNum	QuickTimeFileSink.cpp	/^  unsigned short fLastPacketRTPSeqNum;$/;"	m	class:SubsessionIOState	file:
fNextChunk	QuickTimeFileSink.cpp	/^  ChunkDescriptor* fNextChunk;$/;"	m	class:ChunkDescriptor	file:
fNumChunks	QuickTimeFileSink.cpp	/^  unsigned fNumChunks;$/;"	m	class:SubsessionIOState	file:
fNumFrames	QuickTimeFileSink.cpp	/^  unsigned fNumFrames;$/;"	m	class:ChunkDescriptor	file:
fOffsetInFile	QuickTimeFileSink.cpp	/^  int64_t fOffsetInFile;$/;"	m	class:ChunkDescriptor	file:
fOurSink	QuickTimeFileSink.cpp	/^  QuickTimeFileSink& fOurSink;$/;"	m	class:SubsessionIOState	file:
fOurSourceIsActive	QuickTimeFileSink.cpp	/^  Boolean fOurSourceIsActive;$/;"	m	class:SubsessionIOState	file:
fOurSubsession	QuickTimeFileSink.cpp	/^  MediaSubsession& fOurSubsession;$/;"	m	class:SubsessionIOState	file:
fPresentationTime	QuickTimeFileSink.cpp	/^  struct timeval fPresentationTime; \/\/ of the start of the data$/;"	m	class:ChunkDescriptor	typeref:struct:ChunkDescriptor::timeval	file:
fPresentationTime	QuickTimeFileSink.cpp	/^  struct timeval fPresentationTime;$/;"	m	class:SubsessionBuffer	typeref:struct:SubsessionBuffer::timeval	file:
fPrevBuffer	QuickTimeFileSink.cpp	/^  SubsessionBuffer *fBuffer, *fPrevBuffer;$/;"	m	class:SubsessionIOState	file:
fPrevFrameState	QuickTimeFileSink.cpp	/^  } fPrevFrameState;$/;"	m	class:SubsessionIOState	typeref:struct:SubsessionIOState::__anon6	file:
fQTAudioDataType	QuickTimeFileSink.cpp	/^  char const* fQTAudioDataType;$/;"	m	class:SubsessionIOState	file:
fQTBytesPerFrame	QuickTimeFileSink.cpp	/^  unsigned fQTBytesPerFrame;$/;"	m	class:SubsessionIOState	file:
fQTDurationM	QuickTimeFileSink.cpp	/^  unsigned fQTDurationM; \/\/ in media time units$/;"	m	class:SubsessionIOState	file:
fQTDurationT	QuickTimeFileSink.cpp	/^  unsigned fQTDurationT; \/\/ in track time units$/;"	m	class:SubsessionIOState	file:
fQTEnableTrack	QuickTimeFileSink.cpp	/^  Boolean fQTEnableTrack;$/;"	m	class:SubsessionIOState	file:
fQTInitialOffsetDuration	QuickTimeFileSink.cpp	/^  unsigned fQTInitialOffsetDuration;$/;"	m	class:SubsessionIOState	file:
fQTMediaDataAtomCreator	QuickTimeFileSink.cpp	/^  atomCreationFunc fQTMediaDataAtomCreator;$/;"	m	class:SubsessionIOState	file:
fQTMediaInformationAtomCreator	QuickTimeFileSink.cpp	/^  atomCreationFunc fQTMediaInformationAtomCreator;$/;"	m	class:SubsessionIOState	file:
fQTSamplesPerFrame	QuickTimeFileSink.cpp	/^  unsigned fQTSamplesPerFrame;$/;"	m	class:SubsessionIOState	file:
fQTSoundSampleVersion	QuickTimeFileSink.cpp	/^  unsigned short fQTSoundSampleVersion;$/;"	m	class:SubsessionIOState	file:
fQTTimeScale	QuickTimeFileSink.cpp	/^  unsigned fQTTimeScale;$/;"	m	class:SubsessionIOState	file:
fQTTimeUnitsPerSample	QuickTimeFileSink.cpp	/^  unsigned fQTTimeUnitsPerSample;$/;"	m	class:SubsessionIOState	file:
fQTTotNumSamples	QuickTimeFileSink.cpp	/^  unsigned fQTTotNumSamples;$/;"	m	class:SubsessionIOState	file:
fQTcomponentName	QuickTimeFileSink.cpp	/^  char const* fQTcomponentName;$/;"	m	class:SubsessionIOState	file:
fQTcomponentSubtype	QuickTimeFileSink.cpp	/^  unsigned fQTcomponentSubtype;$/;"	m	class:SubsessionIOState	file:
fSyncTime	QuickTimeFileSink.cpp	/^  struct timeval fSyncTime;$/;"	m	class:SubsessionIOState	typeref:struct:SubsessionIOState::timeval	file:
fTKHD_durationPosn	QuickTimeFileSink.cpp	/^  int64_t fTKHD_durationPosn;$/;"	m	class:SubsessionIOState	file:
fTailChunk	QuickTimeFileSink.cpp	/^  ChunkDescriptor *fHeadChunk, *fTailChunk;$/;"	m	class:SubsessionIOState	file:
fTailSyncFrame	QuickTimeFileSink.cpp	/^  SyncFrame *fHeadSyncFrame, *fTailSyncFrame;$/;"	m	class:SubsessionIOState	file:
fTrackHintedByUs	QuickTimeFileSink.cpp	/^  SubsessionIOState* fHintTrackForUs; SubsessionIOState* fTrackHintedByUs;$/;"	m	class:SubsessionIOState	file:
fTrackID	QuickTimeFileSink.cpp	/^  unsigned fTrackID;$/;"	m	class:SubsessionIOState	file:
fourChar	QuickTimeFileSink.cpp	33;"	d	file:
frameSize	QuickTimeFileSink.cpp	/^    unsigned frameSize;$/;"	m	struct:SubsessionIOState::__anon6	file:
ftyp	QuickTimeFileSink.cpp	/^addAtom(ftyp);$/;"	v
gmhd	QuickTimeFileSink.cpp	/^addAtom(gmhd);$/;"	v
gmin	QuickTimeFileSink.cpp	/^addAtom(gmin);$/;"	v
hasHintTrack	QuickTimeFileSink.cpp	/^  Boolean hasHintTrack() const { return fHintTrackForUs != NULL; }$/;"	f	class:SubsessionIOState
hdlr	QuickTimeFileSink.cpp	/^addAtom(hdlr);$/;"	v
hi	QuickTimeFileSink.cpp	/^  u_int32_t hi, lo;$/;"	m	class:Count64	file:
hinf	QuickTimeFileSink.cpp	/^  struct hinf {$/;"	s	class:SubsessionIOState	file:
hint	QuickTimeFileSink.cpp	/^addAtom(hint);$/;"	v
hintedTrack	QuickTimeFileSink.cpp	/^  SubsessionIOState* hintedTrack = fCurrentIOState->fTrackHintedByUs;$/;"	v
iods	QuickTimeFileSink.cpp	/^addAtom(iods);$/;"	v
isHintTrack	QuickTimeFileSink.cpp	/^  Boolean isHintTrack() const { return fTrackHintedByUs != NULL; }$/;"	f	class:SubsessionIOState
lo	QuickTimeFileSink.cpp	/^  u_int32_t hi, lo;$/;"	m	class:Count64	file:
mdhd	QuickTimeFileSink.cpp	/^addAtom(mdhd);$/;"	v
mdia	QuickTimeFileSink.cpp	/^addAtom(mdia);$/;"	v
mediaInformationAtomCreator	QuickTimeFileSink.cpp	/^  SubsessionIOState::atomCreationFunc mediaInformationAtomCreator$/;"	v
minf	QuickTimeFileSink.cpp	/^addAtom(minf);$/;"	v
moov	QuickTimeFileSink.cpp	/^addAtom(moov);$/;"	v
mvhd	QuickTimeFileSink.cpp	/^addAtom(mvhd);$/;"	v
nextSyncFrame	QuickTimeFileSink.cpp	/^  class SyncFrame *nextSyncFrame;$/;"	m	class:SyncFrame	typeref:class:SyncFrame::SyncFrame	file:
noteRecordedFrame	QuickTimeFileSink.cpp	/^::noteRecordedFrame(MediaSubsession& \/*inputSubsession*\/,$/;"	f	class:QuickTimeFileSink
numEdits	QuickTimeFileSink.cpp	/^  unsigned numEdits = 0;$/;"	v
numEntriesPosition	QuickTimeFileSink.cpp	/^  int64_t numEntriesPosition = TellFile64(fOutFid);$/;"	v
numSpecialHeaders	QuickTimeFileSink.cpp	/^    unsigned char numSpecialHeaders; \/\/ used when our RTP source has special headers$/;"	m	struct:SubsessionIOState::__anon6	file:
nump	QuickTimeFileSink.cpp	/^    Count64 nump;$/;"	m	struct:SubsessionIOState::hinf	file:
onRTCPBye	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::onRTCPBye(void* clientData) {$/;"	f	class:QuickTimeFileSink
onSourceClosure	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::onSourceClosure(void* clientData) {$/;"	f	class:QuickTimeFileSink
onSourceClosure	QuickTimeFileSink.cpp	/^void SubsessionIOState::onSourceClosure() {$/;"	f	class:SubsessionIOState
onSourceClosure1	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::onSourceClosure1() {$/;"	f	class:QuickTimeFileSink
operator +=	QuickTimeFileSink.cpp	/^void Count64::operator+=(unsigned arg) {$/;"	f	class:Count64
packetSizes	QuickTimeFileSink.cpp	/^    unsigned packetSizes[256];$/;"	m	struct:SubsessionIOState::__anon6	file:
pmax	QuickTimeFileSink.cpp	/^    unsigned pmax;$/;"	m	struct:SubsessionIOState::hinf	file:
presentationTime	QuickTimeFileSink.cpp	/^    struct timeval presentationTime;$/;"	m	struct:SubsessionIOState::__anon6	typeref:struct:SubsessionIOState::__anon6::timeval	file:
presentationTime	QuickTimeFileSink.cpp	/^  struct timeval const& presentationTime() const {return fPresentationTime;}$/;"	f	class:SubsessionBuffer
reset	QuickTimeFileSink.cpp	/^  void reset() { fBytesInUse = 0; }$/;"	f	class:SubsessionBuffer
rtpHeader	QuickTimeFileSink.cpp	/^    unsigned rtpHeader;$/;"	m	struct:SubsessionIOState::__anon6	file:
seqNum	QuickTimeFileSink.cpp	/^    unsigned short seqNum;$/;"	m	struct:SubsessionIOState::__anon6	file:
setFinalQTstate	QuickTimeFileSink.cpp	/^void SubsessionIOState::setFinalQTstate() {$/;"	f	class:SubsessionIOState
setHintTrack	QuickTimeFileSink.cpp	/^void SubsessionIOState::setHintTrack(SubsessionIOState* hintedTrack,$/;"	f	class:SubsessionIOState
setPresentationTime	QuickTimeFileSink.cpp	/^  void setPresentationTime(struct timeval const& presentationTime) {$/;"	f	class:SubsessionBuffer
setQTstate	QuickTimeFileSink.cpp	/^Boolean SubsessionIOState::setQTstate() {$/;"	f	class:SubsessionIOState
setWord	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::setWord(int64_t filePosn, unsigned size) {$/;"	f	class:QuickTimeFileSink
setWord64	QuickTimeFileSink.cpp	/^void QuickTimeFileSink::setWord64(int64_t filePosn, u_int64_t size) {$/;"	f	class:QuickTimeFileSink
sfFrameNum	QuickTimeFileSink.cpp	/^  unsigned sfFrameNum;  $/;"	m	class:SyncFrame	file:
smhd	QuickTimeFileSink.cpp	/^addAtom(smhd);$/;"	v
specialHeaderBytes	QuickTimeFileSink.cpp	/^    unsigned char specialHeaderBytes[SPECIAL_HEADER_BUFFER_SIZE]; \/\/ ditto$/;"	m	struct:SubsessionIOState::__anon6	file:
specialHeaderBytesLength	QuickTimeFileSink.cpp	/^    unsigned specialHeaderBytesLength; \/\/ ditto$/;"	m	struct:SubsessionIOState::__anon6	file:
startPlaying	QuickTimeFileSink.cpp	/^Boolean QuickTimeFileSink::startPlaying(afterPlayingFunc* afterFunc,$/;"	f	class:QuickTimeFileSink
startSampleNumber	QuickTimeFileSink.cpp	/^    unsigned startSampleNumber;$/;"	m	struct:SubsessionIOState::__anon6	file:
subsession	QuickTimeFileSink.cpp	/^  MediaSubsession* subsession;$/;"	v
syncOK	QuickTimeFileSink.cpp	/^Boolean SubsessionIOState::syncOK(struct timeval presentationTime) {$/;"	f	class:SubsessionIOState
syncThreshold	QuickTimeFileSink.cpp	/^  double const syncThreshold = 0.1; \/\/ 100 ms$/;"	v
timeScale	QuickTimeFileSink.cpp	/^  unsigned const timeScale = fCurrentIOState->fQTTimeScale;$/;"	v
timevalGE	QuickTimeFileSink.cpp	/^static Boolean timevalGE(struct timeval const& tv1,$/;"	f	file:
tkhd	QuickTimeFileSink.cpp	/^addAtom(tkhd);$/;"	v
totalDurationOfEdits	QuickTimeFileSink.cpp	/^  unsigned totalDurationOfEdits = 0; \/\/ in movie time units$/;"	v
tpyl	QuickTimeFileSink.cpp	/^    Count64 tpyl;$/;"	m	struct:SubsessionIOState::hinf	file:
trackDurationOfEdit	QuickTimeFileSink.cpp	/^  double trackDurationOfEdit = 0.0;$/;"	v
trackDurationOfEdit	QuickTimeFileSink.cpp	/^  if (trackDurationOfEdit > 0.0) addEdit(trackDurationOfEdit);$/;"	v
trak	QuickTimeFileSink.cpp	/^addAtom(trak);$/;"	v
tref	QuickTimeFileSink.cpp	/^addAtom(tref);$/;"	v
trpy	QuickTimeFileSink.cpp	/^    Count64 trpy;$/;"	m	struct:SubsessionIOState::hinf	file:
useFrame	QuickTimeFileSink.cpp	/^void SubsessionIOState::useFrame(SubsessionBuffer& buffer) {$/;"	f	class:SubsessionIOState
useFrame1	QuickTimeFileSink.cpp	/^unsigned SubsessionIOState::useFrame1(unsigned sourceDataSize,$/;"	f	class:SubsessionIOState
useFrameForHinting	QuickTimeFileSink.cpp	/^void SubsessionIOState::useFrameForHinting(unsigned frameSize,$/;"	f	class:SubsessionIOState
vmhd	QuickTimeFileSink.cpp	/^addAtom(vmhd);$/;"	v
~QuickTimeFileSink	QuickTimeFileSink.cpp	/^QuickTimeFileSink::~QuickTimeFileSink() {$/;"	f	class:QuickTimeFileSink
~SubsessionBuffer	QuickTimeFileSink.cpp	/^  virtual ~SubsessionBuffer() { delete[] fData; }$/;"	f	class:SubsessionBuffer
~SubsessionIOState	QuickTimeFileSink.cpp	/^SubsessionIOState::~SubsessionIOState() {$/;"	f	class:SubsessionIOState
MIMEtype	QuickTimeGenericRTPSource.cpp	/^char const* QuickTimeGenericRTPSource::MIMEtype() const {$/;"	f	class:QuickTimeGenericRTPSource
QTGenericBufferedPacket	QuickTimeGenericRTPSource.cpp	/^::QTGenericBufferedPacket(QuickTimeGenericRTPSource& ourSource)$/;"	f	class:QTGenericBufferedPacket
QTGenericBufferedPacket	QuickTimeGenericRTPSource.cpp	/^class QTGenericBufferedPacket: public BufferedPacket {$/;"	c	file:
QTGenericBufferedPacketFactory	QuickTimeGenericRTPSource.cpp	/^class QTGenericBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
QuickTimeGenericRTPSource	QuickTimeGenericRTPSource.cpp	/^::QuickTimeGenericRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:QuickTimeGenericRTPSource
createNew	QuickTimeGenericRTPSource.cpp	/^QuickTimeGenericRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:QuickTimeGenericRTPSource
createNewPacket	QuickTimeGenericRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* ourSource) {$/;"	f	class:QTGenericBufferedPacketFactory
fOurSource	QuickTimeGenericRTPSource.cpp	/^  QuickTimeGenericRTPSource& fOurSource;$/;"	m	class:QTGenericBufferedPacket	file:
nextEnclosedFrameSize	QuickTimeGenericRTPSource.cpp	/^  nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:QTGenericBufferedPacket
processSpecialHeader	QuickTimeGenericRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:QuickTimeGenericRTPSource
~QTGenericBufferedPacket	QuickTimeGenericRTPSource.cpp	/^QTGenericBufferedPacket::~QTGenericBufferedPacket() {$/;"	f	class:QTGenericBufferedPacket
~QuickTimeGenericRTPSource	QuickTimeGenericRTPSource.cpp	/^QuickTimeGenericRTPSource::~QuickTimeGenericRTPSource() {$/;"	f	class:QuickTimeGenericRTPSource
ADVANCE	RTCP.cpp	409;"	d	file:
AddMember	RTCP.cpp	/^extern "C" void AddMember(packet \/*p*\/) {$/;"	f
AddSender	RTCP.cpp	/^extern "C" void AddSender(packet \/*p*\/) {$/;"	f
HACK_FOR_CHROME_WEBRTC_BUG	RTCP.cpp	27;"	d	file:
IP_UDP_HDR_SIZE	RTCP.cpp	/^static unsigned const IP_UDP_HDR_SIZE = 28;$/;"	v	file:
NewMember	RTCP.cpp	/^extern "C" int NewMember(packet p) {$/;"	f
NewSender	RTCP.cpp	/^extern "C" int NewSender(packet \/*p*\/) {$/;"	f
PacketType	RTCP.cpp	/^extern "C" int PacketType(packet p) {$/;"	f
RRHandlerRecord	RTCP.cpp	/^struct RRHandlerRecord {$/;"	s	file:
RTCPInstance	RTCP.cpp	/^RTCPInstance::RTCPInstance(UsageEnvironment& env, Groupsock* RTCPgs,$/;"	f	class:RTCPInstance
RTCPMemberDatabase	RTCP.cpp	/^  RTCPMemberDatabase(RTCPInstance& ourRTCPInstance)$/;"	f	class:RTCPMemberDatabase
RTCPMemberDatabase	RTCP.cpp	/^class RTCPMemberDatabase {$/;"	c	file:
ReceivedPacketSize	RTCP.cpp	/^extern "C" int ReceivedPacketSize(packet p) {$/;"	f
RemoveMember	RTCP.cpp	/^extern "C" void RemoveMember(packet p) {$/;"	f
RemoveSender	RTCP.cpp	/^extern "C" void RemoveSender(packet \/*p*\/) {$/;"	f
Reschedule	RTCP.cpp	/^extern "C" void Reschedule(double nextTime, event e) {$/;"	f
SDESItem	RTCP.cpp	/^SDESItem::SDESItem(unsigned char tag, unsigned char const* value) {$/;"	f	class:SDESItem
Schedule	RTCP.cpp	/^extern "C" void Schedule(double nextTime, event e) {$/;"	f
SendBYEPacket	RTCP.cpp	/^extern "C" void SendBYEPacket(event e) {$/;"	f
SendRTCPReport	RTCP.cpp	/^extern "C" void SendRTCPReport(event e) {$/;"	f
SentPacketSize	RTCP.cpp	/^extern "C" int SentPacketSize(event e) {$/;"	f
TypeOfEvent	RTCP.cpp	/^extern "C" int TypeOfEvent(event e) {$/;"	f
addBYE	RTCP.cpp	/^void RTCPInstance::addBYE() {$/;"	f	class:RTCPInstance
addRR	RTCP.cpp	/^void RTCPInstance::addRR() {$/;"	f	class:RTCPInstance
addReport	RTCP.cpp	/^Boolean RTCPInstance::addReport(Boolean alwaysAdd) {$/;"	f	class:RTCPInstance
addSDES	RTCP.cpp	/^void RTCPInstance::addSDES() {$/;"	f	class:RTCPInstance
addSR	RTCP.cpp	/^void RTCPInstance::addSR() {$/;"	f	class:RTCPInstance
addStreamSocket	RTCP.cpp	/^void RTCPInstance::addStreamSocket(int sockNum,$/;"	f	class:RTCPInstance
checkNewSSRC	RTCP.cpp	/^int RTCPInstance::checkNewSSRC() {$/;"	f	class:RTCPInstance
createNew	RTCP.cpp	/^RTCPInstance* RTCPInstance::createNew(UsageEnvironment& env, Groupsock* RTCPgs,$/;"	f	class:RTCPInstance
dTimeNow	RTCP.cpp	/^static double dTimeNow() {$/;"	f	file:
drand30	RTCP.cpp	/^extern "C" double drand30() {$/;"	f
enqueueCommonReportPrefix	RTCP.cpp	/^void RTCPInstance::enqueueCommonReportPrefix(unsigned char packetType,$/;"	f	class:RTCPInstance
enqueueCommonReportSuffix	RTCP.cpp	/^void RTCPInstance::enqueueCommonReportSuffix() {$/;"	f	class:RTCPInstance
enqueueReportBlock	RTCP.cpp	/^RTCPInstance::enqueueReportBlock(RTPReceptionStats* stats) {$/;"	f	class:RTCPInstance
fNumMembers	RTCP.cpp	/^  unsigned fNumMembers;$/;"	m	class:RTCPMemberDatabase	file:
fOurRTCPInstance	RTCP.cpp	/^  RTCPInstance& fOurRTCPInstance;$/;"	m	class:RTCPMemberDatabase	file:
fTable	RTCP.cpp	/^  HashTable* fTable;$/;"	m	class:RTCPMemberDatabase	file:
incomingReportHandler	RTCP.cpp	/^void RTCPInstance::incomingReportHandler(RTCPInstance* instance,$/;"	f	class:RTCPInstance
incomingReportHandler1	RTCP.cpp	/^void RTCPInstance::incomingReportHandler1() {$/;"	f	class:RTCPInstance
injectReport	RTCP.cpp	/^::injectReport(u_int8_t const* packet, unsigned packetSize, struct sockaddr_in const& fromAddress) {$/;"	f	class:RTCPInstance
isMember	RTCP.cpp	/^  Boolean isMember(unsigned ssrc) const {$/;"	f	class:RTCPMemberDatabase
isRTCPInstance	RTCP.cpp	/^Boolean RTCPInstance::isRTCPInstance() const {$/;"	f	class:RTCPInstance
lookupByName	RTCP.cpp	/^Boolean RTCPInstance::lookupByName(UsageEnvironment& env,$/;"	f	class:RTCPInstance
maxRTCPPacketSize	RTCP.cpp	/^static unsigned const maxRTCPPacketSize = 1456;$/;"	v	file:
noteArrivingRR	RTCP.cpp	/^void RTCPInstance::noteArrivingRR(struct sockaddr_in const& fromAddressAndPort,$/;"	f	class:RTCPInstance
noteMembership	RTCP.cpp	/^  Boolean noteMembership(unsigned ssrc, unsigned curTimeCount) {$/;"	f	class:RTCPMemberDatabase
numMembers	RTCP.cpp	/^  unsigned numMembers() const {$/;"	f	class:RTCPMemberDatabase
numMembers	RTCP.cpp	/^unsigned RTCPInstance::numMembers() const {$/;"	f	class:RTCPInstance
onExpire	RTCP.cpp	/^void RTCPInstance::onExpire(RTCPInstance* instance) {$/;"	f	class:RTCPInstance
onExpire1	RTCP.cpp	/^void RTCPInstance::onExpire1() {$/;"	f	class:RTCPInstance
onReceive	RTCP.cpp	/^void RTCPInstance::onReceive(int typeOfPacket, int totPacketSize,$/;"	f	class:RTCPInstance
preferredRTCPPacketSize	RTCP.cpp	/^static unsigned const preferredRTCPPacketSize = 1000; \/\/ bytes$/;"	v	file:
processIncomingReport	RTCP.cpp	/^::processIncomingReport(unsigned packetSize, struct sockaddr_in const& fromAddressAndPort,$/;"	f	class:RTCPInstance
reapOldMembers	RTCP.cpp	/^void RTCPMemberDatabase::reapOldMembers(unsigned threshold) {$/;"	f	class:RTCPMemberDatabase
remove	RTCP.cpp	/^  Boolean remove(unsigned ssrc) {$/;"	f	class:RTCPMemberDatabase
removeLastReceivedSSRC	RTCP.cpp	/^void RTCPInstance::removeLastReceivedSSRC() {$/;"	f	class:RTCPInstance
removeSSRC	RTCP.cpp	/^void RTCPInstance::removeSSRC(u_int32_t ssrc, Boolean alsoRemoveStats) {$/;"	f	class:RTCPInstance
reschedule	RTCP.cpp	/^void RTCPInstance::reschedule(double nextTime) {$/;"	f	class:RTCPInstance
rrHandlerClientData	RTCP.cpp	/^  void* rrHandlerClientData;$/;"	m	struct:RRHandlerRecord	file:
rrHandlerTask	RTCP.cpp	/^  TaskFunc* rrHandlerTask;$/;"	m	struct:RRHandlerRecord	file:
schedule	RTCP.cpp	/^void RTCPInstance::schedule(double nextTime) {$/;"	f	class:RTCPInstance
sendAppPacket	RTCP.cpp	/^void RTCPInstance::sendAppPacket(u_int8_t subtype, char const* name,$/;"	f	class:RTCPInstance
sendBYE	RTCP.cpp	/^void RTCPInstance::sendBYE() {$/;"	f	class:RTCPInstance
sendBuiltPacket	RTCP.cpp	/^void RTCPInstance::sendBuiltPacket() {$/;"	f	class:RTCPInstance
sendReport	RTCP.cpp	/^void RTCPInstance::sendReport() {$/;"	f	class:RTCPInstance
setAppHandler	RTCP.cpp	/^void RTCPInstance::setAppHandler(RTCPAppHandlerFunc* handlerTask, void* clientData) {$/;"	f	class:RTCPInstance
setByeHandler	RTCP.cpp	/^void RTCPInstance::setByeHandler(TaskFunc* handlerTask, void* clientData,$/;"	f	class:RTCPInstance
setRRHandler	RTCP.cpp	/^void RTCPInstance::setRRHandler(TaskFunc* handlerTask, void* clientData) {$/;"	f	class:RTCPInstance
setSRHandler	RTCP.cpp	/^void RTCPInstance::setSRHandler(TaskFunc* handlerTask, void* clientData) {$/;"	f	class:RTCPInstance
setSpecificRRHandler	RTCP.cpp	/^::setSpecificRRHandler(netAddressBits fromAddress, Port fromPort,$/;"	f	class:RTCPInstance
setStreamSocket	RTCP.cpp	/^void RTCPInstance::setStreamSocket(int sockNum,$/;"	f	class:RTCPInstance
snprintf	RTCP.cpp	25;"	d	file:
totalSize	RTCP.cpp	/^unsigned SDESItem::totalSize() const {$/;"	f	class:SDESItem
unsetSpecificRRHandler	RTCP.cpp	/^::unsetSpecificRRHandler(netAddressBits fromAddress, Port fromPort) {$/;"	f	class:RTCPInstance
~RTCPInstance	RTCP.cpp	/^RTCPInstance::~RTCPInstance() {$/;"	f	class:RTCPInstance
~RTCPMemberDatabase	RTCP.cpp	/^  virtual ~RTCPMemberDatabase() {$/;"	f	class:RTCPMemberDatabase
AWAITING_DOLLAR	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	e	enum:SocketDescriptor::__anon3	file:
AWAITING_PACKET_DATA	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	e	enum:SocketDescriptor::__anon3	file:
AWAITING_SIZE1	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	e	enum:SocketDescriptor::__anon3	file:
AWAITING_SIZE2	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	e	enum:SocketDescriptor::__anon3	file:
AWAITING_STREAM_CHANNEL_ID	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	e	enum:SocketDescriptor::__anon3	file:
RTPINTERFACE_BLOCKING_WRITE_TIMEOUT_MS	RTPInterface.cpp	345;"	d	file:
RTPInterface	RTPInterface.cpp	/^RTPInterface::RTPInterface(Medium* owner, Groupsock* gs)$/;"	f	class:RTPInterface
SocketDescriptor	RTPInterface.cpp	/^SocketDescriptor::SocketDescriptor(UsageEnvironment& env, int socketNum)$/;"	f	class:SocketDescriptor
SocketDescriptor	RTPInterface.cpp	/^class SocketDescriptor {$/;"	c	file:
addStreamSocket	RTPInterface.cpp	/^void RTPInterface::addStreamSocket(int sockNum,$/;"	f	class:RTPInterface
clearServerRequestAlternativeByteHandler	RTPInterface.cpp	/^void RTPInterface::clearServerRequestAlternativeByteHandler(UsageEnvironment& env, int socketNum) {$/;"	f	class:RTPInterface
deregisterRTPInterface	RTPInterface.cpp	/^::deregisterRTPInterface(unsigned char streamChannelId) {$/;"	f	class:SocketDescriptor
deregisterSocket	RTPInterface.cpp	/^static void deregisterSocket(UsageEnvironment& env, int sockNum, unsigned char streamChannelId) {$/;"	f	file:
fAreInReadHandlerLoop	RTPInterface.cpp	/^  Boolean fReadErrorOccurred, fDeleteMyselfNext, fAreInReadHandlerLoop;$/;"	m	class:SocketDescriptor	file:
fDeleteMyselfNext	RTPInterface.cpp	/^  Boolean fReadErrorOccurred, fDeleteMyselfNext, fAreInReadHandlerLoop;$/;"	m	class:SocketDescriptor	file:
fEnv	RTPInterface.cpp	/^  UsageEnvironment& fEnv;$/;"	m	class:SocketDescriptor	file:
fOurSocketNum	RTPInterface.cpp	/^  int fOurSocketNum;$/;"	m	class:SocketDescriptor	file:
fReadErrorOccurred	RTPInterface.cpp	/^  Boolean fReadErrorOccurred, fDeleteMyselfNext, fAreInReadHandlerLoop;$/;"	m	class:SocketDescriptor	file:
fServerRequestAlternativeByteHandler	RTPInterface.cpp	/^  ServerRequestAlternativeByteHandler* fServerRequestAlternativeByteHandler;$/;"	m	class:SocketDescriptor	file:
fServerRequestAlternativeByteHandlerClientData	RTPInterface.cpp	/^  void* fServerRequestAlternativeByteHandlerClientData;$/;"	m	class:SocketDescriptor	file:
fSizeByte1	RTPInterface.cpp	/^  u_int8_t fStreamChannelId, fSizeByte1;$/;"	m	class:SocketDescriptor	file:
fStreamChannelId	RTPInterface.cpp	/^  u_int8_t fStreamChannelId, fSizeByte1;$/;"	m	class:SocketDescriptor	file:
fSubChannelHashTable	RTPInterface.cpp	/^  HashTable* fSubChannelHashTable;$/;"	m	class:SocketDescriptor	file:
fTCPReadingState	RTPInterface.cpp	/^  enum { AWAITING_DOLLAR, AWAITING_STREAM_CHANNEL_ID, AWAITING_SIZE1, AWAITING_SIZE2, AWAITING_PACKET_DATA } fTCPReadingState;$/;"	m	class:SocketDescriptor	typeref:enum:SocketDescriptor::__anon3	file:
handleRead	RTPInterface.cpp	/^Boolean RTPInterface::handleRead(unsigned char* buffer, unsigned bufferMaxSize,$/;"	f	class:RTPInterface
lookupRTPInterface	RTPInterface.cpp	/^::lookupRTPInterface(unsigned char streamChannelId) {$/;"	f	class:SocketDescriptor
lookupSocketDescriptor	RTPInterface.cpp	/^static SocketDescriptor* lookupSocketDescriptor(UsageEnvironment& env, int sockNum, Boolean createIfNotFound = True) {$/;"	f	file:
registerRTPInterface	RTPInterface.cpp	/^void SocketDescriptor::registerRTPInterface(unsigned char streamChannelId,$/;"	f	class:SocketDescriptor
removeSocketDescription	RTPInterface.cpp	/^static void removeSocketDescription(UsageEnvironment& env, int sockNum) {$/;"	f	file:
removeStreamSocket	RTPInterface.cpp	/^void RTPInterface::removeStreamSocket(int sockNum,$/;"	f	class:RTPInterface
sendDataOverTCP	RTPInterface.cpp	/^Boolean RTPInterface::sendDataOverTCP(int socketNum, u_int8_t const* data, unsigned dataSize, Boolean forceSendToSucceed) {$/;"	f	class:RTPInterface
sendPacket	RTPInterface.cpp	/^Boolean RTPInterface::sendPacket(unsigned char* packet, unsigned packetSize) {$/;"	f	class:RTPInterface
sendRTPorRTCPPacketOverTCP	RTPInterface.cpp	/^Boolean RTPInterface::sendRTPorRTCPPacketOverTCP(u_int8_t* packet, unsigned packetSize,$/;"	f	class:RTPInterface
setServerRequestAlternativeByteHandler	RTPInterface.cpp	/^  void setServerRequestAlternativeByteHandler(ServerRequestAlternativeByteHandler* handler, void* clientData) {$/;"	f	class:SocketDescriptor
setServerRequestAlternativeByteHandler	RTPInterface.cpp	/^void RTPInterface::setServerRequestAlternativeByteHandler(UsageEnvironment& env, int socketNum,$/;"	f	class:RTPInterface
setStreamSocket	RTPInterface.cpp	/^void RTPInterface::setStreamSocket(int sockNum,$/;"	f	class:RTPInterface
socketHashTable	RTPInterface.cpp	/^static HashTable* socketHashTable(UsageEnvironment& env, Boolean createIfNotPresent = True) {$/;"	f	file:
startNetworkReading	RTPInterface.cpp	/^::startNetworkReading(TaskScheduler::BackgroundHandlerProc* handlerProc) {$/;"	f	class:RTPInterface
stopNetworkReading	RTPInterface.cpp	/^void RTPInterface::stopNetworkReading() {$/;"	f	class:RTPInterface
tcpReadHandler	RTPInterface.cpp	/^void SocketDescriptor::tcpReadHandler(SocketDescriptor* socketDescriptor, int mask) {$/;"	f	class:SocketDescriptor
tcpReadHandler1	RTPInterface.cpp	/^Boolean SocketDescriptor::tcpReadHandler1(int mask) {$/;"	f	class:SocketDescriptor
tcpStreamRecord	RTPInterface.cpp	/^::tcpStreamRecord(int streamSocketNum, unsigned char streamChannelId,$/;"	f	class:tcpStreamRecord
~RTPInterface	RTPInterface.cpp	/^RTPInterface::~RTPInterface() {$/;"	f	class:RTPInterface
~SocketDescriptor	RTPInterface.cpp	/^SocketDescriptor::~SocketDescriptor() {$/;"	f	class:SocketDescriptor
~tcpStreamRecord	RTPInterface.cpp	/^tcpStreamRecord::~tcpStreamRecord() {$/;"	f	class:tcpStreamRecord
Iterator	RTPSink.cpp	/^::Iterator(RTPTransmissionStatsDB& receptionStatsDB)$/;"	f	class:RTPTransmissionStatsDB::Iterator
RTPSink	RTPSink.cpp	/^RTPSink::RTPSink(UsageEnvironment& env,$/;"	f	class:RTPSink
RTPTransmissionStats	RTPSink.cpp	/^RTPTransmissionStats::RTPTransmissionStats(RTPSink& rtpSink, u_int32_t SSRC)$/;"	f	class:RTPTransmissionStats
RTPTransmissionStatsDB	RTPSink.cpp	/^RTPTransmissionStatsDB::RTPTransmissionStatsDB(RTPSink& rtpSink)$/;"	f	class:RTPTransmissionStatsDB
add	RTPSink.cpp	/^void RTPTransmissionStatsDB::add(u_int32_t SSRC, RTPTransmissionStats* stats) {$/;"	f	class:RTPTransmissionStatsDB
auxSDPLine	RTPSink.cpp	/^char const* RTPSink::auxSDPLine() {$/;"	f	class:RTPSink
convertToRTPTimestamp	RTPSink.cpp	/^u_int32_t RTPSink::convertToRTPTimestamp(struct timeval tv) {$/;"	f	class:RTPSink
getTotalBitrate	RTPSink.cpp	/^void RTPSink::getTotalBitrate(unsigned& outNumBytes, double& outElapsedTime) {$/;"	f	class:RTPSink
getTotalOctetCount	RTPSink.cpp	/^void RTPTransmissionStats::getTotalOctetCount(u_int32_t& hi, u_int32_t& lo) {$/;"	f	class:RTPTransmissionStats
getTotalPacketCount	RTPSink.cpp	/^void RTPTransmissionStats::getTotalPacketCount(u_int32_t& hi, u_int32_t& lo) {$/;"	f	class:RTPTransmissionStats
isRTPSink	RTPSink.cpp	/^Boolean RTPSink::isRTPSink() const {$/;"	f	class:RTPSink
lookup	RTPSink.cpp	/^RTPTransmissionStats* RTPTransmissionStatsDB::lookup(u_int32_t SSRC) const {$/;"	f	class:RTPTransmissionStatsDB
lookupByName	RTPSink.cpp	/^Boolean RTPSink::lookupByName(UsageEnvironment& env, char const* sinkName,$/;"	f	class:RTPSink
next	RTPSink.cpp	/^RTPTransmissionStatsDB::Iterator::next() {$/;"	f	class:RTPTransmissionStatsDB::Iterator
noteIncomingRR	RTPSink.cpp	/^::noteIncomingRR(struct sockaddr_in const& lastFromAddress,$/;"	f	class:RTPTransmissionStats
noteIncomingRR	RTPSink.cpp	/^::noteIncomingRR(u_int32_t SSRC, struct sockaddr_in const& lastFromAddress,$/;"	f	class:RTPTransmissionStatsDB
packetsLostBetweenRR	RTPSink.cpp	/^int RTPTransmissionStats::packetsLostBetweenRR() const {$/;"	f	class:RTPTransmissionStats
packetsReceivedSinceLastRR	RTPSink.cpp	/^unsigned RTPTransmissionStats::packetsReceivedSinceLastRR() const {$/;"	f	class:RTPTransmissionStats
presetNextTimestamp	RTPSink.cpp	/^u_int32_t RTPSink::presetNextTimestamp() {$/;"	f	class:RTPSink
removeRecord	RTPSink.cpp	/^void RTPTransmissionStatsDB::removeRecord(u_int32_t SSRC) {$/;"	f	class:RTPTransmissionStatsDB
resetPresentationTimes	RTPSink.cpp	/^void RTPSink::resetPresentationTimes() {$/;"	f	class:RTPSink
roundTripDelay	RTPSink.cpp	/^unsigned RTPTransmissionStats::roundTripDelay() const {$/;"	f	class:RTPTransmissionStats
rtpmapLine	RTPSink.cpp	/^char* RTPSink::rtpmapLine() const {$/;"	f	class:RTPSink
sdpMediaType	RTPSink.cpp	/^char const* RTPSink::sdpMediaType() const {$/;"	f	class:RTPSink
~Iterator	RTPSink.cpp	/^RTPTransmissionStatsDB::Iterator::~Iterator() {$/;"	f	class:RTPTransmissionStatsDB::Iterator
~RTPSink	RTPSink.cpp	/^RTPSink::~RTPSink() {$/;"	f	class:RTPSink
~RTPTransmissionStats	RTPSink.cpp	/^RTPTransmissionStats::~RTPTransmissionStats() {}$/;"	f	class:RTPTransmissionStats
~RTPTransmissionStatsDB	RTPSink.cpp	/^RTPTransmissionStatsDB::~RTPTransmissionStatsDB() {$/;"	f	class:RTPTransmissionStatsDB
Iterator	RTPSource.cpp	/^::Iterator(RTPReceptionStatsDB& receptionStatsDB)$/;"	f	class:RTPReceptionStatsDB::Iterator
MILLION	RTPSource.cpp	228;"	d	file:
RTPReceptionStats	RTPSource.cpp	/^RTPReceptionStats::RTPReceptionStats(u_int32_t SSRC) {$/;"	f	class:RTPReceptionStats
RTPReceptionStats	RTPSource.cpp	/^RTPReceptionStats::RTPReceptionStats(u_int32_t SSRC, u_int16_t initialSeqNum) {$/;"	f	class:RTPReceptionStats
RTPReceptionStatsDB	RTPSource.cpp	/^RTPReceptionStatsDB::RTPReceptionStatsDB()$/;"	f	class:RTPReceptionStatsDB
RTPSource	RTPSource.cpp	/^RTPSource::RTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:RTPSource
add	RTPSource.cpp	/^void RTPReceptionStatsDB::add(u_int32_t SSRC, RTPReceptionStats* stats) {$/;"	f	class:RTPReceptionStatsDB
getAttributes	RTPSource.cpp	/^void RTPSource::getAttributes() const {$/;"	f	class:RTPSource
hasBeenSynchronizedUsingRTCP	RTPSource.cpp	/^Boolean RTPSource::hasBeenSynchronizedUsingRTCP() {$/;"	f	class:RTPSource
init	RTPSource.cpp	/^void RTPReceptionStats::init(u_int32_t SSRC) {$/;"	f	class:RTPReceptionStats
initSeqNum	RTPSource.cpp	/^void RTPReceptionStats::initSeqNum(u_int16_t initialSeqNum) {$/;"	f	class:RTPReceptionStats
isRTPSource	RTPSource.cpp	/^Boolean RTPSource::isRTPSource() const {$/;"	f	class:RTPSource
jitter	RTPSource.cpp	/^unsigned RTPReceptionStats::jitter() const {$/;"	f	class:RTPReceptionStats
lookup	RTPSource.cpp	/^RTPReceptionStats* RTPReceptionStatsDB::lookup(u_int32_t SSRC) const {$/;"	f	class:RTPReceptionStatsDB
lookupByName	RTPSource.cpp	/^Boolean RTPSource::lookupByName(UsageEnvironment& env,$/;"	f	class:RTPSource
next	RTPSource.cpp	/^RTPReceptionStatsDB::Iterator::next(Boolean includeInactiveSources) {$/;"	f	class:RTPReceptionStatsDB::Iterator
noteIncomingPacket	RTPSource.cpp	/^::noteIncomingPacket(u_int16_t seqNum, u_int32_t rtpTimestamp,$/;"	f	class:RTPReceptionStats
noteIncomingPacket	RTPSource.cpp	/^::noteIncomingPacket(u_int32_t SSRC, u_int16_t seqNum,$/;"	f	class:RTPReceptionStatsDB
noteIncomingSR	RTPSource.cpp	/^::noteIncomingSR(u_int32_t SSRC,$/;"	f	class:RTPReceptionStatsDB
noteIncomingSR	RTPSource.cpp	/^void RTPReceptionStats::noteIncomingSR(u_int32_t ntpTimestampMSW,$/;"	f	class:RTPReceptionStats
removeRecord	RTPSource.cpp	/^void RTPReceptionStatsDB::removeRecord(u_int32_t SSRC) {$/;"	f	class:RTPReceptionStatsDB
reset	RTPSource.cpp	/^void RTPReceptionStats::reset() {$/;"	f	class:RTPReceptionStats
reset	RTPSource.cpp	/^void RTPReceptionStatsDB::reset() {$/;"	f	class:RTPReceptionStatsDB
seqNumLT	RTPSource.cpp	/^Boolean seqNumLT(u_int16_t s1, u_int16_t s2) {$/;"	f
totNumKBytesReceived	RTPSource.cpp	/^double RTPReceptionStats::totNumKBytesReceived() const {$/;"	f	class:RTPReceptionStats
~Iterator	RTPSource.cpp	/^RTPReceptionStatsDB::Iterator::~Iterator() {$/;"	f	class:RTPReceptionStatsDB::Iterator
~RTPReceptionStats	RTPSource.cpp	/^RTPReceptionStats::~RTPReceptionStats() {$/;"	f	class:RTPReceptionStats
~RTPReceptionStatsDB	RTPSource.cpp	/^RTPReceptionStatsDB::~RTPReceptionStatsDB() {$/;"	f	class:RTPReceptionStatsDB
~RTPSource	RTPSource.cpp	/^RTPSource::~RTPSource() {$/;"	f	class:RTPSource
HandlerServerForREGISTERCommand	RTSPClient.cpp	/^::HandlerServerForREGISTERCommand(UsageEnvironment& env, onRTSPClientCreationFunc* creationFunc, int ourSocket, Port ourPort,$/;"	f	class:HandlerServerForREGISTERCommand
RTSPClient	RTSPClient.cpp	/^RTSPClient::RTSPClient(UsageEnvironment& env, char const* rtspURL,$/;"	f	class:RTSPClient
RequestQueue	RTSPClient.cpp	/^RTSPClient::RequestQueue::RequestQueue()$/;"	f	class:RTSPClient::RequestQueue
RequestQueue	RTSPClient.cpp	/^RTSPClient::RequestQueue::RequestQueue(RequestQueue& origQueue)$/;"	f	class:RTSPClient::RequestQueue
RequestRecord	RTSPClient.cpp	/^RTSPClient::RequestRecord::RequestRecord(unsigned cseq, char const* commandName, responseHandler* handler,$/;"	f	class:RTSPClient::RequestRecord
RequestRecord	RTSPClient.cpp	/^RTSPClient::RequestRecord::RequestRecord(unsigned cseq, responseHandler* handler,$/;"	f	class:RTSPClient::RequestRecord
allowedCommandNames	RTSPClient.cpp	/^char const* HandlerServerForREGISTERCommand::allowedCommandNames() {$/;"	f	class:HandlerServerForREGISTERCommand
changeResponseHandler	RTSPClient.cpp	/^Boolean RTSPClient::changeResponseHandler(unsigned cseq, responseHandler* newResponseHandler) { $/;"	f	class:RTSPClient
checkForHeader	RTSPClient.cpp	/^Boolean RTSPClient::checkForHeader(char const* line, char const* headerName, unsigned headerNameLength, char const*& headerParams) {$/;"	f	class:RTSPClient
connectToServer	RTSPClient.cpp	/^int RTSPClient::connectToServer(int socketNum, portNumBits remotePortNum) {$/;"	f	class:RTSPClient
connectionHandler	RTSPClient.cpp	/^void RTSPClient::connectionHandler(void* instance, int \/*mask*\/) {$/;"	f	class:RTSPClient
connectionHandler1	RTSPClient.cpp	/^void RTSPClient::connectionHandler1() {$/;"	f	class:RTSPClient
constructSubsessionURL	RTSPClient.cpp	/^void RTSPClient::constructSubsessionURL(MediaSubsession const& subsession,$/;"	f	class:RTSPClient
copyUsernameOrPasswordStringFromURL	RTSPClient.cpp	/^static void copyUsernameOrPasswordStringFromURL(char* dest, char const* src, unsigned len) {$/;"	f	file:
createAuthenticatorString	RTSPClient.cpp	/^char* RTSPClient::createAuthenticatorString(char const* cmd, char const* url) {$/;"	f	class:RTSPClient
createBlocksizeString	RTSPClient.cpp	/^char* RTSPClient::createBlocksizeString(Boolean streamUsingTCP) {$/;"	f	class:RTSPClient
createNew	RTSPClient.cpp	/^::createNew(UsageEnvironment& env, onRTSPClientCreationFunc* creationFunc, Port ourPort,$/;"	f	class:HandlerServerForREGISTERCommand
createNew	RTSPClient.cpp	/^RTSPClient* RTSPClient::createNew(UsageEnvironment& env, char const* rtspURL,$/;"	f	class:RTSPClient
createNewRTSPClient	RTSPClient.cpp	/^::createNewRTSPClient(char const* rtspURL, int verbosityLevel, char const* applicationName, int socketNumToServer) {$/;"	f	class:HandlerServerForREGISTERCommand
createRangeString	RTSPClient.cpp	/^static char* createRangeString(double start, double end, char const* absStartTime, char const* absEndTime) {$/;"	f	file:
createScaleString	RTSPClient.cpp	/^static char* createScaleString(float scale, float currentScale) {$/;"	f	file:
createSessionString	RTSPClient.cpp	/^static char* createSessionString(char const* sessionId) {$/;"	f	file:
createSpeedString	RTSPClient.cpp	/^static char* createSpeedString(float speed) {$/;"	f	file:
dequeue	RTSPClient.cpp	/^RTSPClient::RequestRecord* RTSPClient::RequestQueue::dequeue() {$/;"	f	class:RTSPClient::RequestQueue
enqueue	RTSPClient.cpp	/^void RTSPClient::RequestQueue::enqueue(RequestRecord* request) {$/;"	f	class:RTSPClient::RequestQueue
findByCSeq	RTSPClient.cpp	/^RTSPClient::RequestRecord* RTSPClient::RequestQueue::findByCSeq(unsigned cseq) {$/;"	f	class:RTSPClient::RequestQueue
getLine	RTSPClient.cpp	/^static char* getLine(char* startOfLine) {$/;"	f	file:
grabSocket	RTSPClient.cpp	/^int RTSPClient::grabSocket() {$/;"	f	class:RTSPClient
handleAlternativeRequestByte	RTSPClient.cpp	/^void RTSPClient::handleAlternativeRequestByte(void* rtspClient, u_int8_t requestByte) {$/;"	f	class:RTSPClient
handleAlternativeRequestByte1	RTSPClient.cpp	/^void RTSPClient::handleAlternativeRequestByte1(u_int8_t requestByte) {$/;"	f	class:RTSPClient
handleAuthenticationFailure	RTSPClient.cpp	/^Boolean RTSPClient::handleAuthenticationFailure(char const* paramsStr) {$/;"	f	class:RTSPClient
handleGET_PARAMETERResponse	RTSPClient.cpp	/^Boolean RTSPClient::handleGET_PARAMETERResponse(char const* parameterName, char*& resultValueString, char* resultValueStringEnd) {$/;"	f	class:RTSPClient
handleIncomingRequest	RTSPClient.cpp	/^void RTSPClient::handleIncomingRequest() {$/;"	f	class:RTSPClient
handlePLAYResponse	RTSPClient.cpp	/^Boolean RTSPClient::handlePLAYResponse(MediaSession& session, MediaSubsession& subsession,$/;"	f	class:RTSPClient
handleRequestError	RTSPClient.cpp	/^void RTSPClient::handleRequestError(RequestRecord* request) {$/;"	f	class:RTSPClient
handleResponseBytes	RTSPClient.cpp	/^void RTSPClient::handleResponseBytes(int newBytesRead) {$/;"	f	class:RTSPClient
handleSETUPResponse	RTSPClient.cpp	/^Boolean RTSPClient::handleSETUPResponse(MediaSubsession& subsession, char const* sessionParamsStr, char const* transportParamsStr,$/;"	f	class:RTSPClient
handleTEARDOWNResponse	RTSPClient.cpp	/^Boolean RTSPClient::handleTEARDOWNResponse(MediaSession& \/*session*\/, MediaSubsession& \/*subsession*\/) {$/;"	f	class:RTSPClient
implementCmd_REGISTER	RTSPClient.cpp	/^void HandlerServerForREGISTERCommand::implementCmd_REGISTER(char const* url, char const* urlSuffix, int socketToRemoteServer,$/;"	f	class:HandlerServerForREGISTERCommand
incomingDataHandler	RTSPClient.cpp	/^void RTSPClient::incomingDataHandler(void* instance, int \/*mask*\/) {$/;"	f	class:RTSPClient
incomingDataHandler1	RTSPClient.cpp	/^void RTSPClient::incomingDataHandler1() {$/;"	f	class:RTSPClient
isAbsoluteURL	RTSPClient.cpp	/^static Boolean isAbsoluteURL(char const* url) {$/;"	f	file:
isRTSPClient	RTSPClient.cpp	/^Boolean RTSPClient::isRTSPClient() const {$/;"	f	class:RTSPClient
lookupByName	RTSPClient.cpp	/^Boolean RTSPClient::lookupByName(UsageEnvironment& env,$/;"	f	class:RTSPClient
openConnection	RTSPClient.cpp	/^int RTSPClient::openConnection() {$/;"	f	class:RTSPClient
parseRTPInfoParams	RTSPClient.cpp	/^Boolean RTSPClient::parseRTPInfoParams(char const*& paramsStr, u_int16_t& seqNum, u_int32_t& timestamp) {$/;"	f	class:RTSPClient
parseRTSPURL	RTSPClient.cpp	/^Boolean RTSPClient::parseRTSPURL(UsageEnvironment& env, char const* url,$/;"	f	class:RTSPClient
parseResponseCode	RTSPClient.cpp	/^::parseResponseCode(char const* line, unsigned& responseCode, char const*& responseString) {$/;"	f	class:RTSPClient
parseScaleParam	RTSPClient.cpp	/^Boolean RTSPClient::parseScaleParam(char const* paramStr, float& scale) {$/;"	f	class:RTSPClient
parseSpeedParam	RTSPClient.cpp	/^Boolean RTSPClient::parseSpeedParam(char const* paramStr, float& speed) {$/;"	f	class:RTSPClient
parseTransportParams	RTSPClient.cpp	/^Boolean RTSPClient::parseTransportParams(char const* paramsStr,$/;"	f	class:RTSPClient
putAtHead	RTSPClient.cpp	/^void RTSPClient::RequestQueue::putAtHead(RequestRecord* request) {$/;"	f	class:RTSPClient::RequestQueue
resendCommand	RTSPClient.cpp	/^Boolean RTSPClient::resendCommand(RequestRecord* request) {$/;"	f	class:RTSPClient
reset	RTSPClient.cpp	/^void RTSPClient::reset() {$/;"	f	class:RTSPClient
resetResponseBuffer	RTSPClient.cpp	/^void RTSPClient::resetResponseBuffer() {$/;"	f	class:RTSPClient
resetTCPSockets	RTSPClient.cpp	/^void RTSPClient::resetTCPSockets() {$/;"	f	class:RTSPClient
responseBufferSize	RTSPClient.cpp	/^unsigned RTSPClient::responseBufferSize = 20000; \/\/ default value; you can reassign this in your application if you need to$/;"	m	class:RTSPClient	file:
responseHandlerForHTTP_GET	RTSPClient.cpp	/^void RTSPClient::responseHandlerForHTTP_GET(RTSPClient* rtspClient, int responseCode, char* responseString) {$/;"	f	class:RTSPClient
responseHandlerForHTTP_GET1	RTSPClient.cpp	/^void RTSPClient::responseHandlerForHTTP_GET1(int responseCode, char* responseString) {$/;"	f	class:RTSPClient
sendAnnounceCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendAnnounceCommand(char const* sdpDescription, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendDescribeCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendDescribeCommand(responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendDummyUDPPackets	RTSPClient.cpp	/^void RTSPClient::sendDummyUDPPackets(MediaSession& session, unsigned numDummyPackets) {$/;"	f	class:RTSPClient
sendDummyUDPPackets	RTSPClient.cpp	/^void RTSPClient::sendDummyUDPPackets(MediaSubsession& subsession, unsigned numDummyPackets) {$/;"	f	class:RTSPClient
sendGetParameterCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendGetParameterCommand(MediaSession& session, responseHandler* responseHandler, char const* parameterName,$/;"	f	class:RTSPClient
sendOptionsCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendOptionsCommand(responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendPauseCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendPauseCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendPauseCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendPauseCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendPlayCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendPlayCommand(MediaSession& session, responseHandler* responseHandler,$/;"	f	class:RTSPClient
sendPlayCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendPlayCommand(MediaSubsession& subsession, responseHandler* responseHandler,$/;"	f	class:RTSPClient
sendRecordCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendRecordCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendRecordCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendRecordCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendRequest	RTSPClient.cpp	/^unsigned RTSPClient::sendRequest(RequestRecord* request) {$/;"	f	class:RTSPClient
sendSetParameterCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendSetParameterCommand(MediaSession& session, responseHandler* responseHandler,$/;"	f	class:RTSPClient
sendSetupCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendSetupCommand(MediaSubsession& subsession, responseHandler* responseHandler,$/;"	f	class:RTSPClient
sendTeardownCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendTeardownCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sendTeardownCommand	RTSPClient.cpp	/^unsigned RTSPClient::sendTeardownCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator) {$/;"	f	class:RTSPClient
sessionURL	RTSPClient.cpp	/^char const* RTSPClient::sessionURL(MediaSession const& session) const {$/;"	f	class:RTSPClient
setBaseURL	RTSPClient.cpp	/^void RTSPClient::setBaseURL(char const* url) {$/;"	f	class:RTSPClient
setRequestFields	RTSPClient.cpp	/^Boolean RTSPClient::setRequestFields(RequestRecord* request,$/;"	f	class:RTSPClient
setSpeed	RTSPClient.cpp	/^void RTSPClient::setSpeed(MediaSession& session, float speed) { $/;"	f	class:RTSPClient
setUserAgentString	RTSPClient.cpp	/^void RTSPClient::setUserAgentString(char const* userAgentName) {$/;"	f	class:RTSPClient
setupHTTPTunneling1	RTSPClient.cpp	/^Boolean RTSPClient::setupHTTPTunneling1() {$/;"	f	class:RTSPClient
setupHTTPTunneling2	RTSPClient.cpp	/^Boolean RTSPClient::setupHTTPTunneling2() {$/;"	f	class:RTSPClient
weImplementREGISTER	RTSPClient.cpp	/^Boolean HandlerServerForREGISTERCommand::weImplementREGISTER(char const* proxyURLSuffix, char*& responseStr) {$/;"	f	class:HandlerServerForREGISTERCommand
~HandlerServerForREGISTERCommand	RTSPClient.cpp	/^HandlerServerForREGISTERCommand::~HandlerServerForREGISTERCommand() {$/;"	f	class:HandlerServerForREGISTERCommand
~RTSPClient	RTSPClient.cpp	/^RTSPClient::~RTSPClient() {$/;"	f	class:RTSPClient
~RequestQueue	RTSPClient.cpp	/^RTSPClient::RequestQueue::~RequestQueue() {$/;"	f	class:RTSPClient::RequestQueue
~RequestRecord	RTSPClient.cpp	/^RTSPClient::RequestRecord::~RequestRecord() {$/;"	f	class:RTSPClient::RequestRecord
RTSPOptionIsSupported	RTSPCommon.cpp	/^Boolean RTSPOptionIsSupported(char const* commandName, char const* optionsResponseString) {$/;"	f
dateHeader	RTSPCommon.cpp	/^char const* dateHeader() {$/;"	f
decodeURL	RTSPCommon.cpp	/^static void decodeURL(char* url) {$/;"	f	file:
isSeparator	RTSPCommon.cpp	/^static Boolean isSeparator(char c) { return c == ' ' || c == ',' || c == ';' || c == ':'; }$/;"	f	file:
parseRTSPRequestString	RTSPCommon.cpp	/^Boolean parseRTSPRequestString(char const* reqStr,$/;"	f
parseRangeHeader	RTSPCommon.cpp	/^Boolean parseRangeHeader(char const* buf,$/;"	f
parseRangeParam	RTSPCommon.cpp	/^Boolean parseRangeParam(char const* paramStr,$/;"	f
parseScaleHeader	RTSPCommon.cpp	/^Boolean parseScaleHeader(char const* buf, float& scale) {$/;"	f
RTSPRegisterSender	RTSPRegisterSender.cpp	/^::RTSPRegisterSender(UsageEnvironment& env,$/;"	f	class:RTSPRegisterSender
RequestRecord_REGISTER	RTSPRegisterSender.cpp	/^::RequestRecord_REGISTER(unsigned cseq, RTSPClient::responseHandler* rtspResponseHandler, char const* rtspURLToRegister,$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
createNew	RTSPRegisterSender.cpp	/^::createNew(UsageEnvironment& env,$/;"	f	class:RTSPRegisterSender
grabConnection	RTSPRegisterSender.cpp	/^void RTSPRegisterSender::grabConnection(int& sock, struct sockaddr_in& remoteAddress) {$/;"	f	class:RTSPRegisterSender
setRequestFields	RTSPRegisterSender.cpp	/^Boolean RTSPRegisterSender::setRequestFields(RequestRecord* request,$/;"	f	class:RTSPRegisterSender
~RTSPRegisterSender	RTSPRegisterSender.cpp	/^RTSPRegisterSender::~RTSPRegisterSender() {$/;"	f	class:RTSPRegisterSender
~RequestRecord_REGISTER	RTSPRegisterSender.cpp	/^RTSPRegisterSender::RequestRecord_REGISTER::~RequestRecord_REGISTER() {$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
ParamsForREGISTER	RTSPServer.cpp	/^::ParamsForREGISTER(RTSPServer::RTSPClientConnection* ourConnection, char const* url, char const* urlSuffix,$/;"	f	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
RAW_UDP	RTSPServer.cpp	/^  RAW_UDP$/;"	e	enum:StreamingMode	file:
RTP_TCP	RTSPServer.cpp	/^  RTP_TCP,$/;"	e	enum:StreamingMode	file:
RTP_UDP	RTSPServer.cpp	/^  RTP_UDP,$/;"	e	enum:StreamingMode	file:
RTSPClientConnection	RTSPServer.cpp	/^::RTSPClientConnection(RTSPServer& ourServer, int clientSocket, struct sockaddr_in clientAddr)$/;"	f	class:RTSPServer::RTSPClientConnection
RTSPClientSession	RTSPServer.cpp	/^::RTSPClientSession(RTSPServer& ourServer, u_int32_t sessionId)$/;"	f	class:RTSPServer::RTSPClientSession
RTSPServer	RTSPServer.cpp	/^RTSPServer::RTSPServer(UsageEnvironment& env,$/;"	f	class:RTSPServer
RTSPServerWithREGISTERProxying	RTSPServer.cpp	/^::RTSPServerWithREGISTERProxying(UsageEnvironment& env, int ourSocket, Port ourPort,$/;"	f	class:RTSPServerWithREGISTERProxying
RegisterRequestRecord	RTSPServer.cpp	/^  RegisterRequestRecord(RTSPServer& ourServer, unsigned requestId,$/;"	f	class:RegisterRequestRecord
RegisterRequestRecord	RTSPServer.cpp	/^class RegisterRequestRecord: public RTSPRegisterSender {$/;"	c	file:
StreamingMode	RTSPServer.cpp	/^typedef enum StreamingMode {$/;"	g	file:
StreamingMode	RTSPServer.cpp	/^} StreamingMode;$/;"	t	typeref:enum:StreamingMode	file:
allowedCommandNames	RTSPServer.cpp	/^char const* RTSPServer::allowedCommandNames() {$/;"	f	class:RTSPServer
allowedCommandNames	RTSPServer.cpp	/^char const* RTSPServerWithREGISTERProxying::allowedCommandNames() {$/;"	f	class:RTSPServerWithREGISTERProxying
authenticationOK	RTSPServer.cpp	/^::authenticationOK(char const* cmdName, char const* urlSuffix, char const* fullRequestStr) {$/;"	f	class:RTSPServer::RTSPClientConnection
changeClientInputSocket	RTSPServer.cpp	/^::changeClientInputSocket(int newSocketNum, unsigned char const* extraData, unsigned extraDataSize) {$/;"	f	class:RTSPServer::RTSPClientConnection
closeSocketsRTSP	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::closeSocketsRTSP() {$/;"	f	class:RTSPServer::RTSPClientConnection
continueHandlingREGISTER	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::continueHandlingREGISTER(ParamsForREGISTER* params) {$/;"	f	class:RTSPServer::RTSPClientConnection
continueHandlingREGISTER1	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::continueHandlingREGISTER1(ParamsForREGISTER* params) {$/;"	f	class:RTSPServer::RTSPClientConnection
createNew	RTSPServer.cpp	/^::createNew(UsageEnvironment& env, Port ourPort,$/;"	f	class:RTSPServerWithREGISTERProxying
createNew	RTSPServer.cpp	/^RTSPServer::createNew(UsageEnvironment& env, Port ourPort,$/;"	f	class:RTSPServer
createNewClientConnection	RTSPServer.cpp	/^RTSPServer::createNewClientConnection(int clientSocket, struct sockaddr_in clientAddr) {$/;"	f	class:RTSPServer
createNewClientSession	RTSPServer.cpp	/^RTSPServer::createNewClientSession(u_int32_t sessionId) {   \/\/���� sessionId ���� RTSPClientSession �Ự$/;"	f	class:RTSPServer
deleteStreamByTrack	RTSPServer.cpp	/^void RTSPServer::RTSPClientSession::deleteStreamByTrack(unsigned trackNum) {$/;"	f	class:RTSPServer::RTSPClientSession
fNext	RTSPServer.cpp	/^  streamingOverTCPRecord* fNext;$/;"	m	class:streamingOverTCPRecord	file:
fOurServer	RTSPServer.cpp	/^  RTSPServer& fOurServer;$/;"	m	class:RegisterRequestRecord	file:
fRequestId	RTSPServer.cpp	/^  unsigned fRequestId;$/;"	m	class:RegisterRequestRecord	file:
fResponseHandler	RTSPServer.cpp	/^  RTSPServer::responseHandlerForREGISTER* fResponseHandler;$/;"	m	class:RegisterRequestRecord	file:
fSessionId	RTSPServer.cpp	/^  u_int32_t fSessionId;$/;"	m	class:streamingOverTCPRecord	file:
fTrackNum	RTSPServer.cpp	/^  unsigned fTrackNum;$/;"	m	class:streamingOverTCPRecord	file:
getAuthenticationDatabaseForCommand	RTSPServer.cpp	/^UserAuthenticationDatabase* RTSPServer::getAuthenticationDatabaseForCommand(char const* \/*cmdName*\/) {$/;"	f	class:RTSPServer
getAuthenticationDatabaseForCommand	RTSPServer.cpp	/^UserAuthenticationDatabase* RTSPServerWithREGISTERProxying::getAuthenticationDatabaseForCommand(char const* cmdName) {$/;"	f	class:RTSPServerWithREGISTERProxying
handleAlternativeRequestByte	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleAlternativeRequestByte(void* instance, u_int8_t requestByte) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleAlternativeRequestByte1	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleAlternativeRequestByte1(u_int8_t requestByte) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_DESCRIBE	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_DESCRIBE(char const* urlPreSuffix, char const* urlSuffix, char const* fullRequestStr) $/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_GET_PARAMETER	RTSPServer.cpp	/^::handleCmd_GET_PARAMETER(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_GET_PARAMETER	RTSPServer.cpp	/^::handleCmd_GET_PARAMETER(char const* \/*fullRequestStr*\/) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_OPTIONS	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_OPTIONS() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_PAUSE	RTSPServer.cpp	/^::handleCmd_PAUSE(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_PLAY	RTSPServer.cpp	/^::handleCmd_PLAY(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_REGISTER	RTSPServer.cpp	/^::RTSPClientConnection::handleCmd_REGISTER(char const* url, char const* urlSuffix, char const* fullRequestStr,$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_SETUP	RTSPServer.cpp	/^::handleCmd_SETUP(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_SET_PARAMETER	RTSPServer.cpp	/^::handleCmd_SET_PARAMETER(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_SET_PARAMETER	RTSPServer.cpp	/^::handleCmd_SET_PARAMETER(char const* \/*fullRequestStr*\/) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_TEARDOWN	RTSPServer.cpp	/^::handleCmd_TEARDOWN(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleCmd_bad	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_bad() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_notFound	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_notFound() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_notSupported	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_notSupported() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_sessionNotFound	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_sessionNotFound() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_unsupportedTransport	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleCmd_unsupportedTransport() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleCmd_withinSession	RTSPServer.cpp	/^::handleCmd_withinSession(RTSPServer::RTSPClientConnection* ourClientConnection,$/;"	f	class:RTSPServer::RTSPClientSession
handleHTTPCmd_OPTIONS	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleHTTPCmd_OPTIONS() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleHTTPCmd_StreamingGET	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleHTTPCmd_StreamingGET(char const* \/*urlSuffix*\/, char const* \/*fullRequestStr*\/) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleHTTPCmd_TunnelingGET	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleHTTPCmd_TunnelingGET(char const* sessionCookie) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleHTTPCmd_TunnelingPOST	RTSPServer.cpp	/^::handleHTTPCmd_TunnelingPOST(char const* sessionCookie, unsigned char const* extraData, unsigned extraDataSize) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleHTTPCmd_notFound	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleHTTPCmd_notFound() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleHTTPCmd_notSupported	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleHTTPCmd_notSupported() {$/;"	f	class:RTSPServer::RTSPClientConnection
handleRequestBytes	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::handleRequestBytes(int newBytesRead) {$/;"	f	class:RTSPServer::RTSPClientConnection
handleResponse	RTSPServer.cpp	/^  void handleResponse(int resultCode, char* resultString) {$/;"	f	class:RegisterRequestRecord
httpServerPortNum	RTSPServer.cpp	/^portNumBits RTSPServer::httpServerPortNum() const {$/;"	f	class:RTSPServer
implementCmd_REGISTER	RTSPServer.cpp	/^void RTSPServer::implementCmd_REGISTER(char const* \/*url*\/, char const* \/*urlSuffix*\/, int \/*socketToRemoteServer*\/,$/;"	f	class:RTSPServer
implementCmd_REGISTER	RTSPServer.cpp	/^void RTSPServerWithREGISTERProxying::implementCmd_REGISTER(char const* url, char const* \/*urlSuffix*\/, int socketToRemoteServer,$/;"	f	class:RTSPServerWithREGISTERProxying
incomingConnectionHandlerHTTP	RTSPServer.cpp	/^void RTSPServer::incomingConnectionHandlerHTTP() {$/;"	f	class:RTSPServer
incomingConnectionHandlerHTTP	RTSPServer.cpp	/^void RTSPServer::incomingConnectionHandlerHTTP(void* instance, int \/*mask*\/) {$/;"	f	class:RTSPServer
isRTSPServer	RTSPServer.cpp	/^Boolean RTSPServer::isRTSPServer() const {$/;"	f	class:RTSPServer
lookForHeader	RTSPServer.cpp	/^static void lookForHeader(char const* headerName, char const* source, unsigned sourceLen, char* resultStr, unsigned resultMaxSize) {$/;"	f	file:
lookupByName	RTSPServer.cpp	/^Boolean RTSPServer::lookupByName(UsageEnvironment& env,$/;"	f	class:RTSPServer
noteTCPStreamingOnSocket	RTSPServer.cpp	/^::noteTCPStreamingOnSocket(int socketNum, RTSPClientSession* clientSession, unsigned trackNum) {$/;"	f	class:RTSPServer
parseAuthorizationHeader	RTSPServer.cpp	/^static Boolean parseAuthorizationHeader(char const* buf,$/;"	f	file:
parseHTTPRequestString	RTSPServer.cpp	/^Boolean RTSPServer::RTSPClientConnection::parseHTTPRequestString(char* resultCmdName, unsigned resultCmdNameMaxSize,$/;"	f	class:RTSPServer::RTSPClientConnection
parsePlayNowHeader	RTSPServer.cpp	/^static Boolean parsePlayNowHeader(char const* buf) {$/;"	f	file:
parseTransportHeader	RTSPServer.cpp	/^static void parseTransportHeader(char const* buf,$/;"	f	file:
parseTransportHeaderForREGISTER	RTSPServer.cpp	/^static void parseTransportHeaderForREGISTER(char const* buf,$/;"	f	file:
reclaimStreamStates	RTSPServer.cpp	/^void RTSPServer::RTSPClientSession::reclaimStreamStates() {$/;"	f	class:RTSPServer::RTSPClientSession
registerStream	RTSPServer.cpp	/^unsigned RTSPServer::registerStream(ServerMediaSession* serverMediaSession,$/;"	f	class:RTSPServer
resetRequestBuffer	RTSPServer.cpp	/^void RTSPServer::RTSPClientConnection::resetRequestBuffer() {$/;"	f	class:RTSPServer::RTSPClientConnection
rtspRegisterResponseHandler	RTSPServer.cpp	/^void rtspRegisterResponseHandler(RTSPClient* rtspClient, int resultCode, char* resultString) {$/;"	f
rtspURL	RTSPServer.cpp	/^::rtspURL(ServerMediaSession const* serverMediaSession, int clientSocket) const {$/;"	f	class:RTSPServer
rtspURLPrefix	RTSPServer.cpp	/^char* RTSPServer::rtspURLPrefix(int clientSocket) const {$/;"	f	class:RTSPServer
setAuthenticationDatabase	RTSPServer.cpp	/^UserAuthenticationDatabase* RTSPServer::setAuthenticationDatabase(UserAuthenticationDatabase* newDB) {$/;"	f	class:RTSPServer
setRTSPResponse	RTSPServer.cpp	/^::setRTSPResponse(char const* responseStr) {$/;"	f	class:RTSPServer::RTSPClientConnection
setRTSPResponse	RTSPServer.cpp	/^::setRTSPResponse(char const* responseStr, char const* contentStr) {$/;"	f	class:RTSPServer::RTSPClientConnection
setRTSPResponse	RTSPServer.cpp	/^::setRTSPResponse(char const* responseStr, u_int32_t sessionId) {$/;"	f	class:RTSPServer::RTSPClientConnection
setRTSPResponse	RTSPServer.cpp	/^::setRTSPResponse(char const* responseStr, u_int32_t sessionId, char const* contentStr) {$/;"	f	class:RTSPServer::RTSPClientConnection
setUpTunnelingOverHTTP	RTSPServer.cpp	/^Boolean RTSPServer::setUpTunnelingOverHTTP(Port httpPort) {$/;"	f	class:RTSPServer
specialClientAccessCheck	RTSPServer.cpp	/^Boolean RTSPServer::specialClientAccessCheck(int \/*clientSocket*\/, struct sockaddr_in& \/*clientAddr*\/, char const* \/*urlSuffix*\/) {$/;"	f	class:RTSPServer
specialClientUserAccessCheck	RTSPServer.cpp	/^Boolean RTSPServer::specialClientUserAccessCheck(int \/*clientSocket*\/, struct sockaddr_in& \/*clientAddr*\/,$/;"	f	class:RTSPServer
stopTCPStreamingOnSocket	RTSPServer.cpp	/^void RTSPServer::stopTCPStreamingOnSocket(int socketNum) {$/;"	f	class:RTSPServer
streamingOverTCPRecord	RTSPServer.cpp	/^  streamingOverTCPRecord(u_int32_t sessionId, unsigned trackNum, streamingOverTCPRecord* next)$/;"	f	class:streamingOverTCPRecord
streamingOverTCPRecord	RTSPServer.cpp	/^class streamingOverTCPRecord {$/;"	c	file:
unnoteTCPStreamingOnSocket	RTSPServer.cpp	/^::unnoteTCPStreamingOnSocket(int socketNum, RTSPClientSession* clientSession, unsigned trackNum) {$/;"	f	class:RTSPServer
weImplementREGISTER	RTSPServer.cpp	/^Boolean RTSPServer::weImplementREGISTER(char const* \/*proxyURLSuffix*\/, char*& responseStr) {$/;"	f	class:RTSPServer
weImplementREGISTER	RTSPServer.cpp	/^Boolean RTSPServerWithREGISTERProxying::weImplementREGISTER(char const* proxyURLSuffix, char*& responseStr) {$/;"	f	class:RTSPServerWithREGISTERProxying
~ParamsForREGISTER	RTSPServer.cpp	/^RTSPServer::RTSPClientConnection::ParamsForREGISTER::~ParamsForREGISTER() {$/;"	f	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
~RTSPClientConnection	RTSPServer.cpp	/^RTSPServer::RTSPClientConnection::~RTSPClientConnection() {$/;"	f	class:RTSPServer::RTSPClientConnection
~RTSPClientSession	RTSPServer.cpp	/^RTSPServer::RTSPClientSession::~RTSPClientSession() {$/;"	f	class:RTSPServer::RTSPClientSession
~RTSPServer	RTSPServer.cpp	/^RTSPServer::~RTSPServer() {$/;"	f	class:RTSPServer
~RTSPServerWithREGISTERProxying	RTSPServer.cpp	/^RTSPServerWithREGISTERProxying::~RTSPServerWithREGISTERProxying() {$/;"	f	class:RTSPServerWithREGISTERProxying
~RegisterRequestRecord	RTSPServer.cpp	/^  virtual ~RegisterRequestRecord() {$/;"	f	class:RegisterRequestRecord
~streamingOverTCPRecord	RTSPServer.cpp	/^  virtual ~streamingOverTCPRecord() {$/;"	f	class:streamingOverTCPRecord
RTSPClientConnectionSupportingHTTPStreaming	RTSPServerSupportingHTTPStreaming.cpp	/^::RTSPClientConnectionSupportingHTTPStreaming(RTSPServer& ourServer, int clientSocket, struct sockaddr_in clientAddr)$/;"	f	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
RTSPServerSupportingHTTPStreaming	RTSPServerSupportingHTTPStreaming.cpp	/^::RTSPServerSupportingHTTPStreaming(UsageEnvironment& env, int ourSocket, Port rtspPort,$/;"	f	class:RTSPServerSupportingHTTPStreaming
afterStreaming	RTSPServerSupportingHTTPStreaming.cpp	/^void RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming::afterStreaming(void* clientData) {$/;"	f	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
createNew	RTSPServerSupportingHTTPStreaming.cpp	/^RTSPServerSupportingHTTPStreaming::createNew(UsageEnvironment& env, Port rtspPort,$/;"	f	class:RTSPServerSupportingHTTPStreaming
createNewClientConnection	RTSPServerSupportingHTTPStreaming.cpp	/^RTSPServerSupportingHTTPStreaming::createNewClientConnection(int clientSocket, struct sockaddr_in clientAddr) {$/;"	f	class:RTSPServerSupportingHTTPStreaming
handleHTTPCmd_StreamingGET	RTSPServerSupportingHTTPStreaming.cpp	/^::handleHTTPCmd_StreamingGET(char const* urlSuffix, char const* \/*fullRequestStr*\/) {$/;"	f	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
lastModifiedHeader	RTSPServerSupportingHTTPStreaming.cpp	/^static char const* lastModifiedHeader(char const* fileName) {$/;"	f	file:
~RTSPClientConnectionSupportingHTTPStreaming	RTSPServerSupportingHTTPStreaming.cpp	/^RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming::~RTSPClientConnectionSupportingHTTPStreaming() {$/;"	f	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
~RTSPServerSupportingHTTPStreaming	RTSPServerSupportingHTTPStreaming.cpp	/^RTSPServerSupportingHTTPStreaming::~RTSPServerSupportingHTTPStreaming() {$/;"	f	class:RTSPServerSupportingHTTPStreaming
SIPClient	SIPClient.cpp	/^SIPClient::SIPClient(UsageEnvironment& env,$/;"	f	class:SIPClient
_strncasecmp	SIPClient.cpp	25;"	d	file:
_strncasecmp	SIPClient.cpp	27;"	d	file:
createAuthenticatorString	SIPClient.cpp	/^SIPClient::createAuthenticatorString(Authenticator const* authenticator,$/;"	f	class:SIPClient
createNew	SIPClient.cpp	/^::createNew(UsageEnvironment& env,$/;"	f	class:SIPClient
doInviteStateMachine	SIPClient.cpp	/^void SIPClient::doInviteStateMachine(unsigned responseCode) {$/;"	f	class:SIPClient
doInviteStateTerminated	SIPClient.cpp	/^void SIPClient::doInviteStateTerminated(unsigned responseCode) {$/;"	f	class:SIPClient
getLine	SIPClient.cpp	/^static char* getLine(char* startOfLine) {$/;"	f	file:
getResponse	SIPClient.cpp	/^unsigned SIPClient::getResponse(char*& responseBuffer,$/;"	f	class:SIPClient
getResponseCode	SIPClient.cpp	/^unsigned SIPClient::getResponseCode() {$/;"	f	class:SIPClient
invite	SIPClient.cpp	/^char* SIPClient::invite(char const* url, Authenticator* authenticator) {$/;"	f	class:SIPClient
invite1	SIPClient.cpp	/^char* SIPClient::invite1(Authenticator* authenticator) {$/;"	f	class:SIPClient
inviteResponseHandler	SIPClient.cpp	/^void SIPClient::inviteResponseHandler(void* clientData, int \/*mask*\/) {$/;"	f	class:SIPClient
inviteWithPassword	SIPClient.cpp	/^char* SIPClient::inviteWithPassword(char const* url, char const* username,$/;"	f	class:SIPClient
parseResponseCode	SIPClient.cpp	/^Boolean SIPClient::parseResponseCode(char const* line,$/;"	f	class:SIPClient
parseSIPURL	SIPClient.cpp	/^Boolean SIPClient::parseSIPURL(UsageEnvironment& env, char const* url,$/;"	f	class:SIPClient
parseSIPURLUsernamePassword	SIPClient.cpp	/^Boolean SIPClient::parseSIPURLUsernamePassword(char const* url,$/;"	f	class:SIPClient
processURL	SIPClient.cpp	/^Boolean SIPClient::processURL(char const* url) {$/;"	f	class:SIPClient
reset	SIPClient.cpp	/^void SIPClient::reset() {$/;"	f	class:SIPClient
sendACK	SIPClient.cpp	/^Boolean SIPClient::sendACK() {$/;"	f	class:SIPClient
sendBYE	SIPClient.cpp	/^Boolean SIPClient::sendBYE() {$/;"	f	class:SIPClient
sendINVITE	SIPClient.cpp	/^Boolean SIPClient::sendINVITE() {$/;"	f	class:SIPClient
sendRequest	SIPClient.cpp	/^Boolean SIPClient::sendRequest(char const* requestString,$/;"	f	class:SIPClient
setProxyServer	SIPClient.cpp	/^void SIPClient::setProxyServer(unsigned proxyServerAddress,$/;"	f	class:SIPClient
setUserAgentString	SIPClient.cpp	/^void SIPClient::setUserAgentString(char const* userAgentName) {$/;"	f	class:SIPClient
timerAFires	SIPClient.cpp	/^unsigned const timerAFires = 0xAAAAAAAA;$/;"	v
timerAHandler	SIPClient.cpp	/^void SIPClient::timerAHandler(void* clientData) {$/;"	f	class:SIPClient
timerBFires	SIPClient.cpp	/^unsigned const timerBFires = 0xBBBBBBBB;$/;"	v
timerBHandler	SIPClient.cpp	/^void SIPClient::timerBHandler(void* clientData) {$/;"	f	class:SIPClient
timerDFires	SIPClient.cpp	/^unsigned const timerDFires = 0xDDDDDDDD;$/;"	v
timerDHandler	SIPClient.cpp	/^void SIPClient::timerDHandler(void* clientData) {$/;"	f	class:SIPClient
~SIPClient	SIPClient.cpp	/^SIPClient::~SIPClient() {$/;"	f	class:SIPClient
ServerMediaSession	ServerMediaSession.cpp	/^ServerMediaSession::ServerMediaSession(UsageEnvironment& env,$/;"	f	class:ServerMediaSession
ServerMediaSubsession	ServerMediaSession.cpp	/^ServerMediaSubsession::ServerMediaSubsession(UsageEnvironment& env)$/;"	f	class:ServerMediaSubsession
ServerMediaSubsessionIterator	ServerMediaSession.cpp	/^::ServerMediaSubsessionIterator(ServerMediaSession& session)$/;"	f	class:ServerMediaSubsessionIterator
addSubsession	ServerMediaSession.cpp	/^ServerMediaSession::addSubsession(ServerMediaSubsession* subsession) {$/;"	f	class:ServerMediaSession
createNew	ServerMediaSession.cpp	/^::createNew(UsageEnvironment& env,$/;"	f	class:ServerMediaSession
deleteAllSubsessions	ServerMediaSession.cpp	/^void ServerMediaSession::deleteAllSubsessions() {$/;"	f	class:ServerMediaSession
deleteStream	ServerMediaSession.cpp	/^void ServerMediaSubsession::deleteStream(unsigned \/*clientSessionId*\/,$/;"	f	class:ServerMediaSubsession
duration	ServerMediaSession.cpp	/^float ServerMediaSession::duration() const {$/;"	f	class:ServerMediaSession
duration	ServerMediaSession.cpp	/^float ServerMediaSubsession::duration() const {$/;"	f	class:ServerMediaSubsession
generateSDPDescription	ServerMediaSession.cpp	/^char* ServerMediaSession::generateSDPDescription() {$/;"	f	class:ServerMediaSession
getAbsoluteTimeRange	ServerMediaSession.cpp	/^void ServerMediaSubsession::getAbsoluteTimeRange(char*& absStartTime, char*& absEndTime) const {$/;"	f	class:ServerMediaSubsession
getCurrentNPT	ServerMediaSession.cpp	/^float ServerMediaSubsession::getCurrentNPT(void* \/*streamToken*\/) {$/;"	f	class:ServerMediaSubsession
getStreamSource	ServerMediaSession.cpp	/^FramedSource* ServerMediaSubsession::getStreamSource(void* \/*streamToken*\/) {$/;"	f	class:ServerMediaSubsession
isServerMediaSession	ServerMediaSession.cpp	/^Boolean ServerMediaSession::isServerMediaSession() const {$/;"	f	class:ServerMediaSession
libNameStr	ServerMediaSession.cpp	/^static char const* const libNameStr = "LIVE555 Streaming Media v";$/;"	v	file:
libVersionStr	ServerMediaSession.cpp	/^char const* const libVersionStr = LIVEMEDIA_LIBRARY_VERSION_STRING;$/;"	v
lookupByName	ServerMediaSession.cpp	/^::lookupByName(UsageEnvironment& env, char const* mediumName,$/;"	f	class:ServerMediaSession
next	ServerMediaSession.cpp	/^ServerMediaSubsession* ServerMediaSubsessionIterator::next() {$/;"	f	class:ServerMediaSubsessionIterator
nullSeekStream	ServerMediaSession.cpp	/^void ServerMediaSubsession::nullSeekStream(unsigned \/*clientSessionId*\/, void* \/*streamToken*\/,$/;"	f	class:ServerMediaSubsession
pauseStream	ServerMediaSession.cpp	/^void ServerMediaSubsession::pauseStream(unsigned \/*clientSessionId*\/,$/;"	f	class:ServerMediaSubsession
rangeSDPLine	ServerMediaSession.cpp	/^ServerMediaSubsession::rangeSDPLine() const {$/;"	f	class:ServerMediaSubsession
reset	ServerMediaSession.cpp	/^void ServerMediaSubsessionIterator::reset() {$/;"	f	class:ServerMediaSubsessionIterator
seekStream	ServerMediaSession.cpp	/^void ServerMediaSubsession::seekStream(unsigned \/*clientSessionId*\/,$/;"	f	class:ServerMediaSubsession
setServerAddressAndPortForSDP	ServerMediaSession.cpp	/^void ServerMediaSubsession::setServerAddressAndPortForSDP(netAddressBits addressBits,$/;"	f	class:ServerMediaSubsession
setStreamScale	ServerMediaSession.cpp	/^void ServerMediaSubsession::setStreamScale(unsigned \/*clientSessionId*\/,$/;"	f	class:ServerMediaSubsession
snprintf	ServerMediaSession.cpp	28;"	d	file:
testScaleFactor	ServerMediaSession.cpp	/^void ServerMediaSession::testScaleFactor(float& scale) {$/;"	f	class:ServerMediaSession
testScaleFactor	ServerMediaSession.cpp	/^void ServerMediaSubsession::testScaleFactor(float& scale) {$/;"	f	class:ServerMediaSubsession
trackId	ServerMediaSession.cpp	/^char const* ServerMediaSubsession::trackId() {$/;"	f	class:ServerMediaSubsession
~ServerMediaSession	ServerMediaSession.cpp	/^ServerMediaSession::~ServerMediaSession() {$/;"	f	class:ServerMediaSession
~ServerMediaSubsession	ServerMediaSession.cpp	/^ServerMediaSubsession::~ServerMediaSubsession() {$/;"	f	class:ServerMediaSubsession
~ServerMediaSubsessionIterator	ServerMediaSession.cpp	/^ServerMediaSubsessionIterator::~ServerMediaSubsessionIterator() {$/;"	f	class:ServerMediaSubsessionIterator
SimpleRTPSink	SimpleRTPSink.cpp	/^SimpleRTPSink::SimpleRTPSink(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:SimpleRTPSink
createNew	SimpleRTPSink.cpp	/^SimpleRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:SimpleRTPSink
doSpecialFrameHandling	SimpleRTPSink.cpp	/^void SimpleRTPSink::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:SimpleRTPSink
frameCanAppearAfterPacketStart	SimpleRTPSink.cpp	/^frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:SimpleRTPSink
sdpMediaType	SimpleRTPSink.cpp	/^char const* SimpleRTPSink::sdpMediaType() const {$/;"	f	class:SimpleRTPSink
~SimpleRTPSink	SimpleRTPSink.cpp	/^SimpleRTPSink::~SimpleRTPSink() {$/;"	f	class:SimpleRTPSink
MIMEtype	SimpleRTPSource.cpp	/^char const* SimpleRTPSource::MIMEtype() const {$/;"	f	class:SimpleRTPSource
SimpleRTPSource	SimpleRTPSource.cpp	/^::SimpleRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:SimpleRTPSource
createNew	SimpleRTPSource.cpp	/^SimpleRTPSource::createNew(UsageEnvironment& env,$/;"	f	class:SimpleRTPSource
processSpecialHeader	SimpleRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:SimpleRTPSource
~SimpleRTPSource	SimpleRTPSource.cpp	/^SimpleRTPSource::~SimpleRTPSource() {$/;"	f	class:SimpleRTPSource
BANK_SIZE	StreamParser.cpp	26;"	d	file:
NO_MORE_BUFFERED_INPUT	StreamParser.cpp	119;"	d	file:
StreamParser	StreamParser.cpp	/^StreamParser::StreamParser(FramedSource* inputSource,$/;"	f	class:StreamParser
afterGettingBytes	StreamParser.cpp	/^void StreamParser::afterGettingBytes(void* clientData,$/;"	f	class:StreamParser
afterGettingBytes1	StreamParser.cpp	/^void StreamParser::afterGettingBytes1(unsigned numBytesRead, struct timeval presentationTime) {$/;"	f	class:StreamParser
bankSize	StreamParser.cpp	/^unsigned StreamParser::bankSize() const {$/;"	f	class:StreamParser
ensureValidBytes1	StreamParser.cpp	/^void StreamParser::ensureValidBytes1(unsigned numBytesNeeded) {$/;"	f	class:StreamParser
flushInput	StreamParser.cpp	/^void StreamParser::flushInput() {$/;"	f	class:StreamParser
getBits	StreamParser.cpp	/^unsigned StreamParser::getBits(unsigned numBits) {$/;"	f	class:StreamParser
onInputClosure	StreamParser.cpp	/^void StreamParser::onInputClosure(void* clientData) {$/;"	f	class:StreamParser
onInputClosure1	StreamParser.cpp	/^void StreamParser::onInputClosure1() {$/;"	f	class:StreamParser
restoreSavedParserState	StreamParser.cpp	/^void StreamParser::restoreSavedParserState() {$/;"	f	class:StreamParser
saveParserState	StreamParser.cpp	/^void StreamParser::saveParserState() {$/;"	f	class:StreamParser
skipBits	StreamParser.cpp	/^void StreamParser::skipBits(unsigned numBits) {$/;"	f	class:StreamParser
~StreamParser	StreamParser.cpp	/^StreamParser::~StreamParser() {$/;"	f	class:StreamParser
StreamParser	StreamParser.hh	/^class StreamParser {$/;"	c
_STREAM_PARSER_HH	StreamParser.hh	22;"	d
clientContinueFunc	StreamParser.hh	/^  typedef void (clientContinueFunc)(void* clientData,$/;"	t	class:StreamParser
curBank	StreamParser.hh	/^  unsigned char* curBank() { return fCurBank; }$/;"	f	class:StreamParser
curOffset	StreamParser.hh	/^  unsigned curOffset() const { return fCurParserIndex; }$/;"	f	class:StreamParser
ensureValidBytes	StreamParser.hh	/^  void ensureValidBytes(unsigned numBytesNeeded) {$/;"	f	class:StreamParser
fBank	StreamParser.hh	/^  unsigned char* fBank[2];$/;"	m	class:StreamParser
fClientContinueClientData	StreamParser.hh	/^  void* fClientContinueClientData;$/;"	m	class:StreamParser
fClientContinueFunc	StreamParser.hh	/^  clientContinueFunc* fClientContinueFunc;$/;"	m	class:StreamParser
fClientOnInputCloseClientData	StreamParser.hh	/^  void* fClientOnInputCloseClientData;$/;"	m	class:StreamParser
fClientOnInputCloseFunc	StreamParser.hh	/^  FramedSource::onCloseFunc* fClientOnInputCloseFunc;$/;"	m	class:StreamParser
fCurBank	StreamParser.hh	/^  unsigned char* fCurBank;$/;"	m	class:StreamParser
fCurBankNum	StreamParser.hh	/^  unsigned char fCurBankNum;$/;"	m	class:StreamParser
fCurParserIndex	StreamParser.hh	/^  unsigned fCurParserIndex; \/\/ <= fTotNumValidBytes$/;"	m	class:StreamParser
fHaveSeenEOF	StreamParser.hh	/^  Boolean fHaveSeenEOF;$/;"	m	class:StreamParser
fInputSource	StreamParser.hh	/^  FramedSource* fInputSource; \/\/ should be a byte-stream source??$/;"	m	class:StreamParser
fLastSeenPresentationTime	StreamParser.hh	/^  struct timeval fLastSeenPresentationTime; \/\/ hack used for EOF handling$/;"	m	class:StreamParser	typeref:struct:StreamParser::timeval
fRemainingUnparsedBits	StreamParser.hh	/^  unsigned char fRemainingUnparsedBits; \/\/ in previous byte: [0,7]$/;"	m	class:StreamParser
fSavedParserIndex	StreamParser.hh	/^  unsigned fSavedParserIndex; \/\/ <= fCurParserIndex$/;"	m	class:StreamParser
fSavedRemainingUnparsedBits	StreamParser.hh	/^  unsigned char fSavedRemainingUnparsedBits;$/;"	m	class:StreamParser
fTotNumValidBytes	StreamParser.hh	/^  unsigned fTotNumValidBytes; \/\/ <= BANK_SIZE$/;"	m	class:StreamParser
get1Byte	StreamParser.hh	/^  u_int8_t get1Byte() { \/\/ byte-aligned$/;"	f	class:StreamParser
get2Bytes	StreamParser.hh	/^  u_int16_t get2Bytes() {$/;"	f	class:StreamParser
get4Bytes	StreamParser.hh	/^  u_int32_t get4Bytes() { \/\/ byte-aligned; returned in big-endian order$/;"	f	class:StreamParser
getBytes	StreamParser.hh	/^  void getBytes(u_int8_t* to, unsigned numBytes) {$/;"	f	class:StreamParser
haveSeenEOF	StreamParser.hh	/^  Boolean haveSeenEOF() const { return fHaveSeenEOF; }$/;"	f	class:StreamParser
lastParsed	StreamParser.hh	/^  unsigned char* lastParsed() { return &curBank()[fCurParserIndex-1]; }$/;"	f	class:StreamParser
nextToParse	StreamParser.hh	/^  unsigned char* nextToParse() { return &curBank()[fCurParserIndex]; }$/;"	f	class:StreamParser
skipBytes	StreamParser.hh	/^  void skipBytes(unsigned numBytes) {$/;"	f	class:StreamParser
test1Byte	StreamParser.hh	/^  u_int8_t test1Byte() { \/\/ as above, but doesn't advance ptr$/;"	f	class:StreamParser
test4Bytes	StreamParser.hh	/^  u_int32_t test4Bytes() { \/\/ as above, but doesn't advance ptr$/;"	f	class:StreamParser
testBytes	StreamParser.hh	/^  void testBytes(u_int8_t* to, unsigned numBytes) { \/\/ as above, but doesn't advance ptr$/;"	f	class:StreamParser
totNumValidBytes	StreamParser.hh	/^  unsigned& totNumValidBytes() { return fTotNumValidBytes; }$/;"	f	class:StreamParser
StreamReplica	StreamReplicator.cpp	/^StreamReplica::StreamReplica(StreamReplicator& ourReplicator)$/;"	f	class:StreamReplica
StreamReplica	StreamReplicator.cpp	/^class StreamReplica: public FramedSource {$/;"	c	file:
StreamReplicator	StreamReplicator.cpp	/^StreamReplicator::StreamReplicator(UsageEnvironment& env, FramedSource* inputSource, Boolean deleteWhenLastReplicaDies)$/;"	f	class:StreamReplicator
afterGettingFrame	StreamReplicator.cpp	/^void StreamReplicator::afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:StreamReplicator
afterGettingFrame	StreamReplicator.cpp	/^void StreamReplicator::afterGettingFrame(void* clientData, unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:StreamReplicator
copyReceivedFrame	StreamReplicator.cpp	/^void StreamReplica::copyReceivedFrame(StreamReplica* toReplica, StreamReplica* fromReplica) {$/;"	f	class:StreamReplica
createNew	StreamReplicator.cpp	/^StreamReplicator* StreamReplicator::createNew(UsageEnvironment& env, FramedSource* inputSource, Boolean deleteWhenLastReplicaDies) {$/;"	f	class:StreamReplicator
createStreamReplica	StreamReplicator.cpp	/^FramedSource* StreamReplicator::createStreamReplica() {$/;"	f	class:StreamReplicator
deactivateStreamReplica	StreamReplicator.cpp	/^void StreamReplicator::deactivateStreamReplica(StreamReplica* replicaBeingDeactivated) {$/;"	f	class:StreamReplicator
deliverReceivedFrame	StreamReplicator.cpp	/^void StreamReplicator::deliverReceivedFrame() {$/;"	f	class:StreamReplicator
doGetNextFrame	StreamReplicator.cpp	/^void StreamReplica::doGetNextFrame() {$/;"	f	class:StreamReplica
doStopGettingFrames	StreamReplicator.cpp	/^void StreamReplica::doStopGettingFrames() {$/;"	f	class:StreamReplica
fFrameIndex	StreamReplicator.cpp	/^  int fFrameIndex; \/\/ 0 or 1, depending upon which frame we're currently requesting; could also be -1 if we've stopped playing$/;"	m	class:StreamReplica	file:
fNext	StreamReplicator.cpp	/^  StreamReplica* fNext;$/;"	m	class:StreamReplica	file:
fOurReplicator	StreamReplicator.cpp	/^  StreamReplicator& fOurReplicator;$/;"	m	class:StreamReplica	file:
getNextFrame	StreamReplicator.cpp	/^void StreamReplicator::getNextFrame(StreamReplica* replica) {$/;"	f	class:StreamReplicator
onSourceClosure	StreamReplicator.cpp	/^void StreamReplicator::onSourceClosure() {$/;"	f	class:StreamReplicator
onSourceClosure	StreamReplicator.cpp	/^void StreamReplicator::onSourceClosure(void* clientData) {$/;"	f	class:StreamReplicator
removeStreamReplica	StreamReplicator.cpp	/^void StreamReplicator::removeStreamReplica(StreamReplica* replicaBeingRemoved) {$/;"	f	class:StreamReplicator
~StreamReplica	StreamReplicator.cpp	/^StreamReplica::~StreamReplica() {$/;"	f	class:StreamReplica
~StreamReplicator	StreamReplicator.cpp	/^StreamReplicator::~StreamReplicator() {$/;"	f	class:StreamReplicator
IDLE_TIMEOUT_MICROSECONDS	T140TextRTPSink.cpp	92;"	d	file:
T140IdleFilter	T140TextRTPSink.cpp	/^T140IdleFilter::T140IdleFilter(UsageEnvironment& env, FramedSource* inputSource)$/;"	f	class:T140IdleFilter
T140TextRTPSink	T140TextRTPSink.cpp	/^T140TextRTPSink::T140TextRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat)$/;"	f	class:T140TextRTPSink
afterGettingFrame	T140TextRTPSink.cpp	/^void T140IdleFilter::afterGettingFrame(unsigned frameSize,$/;"	f	class:T140IdleFilter
afterGettingFrame	T140TextRTPSink.cpp	/^void T140IdleFilter::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:T140IdleFilter
continuePlaying	T140TextRTPSink.cpp	/^Boolean T140TextRTPSink::continuePlaying() {$/;"	f	class:T140TextRTPSink
createNew	T140TextRTPSink.cpp	/^T140TextRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:T140TextRTPSink
deliverEmptyFrame	T140TextRTPSink.cpp	/^void T140IdleFilter::deliverEmptyFrame() {$/;"	f	class:T140IdleFilter
deliverFromBuffer	T140TextRTPSink.cpp	/^void T140IdleFilter::deliverFromBuffer() {$/;"	f	class:T140IdleFilter
doGetNextFrame	T140TextRTPSink.cpp	/^void T140IdleFilter::doGetNextFrame() {$/;"	f	class:T140IdleFilter
doSpecialFrameHandling	T140TextRTPSink.cpp	/^void T140TextRTPSink::doSpecialFrameHandling(unsigned \/*fragmentationOffset*\/,$/;"	f	class:T140TextRTPSink
doStopGettingFrames	T140TextRTPSink.cpp	/^void T140IdleFilter::doStopGettingFrames() {$/;"	f	class:T140IdleFilter
frameCanAppearAfterPacketStart	T140TextRTPSink.cpp	/^Boolean T140TextRTPSink::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/, unsigned \/*numBytesInFrame*\/) const {$/;"	f	class:T140TextRTPSink
handleIdleTimeout	T140TextRTPSink.cpp	/^void T140IdleFilter::handleIdleTimeout() {$/;"	f	class:T140IdleFilter
handleIdleTimeout	T140TextRTPSink.cpp	/^void T140IdleFilter::handleIdleTimeout(void* clientData) {$/;"	f	class:T140IdleFilter
onSourceClosure	T140TextRTPSink.cpp	/^void T140IdleFilter::onSourceClosure() {$/;"	f	class:T140IdleFilter
onSourceClosure	T140TextRTPSink.cpp	/^void T140IdleFilter::onSourceClosure(void* clientData) {$/;"	f	class:T140IdleFilter
~T140IdleFilter	T140TextRTPSink.cpp	/^T140IdleFilter::~T140IdleFilter() {$/;"	f	class:T140IdleFilter
~T140TextRTPSink	T140TextRTPSink.cpp	/^T140TextRTPSink::~T140TextRTPSink() {$/;"	f	class:T140TextRTPSink
TCPStreamSink	TCPStreamSink.cpp	/^TCPStreamSink::TCPStreamSink(UsageEnvironment& env, int socketNum)$/;"	f	class:TCPStreamSink
TCP_STREAM_SINK_MIN_READ_SIZE	TCPStreamSink.cpp	48;"	d	file:
afterGettingFrame	TCPStreamSink.cpp	/^void TCPStreamSink::afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes) {$/;"	f	class:TCPStreamSink
afterGettingFrame	TCPStreamSink.cpp	/^void TCPStreamSink::afterGettingFrame(void* clientData, unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:TCPStreamSink
continuePlaying	TCPStreamSink.cpp	/^Boolean TCPStreamSink::continuePlaying() {$/;"	f	class:TCPStreamSink
createNew	TCPStreamSink.cpp	/^TCPStreamSink* TCPStreamSink::createNew(UsageEnvironment& env, int socketNum) {$/;"	f	class:TCPStreamSink
ourOnSourceClosure	TCPStreamSink.cpp	/^void TCPStreamSink::ourOnSourceClosure(void* clientData) {$/;"	f	class:TCPStreamSink
ourOnSourceClosure1	TCPStreamSink.cpp	/^void TCPStreamSink::ourOnSourceClosure1() {$/;"	f	class:TCPStreamSink
processBuffer	TCPStreamSink.cpp	/^void TCPStreamSink::processBuffer() {$/;"	f	class:TCPStreamSink
socketWritableHandler	TCPStreamSink.cpp	/^void TCPStreamSink::socketWritableHandler(void* clientData, int \/*mask*\/) {$/;"	f	class:TCPStreamSink
socketWritableHandler1	TCPStreamSink.cpp	/^void TCPStreamSink::socketWritableHandler1() {$/;"	f	class:TCPStreamSink
~TCPStreamSink	TCPStreamSink.cpp	/^TCPStreamSink::~TCPStreamSink() {$/;"	f	class:TCPStreamSink
TextRTPSink	TextRTPSink.cpp	/^TextRTPSink::TextRTPSink(UsageEnvironment& env,$/;"	f	class:TextRTPSink
sdpMediaType	TextRTPSink.cpp	/^char const* TextRTPSink::sdpMediaType() const {$/;"	f	class:TextRTPSink
~TextRTPSink	TextRTPSink.cpp	/^TextRTPSink::~TextRTPSink() {$/;"	f	class:TextRTPSink
TheoraVideoRTPSink	TheoraVideoRTPSink.cpp	/^::TheoraVideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, u_int8_t rtpPayloadFormat,$/;"	f	class:TheoraVideoRTPSink
auxSDPLine	TheoraVideoRTPSink.cpp	/^char const* TheoraVideoRTPSink::auxSDPLine() {$/;"	f	class:TheoraVideoRTPSink
createNew	TheoraVideoRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs, u_int8_t rtpPayloadFormat,$/;"	f	class:TheoraVideoRTPSink
doSpecialFrameHandling	TheoraVideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:TheoraVideoRTPSink
frameCanAppearAfterPacketStart	TheoraVideoRTPSink.cpp	/^Boolean TheoraVideoRTPSink::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:TheoraVideoRTPSink
specialHeaderSize	TheoraVideoRTPSink.cpp	/^unsigned TheoraVideoRTPSink::specialHeaderSize() const {$/;"	f	class:TheoraVideoRTPSink
~TheoraVideoRTPSink	TheoraVideoRTPSink.cpp	/^TheoraVideoRTPSink::~TheoraVideoRTPSink() {$/;"	f	class:TheoraVideoRTPSink
MIMEtype	TheoraVideoRTPSource.cpp	/^char const* TheoraVideoRTPSource::MIMEtype() const {$/;"	f	class:TheoraVideoRTPSource
TheoraBufferedPacket	TheoraVideoRTPSource.cpp	/^TheoraBufferedPacket::TheoraBufferedPacket() {$/;"	f	class:TheoraBufferedPacket
TheoraBufferedPacket	TheoraVideoRTPSource.cpp	/^class TheoraBufferedPacket: public BufferedPacket {$/;"	c	file:
TheoraBufferedPacketFactory	TheoraVideoRTPSource.cpp	/^class TheoraBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
TheoraVideoRTPSource	TheoraVideoRTPSource.cpp	/^::TheoraVideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:TheoraVideoRTPSource
createNew	TheoraVideoRTPSource.cpp	/^TheoraVideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:TheoraVideoRTPSource
createNewPacket	TheoraVideoRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* \/*ourSource*\/) {$/;"	f	class:TheoraBufferedPacketFactory
nextEnclosedFrameSize	TheoraVideoRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:TheoraBufferedPacket
processSpecialHeader	TheoraVideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:TheoraVideoRTPSource
~TheoraBufferedPacket	TheoraVideoRTPSource.cpp	/^TheoraBufferedPacket::~TheoraBufferedPacket() {$/;"	f	class:TheoraBufferedPacket
~TheoraVideoRTPSource	TheoraVideoRTPSource.cpp	/^TheoraVideoRTPSource::~TheoraVideoRTPSource() {$/;"	f	class:TheoraVideoRTPSource
VP8VideoRTPSink	VP8VideoRTPSink.cpp	/^::VP8VideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat)$/;"	f	class:VP8VideoRTPSink
createNew	VP8VideoRTPSink.cpp	/^VP8VideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat) {$/;"	f	class:VP8VideoRTPSink
doSpecialFrameHandling	VP8VideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:VP8VideoRTPSink
frameCanAppearAfterPacketStart	VP8VideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:VP8VideoRTPSink
specialHeaderSize	VP8VideoRTPSink.cpp	/^unsigned VP8VideoRTPSink::specialHeaderSize() const {$/;"	f	class:VP8VideoRTPSink
~VP8VideoRTPSink	VP8VideoRTPSink.cpp	/^VP8VideoRTPSink::~VP8VideoRTPSink() {$/;"	f	class:VP8VideoRTPSink
MIMEtype	VP8VideoRTPSource.cpp	/^char const* VP8VideoRTPSource::MIMEtype() const {$/;"	f	class:VP8VideoRTPSource
VP8VideoRTPSource	VP8VideoRTPSource.cpp	/^::VP8VideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VP8VideoRTPSource
createNew	VP8VideoRTPSource.cpp	/^VP8VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VP8VideoRTPSource
incrHeader	VP8VideoRTPSource.cpp	41;"	d	file:
processSpecialHeader	VP8VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:VP8VideoRTPSource
~VP8VideoRTPSource	VP8VideoRTPSource.cpp	/^VP8VideoRTPSource::~VP8VideoRTPSource() {$/;"	f	class:VP8VideoRTPSource
VP9VideoRTPSink	VP9VideoRTPSink.cpp	/^::VP9VideoRTPSink(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat)$/;"	f	class:VP9VideoRTPSink
createNew	VP9VideoRTPSink.cpp	/^VP9VideoRTPSink::createNew(UsageEnvironment& env, Groupsock* RTPgs, unsigned char rtpPayloadFormat) {$/;"	f	class:VP9VideoRTPSink
doSpecialFrameHandling	VP9VideoRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:VP9VideoRTPSink
frameCanAppearAfterPacketStart	VP9VideoRTPSink.cpp	/^::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:VP9VideoRTPSink
specialHeaderSize	VP9VideoRTPSink.cpp	/^unsigned VP9VideoRTPSink::specialHeaderSize() const {$/;"	f	class:VP9VideoRTPSink
~VP9VideoRTPSink	VP9VideoRTPSink.cpp	/^VP9VideoRTPSink::~VP9VideoRTPSink() {$/;"	f	class:VP9VideoRTPSink
MIMEtype	VP9VideoRTPSource.cpp	/^char const* VP9VideoRTPSource::MIMEtype() const {$/;"	f	class:VP9VideoRTPSource
VP9VideoRTPSource	VP9VideoRTPSource.cpp	/^::VP9VideoRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VP9VideoRTPSource
createNew	VP9VideoRTPSource.cpp	/^VP9VideoRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VP9VideoRTPSource
incrHeader	VP9VideoRTPSource.cpp	41;"	d	file:
processSpecialHeader	VP9VideoRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:VP9VideoRTPSource
~VP9VideoRTPSource	VP9VideoRTPSource.cpp	/^VP9VideoRTPSource::~VP9VideoRTPSource() {$/;"	f	class:VP9VideoRTPSource
VideoRTPSink	VideoRTPSink.cpp	/^VideoRTPSink::VideoRTPSink(UsageEnvironment& env,$/;"	f	class:VideoRTPSink
sdpMediaType	VideoRTPSink.cpp	/^char const* VideoRTPSink::sdpMediaType() const {$/;"	f	class:VideoRTPSink
~VideoRTPSink	VideoRTPSink.cpp	/^VideoRTPSink::~VideoRTPSink() {$/;"	f	class:VideoRTPSink
VorbisAudioRTPSink	VorbisAudioRTPSink.cpp	/^::VorbisAudioRTPSink(UsageEnvironment& env, Groupsock* RTPgs, u_int8_t rtpPayloadFormat,$/;"	f	class:VorbisAudioRTPSink
auxSDPLine	VorbisAudioRTPSink.cpp	/^char const* VorbisAudioRTPSink::auxSDPLine() {$/;"	f	class:VorbisAudioRTPSink
createNew	VorbisAudioRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VorbisAudioRTPSink
createNew	VorbisAudioRTPSink.cpp	/^::createNew(UsageEnvironment& env, Groupsock* RTPgs,u_int8_t rtpPayloadFormat,$/;"	f	class:VorbisAudioRTPSink
doSpecialFrameHandling	VorbisAudioRTPSink.cpp	/^::doSpecialFrameHandling(unsigned fragmentationOffset,$/;"	f	class:VorbisAudioRTPSink
frameCanAppearAfterPacketStart	VorbisAudioRTPSink.cpp	/^Boolean VorbisAudioRTPSink::frameCanAppearAfterPacketStart(unsigned char const* \/*frameStart*\/,$/;"	f	class:VorbisAudioRTPSink
frameSpecificHeaderSize	VorbisAudioRTPSink.cpp	/^unsigned VorbisAudioRTPSink::frameSpecificHeaderSize() const {$/;"	f	class:VorbisAudioRTPSink
generateVorbisOrTheoraConfigStr	VorbisAudioRTPSink.cpp	/^char* generateVorbisOrTheoraConfigStr(u_int8_t* identificationHeader, unsigned identificationHeaderSize,$/;"	f
specialHeaderSize	VorbisAudioRTPSink.cpp	/^unsigned VorbisAudioRTPSink::specialHeaderSize() const {$/;"	f	class:VorbisAudioRTPSink
~VorbisAudioRTPSink	VorbisAudioRTPSink.cpp	/^VorbisAudioRTPSink::~VorbisAudioRTPSink() {$/;"	f	class:VorbisAudioRTPSink
ADVANCE	VorbisAudioRTPSource.cpp	121;"	d	file:
GET_ENCODED_VAL	VorbisAudioRTPSource.cpp	122;"	d	file:
MIMEtype	VorbisAudioRTPSource.cpp	/^char const* VorbisAudioRTPSource::MIMEtype() const {$/;"	f	class:VorbisAudioRTPSource
VorbisAudioRTPSource	VorbisAudioRTPSource.cpp	/^::VorbisAudioRTPSource(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VorbisAudioRTPSource
VorbisBufferedPacket	VorbisAudioRTPSource.cpp	/^VorbisBufferedPacket::VorbisBufferedPacket() {$/;"	f	class:VorbisBufferedPacket
VorbisBufferedPacket	VorbisAudioRTPSource.cpp	/^class VorbisBufferedPacket: public BufferedPacket {$/;"	c	file:
VorbisBufferedPacketFactory	VorbisAudioRTPSource.cpp	/^class VorbisBufferedPacketFactory: public BufferedPacketFactory {$/;"	c	file:
createNew	VorbisAudioRTPSource.cpp	/^VorbisAudioRTPSource::createNew(UsageEnvironment& env, Groupsock* RTPgs,$/;"	f	class:VorbisAudioRTPSource
createNewPacket	VorbisAudioRTPSource.cpp	/^::createNewPacket(MultiFramedRTPSource* \/*ourSource*\/) {$/;"	f	class:VorbisBufferedPacketFactory
nextEnclosedFrameSize	VorbisAudioRTPSource.cpp	/^::nextEnclosedFrameSize(unsigned char*& framePtr, unsigned dataSize) {$/;"	f	class:VorbisBufferedPacket
parseVorbisOrTheoraConfigStr	VorbisAudioRTPSource.cpp	/^void parseVorbisOrTheoraConfigStr(char const* configStr,$/;"	f
processSpecialHeader	VorbisAudioRTPSource.cpp	/^::processSpecialHeader(BufferedPacket* packet,$/;"	f	class:VorbisAudioRTPSource
~VorbisAudioRTPSource	VorbisAudioRTPSource.cpp	/^VorbisAudioRTPSource::~VorbisAudioRTPSource() {$/;"	f	class:VorbisAudioRTPSource
~VorbisBufferedPacket	VorbisAudioRTPSource.cpp	/^VorbisBufferedPacket::~VorbisBufferedPacket() {$/;"	f	class:VorbisBufferedPacket
WAVAudioFileServerMediaSubsession	WAVAudioFileServerMediaSubsession.cpp	/^::WAVAudioFileServerMediaSubsession(UsageEnvironment& env, char const* fileName,$/;"	f	class:WAVAudioFileServerMediaSubsession
createNew	WAVAudioFileServerMediaSubsession.cpp	/^::createNew(UsageEnvironment& env, char const* fileName, Boolean reuseFirstSource,$/;"	f	class:WAVAudioFileServerMediaSubsession
createNewRTPSink	WAVAudioFileServerMediaSubsession.cpp	/^::createNewRTPSink(Groupsock* rtpGroupsock,$/;"	f	class:WAVAudioFileServerMediaSubsession
createNewStreamSource	WAVAudioFileServerMediaSubsession.cpp	/^::createNewStreamSource(unsigned \/*clientSessionId*\/, unsigned& estBitrate) {$/;"	f	class:WAVAudioFileServerMediaSubsession
duration	WAVAudioFileServerMediaSubsession.cpp	/^float WAVAudioFileServerMediaSubsession::duration() const {$/;"	f	class:WAVAudioFileServerMediaSubsession
seekStreamSource	WAVAudioFileServerMediaSubsession.cpp	/^::seekStreamSource(FramedSource* inputSource, double& seekNPT, double streamDuration, u_int64_t& numBytes) {$/;"	f	class:WAVAudioFileServerMediaSubsession
setStreamSourceDuration	WAVAudioFileServerMediaSubsession.cpp	/^::setStreamSourceDuration(FramedSource* inputSource, double streamDuration, u_int64_t& numBytes) {$/;"	f	class:WAVAudioFileServerMediaSubsession
setStreamSourceScale	WAVAudioFileServerMediaSubsession.cpp	/^::setStreamSourceScale(FramedSource* inputSource, float scale) {$/;"	f	class:WAVAudioFileServerMediaSubsession
testScaleFactor	WAVAudioFileServerMediaSubsession.cpp	/^void WAVAudioFileServerMediaSubsession::testScaleFactor(float& scale) {$/;"	f	class:WAVAudioFileServerMediaSubsession
~WAVAudioFileServerMediaSubsession	WAVAudioFileServerMediaSubsession.cpp	/^::~WAVAudioFileServerMediaSubsession() {$/;"	f	class:WAVAudioFileServerMediaSubsession
WAVAudioFileSource	WAVAudioFileSource.cpp	/^WAVAudioFileSource::WAVAudioFileSource(UsageEnvironment& env, FILE* fid)$/;"	f	class:WAVAudioFileSource
createNew	WAVAudioFileSource.cpp	/^WAVAudioFileSource::createNew(UsageEnvironment& env, char const* fileName) {$/;"	f	class:WAVAudioFileSource
doGetNextFrame	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::doGetNextFrame() {$/;"	f	class:WAVAudioFileSource
doReadFromFile	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::doReadFromFile() {$/;"	f	class:WAVAudioFileSource
doStopGettingFrames	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::doStopGettingFrames() {$/;"	f	class:WAVAudioFileSource
fileReadableHandler	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::fileReadableHandler(WAVAudioFileSource* source, int \/*mask*\/) {$/;"	f	class:WAVAudioFileSource
get2Bytes	WAVAudioFileSource.cpp	/^static Boolean get2Bytes(FILE* fid, u_int16_t& result) {\/\/little-endian$/;"	f	file:
get4Bytes	WAVAudioFileSource.cpp	/^static Boolean get4Bytes(FILE* fid, u_int32_t& result) { \/\/ little-endian$/;"	f	file:
getAudioFormat	WAVAudioFileSource.cpp	/^unsigned char WAVAudioFileSource::getAudioFormat() {$/;"	f	class:WAVAudioFileSource
getAverageLevel	WAVAudioFileSource.cpp	/^double WAVAudioFileSource::getAverageLevel() const {$/;"	f	class:WAVAudioFileSource
limitNumBytesToStream	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::limitNumBytesToStream(unsigned numBytesToStream) {$/;"	f	class:WAVAudioFileSource
nextc	WAVAudioFileSource.cpp	85;"	d	file:
numPCMBytes	WAVAudioFileSource.cpp	/^unsigned WAVAudioFileSource::numPCMBytes() const {$/;"	f	class:WAVAudioFileSource
seekToPCMByte	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::seekToPCMByte(unsigned byteNumber) {$/;"	f	class:WAVAudioFileSource
setInputPort	WAVAudioFileSource.cpp	/^Boolean WAVAudioFileSource::setInputPort(int \/*portIndex*\/) {$/;"	f	class:WAVAudioFileSource
setScaleFactor	WAVAudioFileSource.cpp	/^void WAVAudioFileSource::setScaleFactor(int scale) {$/;"	f	class:WAVAudioFileSource
skipBytes	WAVAudioFileSource.cpp	/^static Boolean skipBytes(FILE* fid, int num) {$/;"	f	file:
~WAVAudioFileSource	WAVAudioFileSource.cpp	/^WAVAudioFileSource::~WAVAudioFileSource() {$/;"	f	class:WAVAudioFileSource
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
AC3AudioFileServerMediaSubsession	include/AC3AudioFileServerMediaSubsession.hh	/^class AC3AudioFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_AC3_AUDIO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/AC3AudioFileServerMediaSubsession.hh	23;"	d
AC3AudioRTPSink	include/AC3AudioRTPSink.hh	/^class AC3AudioRTPSink: public AudioRTPSink {$/;"	c
_AC3_AUDIO_RTP_SINK_HH	include/AC3AudioRTPSink.hh	22;"	d
fTotNumFragmentsUsed	include/AC3AudioRTPSink.hh	/^  unsigned char fTotNumFragmentsUsed; \/\/ used only if a frame gets fragmented across multiple packets$/;"	m	class:AC3AudioRTPSink
AC3AudioRTPSource	include/AC3AudioRTPSource.hh	/^class AC3AudioRTPSource: public MultiFramedRTPSource {$/;"	c
_AC3_AUDIO_RTP_SOURCE_HH	include/AC3AudioRTPSource.hh	22;"	d
AC3AudioStreamFramer	include/AC3AudioStreamFramer.hh	/^class AC3AudioStreamFramer: public FramedFilter {$/;"	c
_AC3_AUDIO_STREAM_FRAMER_HH	include/AC3AudioStreamFramer.hh	22;"	d
fNextFramePresentationTime	include/AC3AudioStreamFramer.hh	/^  struct timeval fNextFramePresentationTime;$/;"	m	class:AC3AudioStreamFramer	typeref:struct:AC3AudioStreamFramer::timeval
fOurStreamCode	include/AC3AudioStreamFramer.hh	/^  unsigned char fOurStreamCode;$/;"	m	class:AC3AudioStreamFramer
fParser	include/AC3AudioStreamFramer.hh	/^  class AC3AudioStreamParser* fParser;$/;"	m	class:AC3AudioStreamFramer	typeref:class:AC3AudioStreamFramer::AC3AudioStreamParser
ADTSAudioFileServerMediaSubsession	include/ADTSAudioFileServerMediaSubsession.hh	/^class ADTSAudioFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_ADTS_AUDIO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/ADTSAudioFileServerMediaSubsession.hh	23;"	d
ADTSAudioFileSource	include/ADTSAudioFileSource.hh	/^class ADTSAudioFileSource: public FramedFileSource {$/;"	c
_ADTS_AUDIO_FILE_SOURCE_HH	include/ADTSAudioFileSource.hh	22;"	d
configStr	include/ADTSAudioFileSource.hh	/^  char const* configStr() const { return fConfigStr; }$/;"	f	class:ADTSAudioFileSource
fConfigStr	include/ADTSAudioFileSource.hh	/^  char fConfigStr[5];$/;"	m	class:ADTSAudioFileSource
fNumChannels	include/ADTSAudioFileSource.hh	/^  unsigned fNumChannels;$/;"	m	class:ADTSAudioFileSource
fSamplingFrequency	include/ADTSAudioFileSource.hh	/^  unsigned fSamplingFrequency;$/;"	m	class:ADTSAudioFileSource
fuSecsPerFrame	include/ADTSAudioFileSource.hh	/^  unsigned fuSecsPerFrame;$/;"	m	class:ADTSAudioFileSource
numChannels	include/ADTSAudioFileSource.hh	/^  unsigned numChannels() const { return fNumChannels; }$/;"	f	class:ADTSAudioFileSource
samplingFrequency	include/ADTSAudioFileSource.hh	/^  unsigned samplingFrequency() const { return fSamplingFrequency; }$/;"	f	class:ADTSAudioFileSource
AMRAudioFileServerMediaSubsession	include/AMRAudioFileServerMediaSubsession.hh	/^class AMRAudioFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_AMR_AUDIO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/AMRAudioFileServerMediaSubsession.hh	23;"	d
AMRAudioFileSink	include/AMRAudioFileSink.hh	/^class AMRAudioFileSink: public FileSink {$/;"	c
_AMR_AUDIO_FILE_SINK_HH	include/AMRAudioFileSink.hh	22;"	d
fHaveWrittenHeader	include/AMRAudioFileSink.hh	/^  Boolean fHaveWrittenHeader;$/;"	m	class:AMRAudioFileSink
AMRAudioFileSource	include/AMRAudioFileSource.hh	/^class AMRAudioFileSource: public AMRAudioSource {$/;"	c
_AMR_AUDIO_FILE_SOURCE_HH	include/AMRAudioFileSource.hh	22;"	d
fFid	include/AMRAudioFileSource.hh	/^  FILE* fFid;$/;"	m	class:AMRAudioFileSource
AMRAudioRTPSink	include/AMRAudioRTPSink.hh	/^class AMRAudioRTPSink: public AudioRTPSink {$/;"	c
_AMR_AUDIO_RTP_SINK_HH	include/AMRAudioRTPSink.hh	22;"	d
fFmtpSDPLine	include/AMRAudioRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:AMRAudioRTPSink
fSourceIsWideband	include/AMRAudioRTPSink.hh	/^  Boolean fSourceIsWideband;$/;"	m	class:AMRAudioRTPSink
sourceIsWideband	include/AMRAudioRTPSink.hh	/^  Boolean sourceIsWideband() const { return fSourceIsWideband; }$/;"	f	class:AMRAudioRTPSink
AMRAudioRTPSource	include/AMRAudioRTPSource.hh	/^class AMRAudioRTPSource {$/;"	c
_AMR_AUDIO_RTP_SOURCE_HH	include/AMRAudioRTPSource.hh	22;"	d
AMRAudioSource	include/AMRAudioSource.hh	/^class AMRAudioSource: public FramedSource {$/;"	c
_AMR_AUDIO_SOURCE_HH	include/AMRAudioSource.hh	22;"	d
fIsWideband	include/AMRAudioSource.hh	/^  Boolean fIsWideband;$/;"	m	class:AMRAudioSource
fLastFrameHeader	include/AMRAudioSource.hh	/^  u_int8_t fLastFrameHeader;$/;"	m	class:AMRAudioSource
fNumChannels	include/AMRAudioSource.hh	/^  unsigned fNumChannels;$/;"	m	class:AMRAudioSource
isWideband	include/AMRAudioSource.hh	/^  Boolean isWideband() const { return fIsWideband; }$/;"	f	class:AMRAudioSource
lastFrameHeader	include/AMRAudioSource.hh	/^  u_int8_t lastFrameHeader() const { return fLastFrameHeader; }$/;"	f	class:AMRAudioSource
numChannels	include/AMRAudioSource.hh	/^  unsigned numChannels() const { return fNumChannels; }$/;"	f	class:AMRAudioSource
AVIFileSink	include/AVIFileSink.hh	/^class AVIFileSink: public Medium {$/;"	c
_AVI_FILE_SINK_HH	include/AVIFileSink.hh	22;"	d
_header	include/AVIFileSink.hh	94;"	d
addByte	include/AVIFileSink.hh	/^  unsigned addByte(unsigned char byte) {$/;"	f	class:AVIFileSink
afterPlayingFunc	include/AVIFileSink.hh	/^  typedef void (afterPlayingFunc)(void* clientData);$/;"	t	class:AVIFileSink
fAVIHFrameCountPosition	include/AVIFileSink.hh	/^  unsigned fAVIHFrameCountPosition;$/;"	m	class:AVIFileSink
fAVIHMaxBytesPerSecondPosition	include/AVIFileSink.hh	/^  unsigned fAVIHMaxBytesPerSecondPosition;$/;"	m	class:AVIFileSink
fAfterClientData	include/AVIFileSink.hh	/^  void* fAfterClientData;$/;"	m	class:AVIFileSink
fAfterFunc	include/AVIFileSink.hh	/^  afterPlayingFunc* fAfterFunc;$/;"	m	class:AVIFileSink
fAreCurrentlyBeingPlayed	include/AVIFileSink.hh	/^  Boolean fAreCurrentlyBeingPlayed;$/;"	m	class:AVIFileSink
fBufferSize	include/AVIFileSink.hh	/^  unsigned fBufferSize;$/;"	m	class:AVIFileSink
fCurrentIOState	include/AVIFileSink.hh	/^  class AVISubsessionIOState* fCurrentIOState;$/;"	m	class:AVIFileSink	typeref:class:AVIFileSink::AVISubsessionIOState
fHaveCompletedOutputFile	include/AVIFileSink.hh	/^  Boolean fHaveCompletedOutputFile;$/;"	m	class:AVIFileSink
fIndexRecordsHead	include/AVIFileSink.hh	/^  class AVIIndexRecord *fIndexRecordsHead, *fIndexRecordsTail;$/;"	m	class:AVIFileSink	typeref:class:AVIFileSink::AVIIndexRecord
fIndexRecordsTail	include/AVIFileSink.hh	/^  class AVIIndexRecord *fIndexRecordsHead, *fIndexRecordsTail;$/;"	m	class:AVIFileSink	typeref:class:AVIFileSink::
fInputSession	include/AVIFileSink.hh	/^  MediaSession& fInputSession;$/;"	m	class:AVIFileSink
fJunkNumber	include/AVIFileSink.hh	/^  unsigned fJunkNumber;$/;"	m	class:AVIFileSink
fMoviSizePosition	include/AVIFileSink.hh	/^  unsigned fMoviSizePosition, fMoviSizeValue;$/;"	m	class:AVIFileSink
fMoviSizeValue	include/AVIFileSink.hh	/^  unsigned fMoviSizePosition, fMoviSizeValue;$/;"	m	class:AVIFileSink
fMovieFPS	include/AVIFileSink.hh	/^  unsigned fMovieFPS;$/;"	m	class:AVIFileSink
fMovieHeight	include/AVIFileSink.hh	/^  unsigned short fMovieWidth, fMovieHeight;$/;"	m	class:AVIFileSink
fMovieWidth	include/AVIFileSink.hh	/^  unsigned short fMovieWidth, fMovieHeight;$/;"	m	class:AVIFileSink
fNumBytesWritten	include/AVIFileSink.hh	/^  unsigned fNumBytesWritten;$/;"	m	class:AVIFileSink
fNumIndexRecords	include/AVIFileSink.hh	/^  unsigned fNumIndexRecords;$/;"	m	class:AVIFileSink
fNumSubsessions	include/AVIFileSink.hh	/^  unsigned fNumSubsessions;$/;"	m	class:AVIFileSink
fOutFid	include/AVIFileSink.hh	/^  FILE* fOutFid;$/;"	m	class:AVIFileSink
fPacketLossCompensate	include/AVIFileSink.hh	/^  Boolean fPacketLossCompensate;$/;"	m	class:AVIFileSink
fRIFFSizePosition	include/AVIFileSink.hh	/^  unsigned fRIFFSizePosition, fRIFFSizeValue;$/;"	m	class:AVIFileSink
fRIFFSizeValue	include/AVIFileSink.hh	/^  unsigned fRIFFSizePosition, fRIFFSizeValue;$/;"	m	class:AVIFileSink
fStartTime	include/AVIFileSink.hh	/^  struct timeval fStartTime;$/;"	m	class:AVIFileSink	typeref:struct:AVIFileSink::timeval
numActiveSubsessions	include/AVIFileSink.hh	/^  unsigned numActiveSubsessions() const { return fNumSubsessions; }$/;"	f	class:AVIFileSink
AudioInputDevice	include/AudioInputDevice.hh	/^class AudioInputDevice: public FramedSource {$/;"	c
AudioPortNames	include/AudioInputDevice.hh	/^class AudioPortNames {$/;"	c
_AUDIO_INPUT_DEVICE_HH	include/AudioInputDevice.hh	21;"	d
allowedDeviceNames	include/AudioInputDevice.hh	/^  static char** allowedDeviceNames;$/;"	m	class:AudioInputDevice
bitsPerSample	include/AudioInputDevice.hh	/^  unsigned char bitsPerSample() const { return fBitsPerSample; }$/;"	f	class:AudioInputDevice
fBitsPerSample	include/AudioInputDevice.hh	/^  unsigned char fBitsPerSample, fNumChannels;$/;"	m	class:AudioInputDevice
fGranularityInMS	include/AudioInputDevice.hh	/^  unsigned fGranularityInMS;$/;"	m	class:AudioInputDevice
fNumChannels	include/AudioInputDevice.hh	/^  unsigned char fBitsPerSample, fNumChannels;$/;"	m	class:AudioInputDevice
fSamplingFrequency	include/AudioInputDevice.hh	/^  unsigned fSamplingFrequency;$/;"	m	class:AudioInputDevice
numChannels	include/AudioInputDevice.hh	/^  unsigned char numChannels() const { return fNumChannels; }$/;"	f	class:AudioInputDevice
numPorts	include/AudioInputDevice.hh	/^  unsigned numPorts;$/;"	m	class:AudioPortNames
portName	include/AudioInputDevice.hh	/^  char** portName;$/;"	m	class:AudioPortNames
samplingFrequency	include/AudioInputDevice.hh	/^  unsigned samplingFrequency() const { return fSamplingFrequency; }$/;"	f	class:AudioInputDevice
AudioRTPSink	include/AudioRTPSink.hh	/^class AudioRTPSink: public MultiFramedRTPSink {$/;"	c
_AUDIO_RTP_SINK_HH	include/AudioRTPSink.hh	22;"	d
_BASE64_HH	include/Base64.hh	22;"	d
BasicUDPSink	include/BasicUDPSink.hh	/^class BasicUDPSink: public MediaSink {$/;"	c
_BASIC_UDP_SINK_HH	include/BasicUDPSink.hh	22;"	d
fGS	include/BasicUDPSink.hh	/^  Groupsock* fGS;$/;"	m	class:BasicUDPSink
fMaxPayloadSize	include/BasicUDPSink.hh	/^  unsigned fMaxPayloadSize;$/;"	m	class:BasicUDPSink
fNextSendTime	include/BasicUDPSink.hh	/^  struct timeval fNextSendTime;$/;"	m	class:BasicUDPSink	typeref:struct:BasicUDPSink::timeval
fOutputBuffer	include/BasicUDPSink.hh	/^  unsigned char* fOutputBuffer;$/;"	m	class:BasicUDPSink
BasicUDPSource	include/BasicUDPSource.hh	/^class BasicUDPSource: public FramedSource {$/;"	c
_BASIC_UDP_SOURCE_HH	include/BasicUDPSource.hh	22;"	d
fHaveStartedReading	include/BasicUDPSource.hh	/^  Boolean fHaveStartedReading;$/;"	m	class:BasicUDPSource
fInputGS	include/BasicUDPSource.hh	/^  Groupsock* fInputGS;$/;"	m	class:BasicUDPSource
gs	include/BasicUDPSource.hh	/^  Groupsock* gs() const { return fInputGS; }$/;"	f	class:BasicUDPSource
BitVector	include/BitVector.hh	/^class BitVector {$/;"	c
_BIT_VECTOR_HH	include/BitVector.hh	22;"	d
curBitIndex	include/BitVector.hh	/^  unsigned curBitIndex() const { return fCurBitIndex; }$/;"	f	class:BitVector
fBaseBitOffset	include/BitVector.hh	/^  unsigned fBaseBitOffset;$/;"	m	class:BitVector
fBaseBytePtr	include/BitVector.hh	/^  unsigned char* fBaseBytePtr;$/;"	m	class:BitVector
fCurBitIndex	include/BitVector.hh	/^  unsigned fCurBitIndex;$/;"	m	class:BitVector
fTotNumBits	include/BitVector.hh	/^  unsigned fTotNumBits;$/;"	m	class:BitVector
get1BitBoolean	include/BitVector.hh	/^  Boolean get1BitBoolean() { return get1Bit() != 0; }$/;"	f	class:BitVector
numBitsRemaining	include/BitVector.hh	/^  unsigned numBitsRemaining() const { return fTotNumBits - fCurBitIndex; }$/;"	f	class:BitVector
totNumBits	include/BitVector.hh	/^  unsigned totNumBits() const { return fTotNumBits; }$/;"	f	class:BitVector
ByteStreamFileSource	include/ByteStreamFileSource.hh	/^class ByteStreamFileSource: public FramedFileSource {$/;"	c
_BYTE_STREAM_FILE_SOURCE_HH	include/ByteStreamFileSource.hh	22;"	d
fFidIsSeekable	include/ByteStreamFileSource.hh	/^  Boolean fFidIsSeekable;$/;"	m	class:ByteStreamFileSource
fFileSize	include/ByteStreamFileSource.hh	/^  u_int64_t fFileSize;$/;"	m	class:ByteStreamFileSource
fHaveStartedReading	include/ByteStreamFileSource.hh	/^  Boolean fHaveStartedReading;$/;"	m	class:ByteStreamFileSource
fLastPlayTime	include/ByteStreamFileSource.hh	/^  unsigned fLastPlayTime;$/;"	m	class:ByteStreamFileSource
fLimitNumBytesToStream	include/ByteStreamFileSource.hh	/^  Boolean fLimitNumBytesToStream;$/;"	m	class:ByteStreamFileSource
fNumBytesToStream	include/ByteStreamFileSource.hh	/^  u_int64_t fNumBytesToStream; \/\/ used iff "fLimitNumBytesToStream" is True$/;"	m	class:ByteStreamFileSource
fPlayTimePerFrame	include/ByteStreamFileSource.hh	/^  unsigned fPlayTimePerFrame;$/;"	m	class:ByteStreamFileSource
fPreferredFrameSize	include/ByteStreamFileSource.hh	/^  unsigned fPreferredFrameSize;$/;"	m	class:ByteStreamFileSource
fileSize	include/ByteStreamFileSource.hh	/^  u_int64_t fileSize() const { return fFileSize; }$/;"	f	class:ByteStreamFileSource
ByteStreamMemoryBufferSource	include/ByteStreamMemoryBufferSource.hh	/^class ByteStreamMemoryBufferSource: public FramedSource {$/;"	c
_BYTE_STREAM_MEMORY_BUFFER_SOURCE_HH	include/ByteStreamMemoryBufferSource.hh	22;"	d
bufferSize	include/ByteStreamMemoryBufferSource.hh	/^  u_int64_t bufferSize() const { return fBufferSize; }$/;"	f	class:ByteStreamMemoryBufferSource
fBuffer	include/ByteStreamMemoryBufferSource.hh	/^  u_int8_t* fBuffer;$/;"	m	class:ByteStreamMemoryBufferSource
fBufferSize	include/ByteStreamMemoryBufferSource.hh	/^  u_int64_t fBufferSize;$/;"	m	class:ByteStreamMemoryBufferSource
fCurIndex	include/ByteStreamMemoryBufferSource.hh	/^  u_int64_t fCurIndex;$/;"	m	class:ByteStreamMemoryBufferSource
fDeleteBufferOnClose	include/ByteStreamMemoryBufferSource.hh	/^  Boolean fDeleteBufferOnClose;$/;"	m	class:ByteStreamMemoryBufferSource
fLastPlayTime	include/ByteStreamMemoryBufferSource.hh	/^  unsigned fLastPlayTime;$/;"	m	class:ByteStreamMemoryBufferSource
fLimitNumBytesToStream	include/ByteStreamMemoryBufferSource.hh	/^  Boolean fLimitNumBytesToStream;$/;"	m	class:ByteStreamMemoryBufferSource
fNumBytesToStream	include/ByteStreamMemoryBufferSource.hh	/^  u_int64_t fNumBytesToStream; \/\/ used iff "fLimitNumBytesToStream" is True$/;"	m	class:ByteStreamMemoryBufferSource
fPlayTimePerFrame	include/ByteStreamMemoryBufferSource.hh	/^  unsigned fPlayTimePerFrame;$/;"	m	class:ByteStreamMemoryBufferSource
fPreferredFrameSize	include/ByteStreamMemoryBufferSource.hh	/^  unsigned fPreferredFrameSize;$/;"	m	class:ByteStreamMemoryBufferSource
ByteStreamMultiFileSource	include/ByteStreamMultiFileSource.hh	/^class ByteStreamMultiFileSource: public FramedSource {$/;"	c
_BYTE_STREAM_MULTI_FILE_SOURCE_HH	include/ByteStreamMultiFileSource.hh	22;"	d
fCurrentlyReadSourceNumber	include/ByteStreamMultiFileSource.hh	/^  unsigned fCurrentlyReadSourceNumber;$/;"	m	class:ByteStreamMultiFileSource
fFileNameArray	include/ByteStreamMultiFileSource.hh	/^  char const** fFileNameArray;$/;"	m	class:ByteStreamMultiFileSource
fHaveStartedNewFile	include/ByteStreamMultiFileSource.hh	/^  Boolean fHaveStartedNewFile;$/;"	m	class:ByteStreamMultiFileSource
fNumSources	include/ByteStreamMultiFileSource.hh	/^  unsigned fNumSources;$/;"	m	class:ByteStreamMultiFileSource
fPlayTimePerFrame	include/ByteStreamMultiFileSource.hh	/^  unsigned fPlayTimePerFrame;$/;"	m	class:ByteStreamMultiFileSource
fPreferredFrameSize	include/ByteStreamMultiFileSource.hh	/^  unsigned fPreferredFrameSize;$/;"	m	class:ByteStreamMultiFileSource
fSourceArray	include/ByteStreamMultiFileSource.hh	/^  ByteStreamFileSource** fSourceArray;$/;"	m	class:ByteStreamMultiFileSource
haveStartedNewFile	include/ByteStreamMultiFileSource.hh	/^  Boolean haveStartedNewFile() const { return fHaveStartedNewFile; }$/;"	f	class:ByteStreamMultiFileSource
DVVideoFileServerMediaSubsession	include/DVVideoFileServerMediaSubsession.hh	/^class DVVideoFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_DV_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/DVVideoFileServerMediaSubsession.hh	23;"	d
fFileDuration	include/DVVideoFileServerMediaSubsession.hh	/^  float fFileDuration; \/\/ in seconds$/;"	m	class:DVVideoFileServerMediaSubsession
DVVideoRTPSink	include/DVVideoRTPSink.hh	/^class DVVideoRTPSink: public VideoRTPSink {$/;"	c
_DV_VIDEO_RTP_SINK_HH	include/DVVideoRTPSink.hh	23;"	d
fFmtpSDPLine	include/DVVideoRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:DVVideoRTPSink
DVVideoRTPSource	include/DVVideoRTPSource.hh	/^class DVVideoRTPSource: public MultiFramedRTPSource {$/;"	c
_DV_VIDEO_RTP_SOURCE_HH	include/DVVideoRTPSource.hh	22;"	d
DVVideoStreamFramer	include/DVVideoStreamFramer.hh	/^class DVVideoStreamFramer: public FramedFilter {$/;"	c
DV_DIF_BLOCK_SIZE	include/DVVideoStreamFramer.hh	28;"	d
DV_NUM_BLOCKS_PER_SEQUENCE	include/DVVideoStreamFramer.hh	29;"	d
DV_SAVED_INITIAL_BLOCKS_SIZE	include/DVVideoStreamFramer.hh	30;"	d
_DV_VIDEO_STREAM_FRAMER_HH	include/DVVideoStreamFramer.hh	22;"	d
fInitialBlocksPresent	include/DVVideoStreamFramer.hh	/^  char fInitialBlocksPresent;$/;"	m	class:DVVideoStreamFramer
fLeavePresentationTimesUnmodified	include/DVVideoStreamFramer.hh	/^  Boolean fLeavePresentationTimesUnmodified;$/;"	m	class:DVVideoStreamFramer
fNextFramePresentationTime	include/DVVideoStreamFramer.hh	/^  struct timeval fNextFramePresentationTime;$/;"	m	class:DVVideoStreamFramer	typeref:struct:DVVideoStreamFramer::timeval
fOurProfile	include/DVVideoStreamFramer.hh	/^  void const* fOurProfile;$/;"	m	class:DVVideoStreamFramer
fSavedInitialBlocks	include/DVVideoStreamFramer.hh	/^  unsigned char fSavedInitialBlocks[DV_SAVED_INITIAL_BLOCKS_SIZE];$/;"	m	class:DVVideoStreamFramer
fSourceIsSeekable	include/DVVideoStreamFramer.hh	/^  Boolean fSourceIsSeekable;$/;"	m	class:DVVideoStreamFramer
DeviceParameters	include/DeviceSource.hh	/^class DeviceParameters {$/;"	c
DeviceSource	include/DeviceSource.hh	/^class DeviceSource: public FramedSource {$/;"	c
_DEVICE_SOURCE_HH	include/DeviceSource.hh	25;"	d
eventTriggerId	include/DeviceSource.hh	/^  static EventTriggerId eventTriggerId;$/;"	m	class:DeviceSource
fParams	include/DeviceSource.hh	/^  DeviceParameters fParams;$/;"	m	class:DeviceSource
referenceCount	include/DeviceSource.hh	/^  static unsigned referenceCount; \/\/ used to count how many instances of this class currently exist$/;"	m	class:DeviceSource
Authenticator	include/DigestAuthentication.hh	/^class Authenticator {$/;"	c
_DIGEST_AUTHENTICATION_HH	include/DigestAuthentication.hh	22;"	d
fNonce	include/DigestAuthentication.hh	/^  char* fRealm; char* fNonce;$/;"	m	class:Authenticator
fPassword	include/DigestAuthentication.hh	/^  char* fUsername; char* fPassword;$/;"	m	class:Authenticator
fPasswordIsMD5	include/DigestAuthentication.hh	/^  Boolean fPasswordIsMD5;$/;"	m	class:Authenticator
fRealm	include/DigestAuthentication.hh	/^  char* fRealm; char* fNonce;$/;"	m	class:Authenticator
fUsername	include/DigestAuthentication.hh	/^  char* fUsername; char* fPassword;$/;"	m	class:Authenticator
nonce	include/DigestAuthentication.hh	/^  char const* nonce() const { return fNonce; }$/;"	f	class:Authenticator
password	include/DigestAuthentication.hh	/^  char const* password() const { return fPassword; }$/;"	f	class:Authenticator
realm	include/DigestAuthentication.hh	/^  char const* realm() const { return fRealm; }$/;"	f	class:Authenticator
username	include/DigestAuthentication.hh	/^  char const* username() const { return fUsername; }$/;"	f	class:Authenticator
FileServerMediaSubsession	include/FileServerMediaSubsession.hh	/^class FileServerMediaSubsession: public OnDemandServerMediaSubsession {$/;"	c
_FILE_SERVER_MEDIA_SUBSESSION_HH	include/FileServerMediaSubsession.hh	23;"	d
fFileName	include/FileServerMediaSubsession.hh	/^  char const* fFileName;$/;"	m	class:FileServerMediaSubsession
fFileSize	include/FileServerMediaSubsession.hh	/^  u_int64_t fFileSize; \/\/ if known$/;"	m	class:FileServerMediaSubsession
FileSink	include/FileSink.hh	/^class FileSink: public MediaSink {$/;"	c
_FILE_SINK_HH	include/FileSink.hh	22;"	d
fBuffer	include/FileSink.hh	/^  unsigned char* fBuffer;$/;"	m	class:FileSink
fBufferSize	include/FileSink.hh	/^  unsigned fBufferSize;$/;"	m	class:FileSink
fOutFid	include/FileSink.hh	/^  FILE* fOutFid;$/;"	m	class:FileSink
fPerFrameFileNameBuffer	include/FileSink.hh	/^  char* fPerFrameFileNameBuffer; \/\/ used if "oneFilePerFrame" is True$/;"	m	class:FileSink
fPerFrameFileNamePrefix	include/FileSink.hh	/^  char* fPerFrameFileNamePrefix; \/\/ used if "oneFilePerFrame" is True$/;"	m	class:FileSink
fPrevPresentationTime	include/FileSink.hh	/^  struct timeval fPrevPresentationTime;$/;"	m	class:FileSink	typeref:struct:FileSink::timeval
fSamePresentationTimeCounter	include/FileSink.hh	/^  unsigned fSamePresentationTimeCounter;$/;"	m	class:FileSink
FramedFileSource	include/FramedFileSource.hh	/^class FramedFileSource: public FramedSource {$/;"	c
_FRAMED_FILE_SOURCE_HH	include/FramedFileSource.hh	22;"	d
fFid	include/FramedFileSource.hh	/^  FILE* fFid;$/;"	m	class:FramedFileSource
FramedFilter	include/FramedFilter.hh	/^class FramedFilter: public FramedSource {$/;"	c
_FRAMED_FILTER_HH	include/FramedFilter.hh	22;"	d
fInputSource	include/FramedFilter.hh	/^  FramedSource* fInputSource;$/;"	m	class:FramedFilter
inputSource	include/FramedFilter.hh	/^  FramedSource* inputSource() const { return fInputSource; }$/;"	f	class:FramedFilter
reassignInputSource	include/FramedFilter.hh	/^  void reassignInputSource(FramedSource* newInputSource) { fInputSource = newInputSource; }$/;"	f	class:FramedFilter
FramedSource	include/FramedSource.hh	/^class FramedSource: public MediaSource {$/;"	c
_FRAMED_SOURCE_HH	include/FramedSource.hh	22;"	d
afterGettingFunc	include/FramedSource.hh	/^  typedef void (afterGettingFunc)(void* clientData, unsigned frameSize,$/;"	t	class:FramedSource
fAfterGettingClientData	include/FramedSource.hh	/^  void* fAfterGettingClientData;$/;"	m	class:FramedSource
fAfterGettingFunc	include/FramedSource.hh	/^  afterGettingFunc* fAfterGettingFunc;$/;"	m	class:FramedSource
fDurationInMicroseconds	include/FramedSource.hh	/^  unsigned fDurationInMicroseconds; \/\/ out$/;"	m	class:FramedSource
fFrameSize	include/FramedSource.hh	/^  unsigned fFrameSize; \/\/ out$/;"	m	class:FramedSource
fIsCurrentlyAwaitingData	include/FramedSource.hh	/^  Boolean fIsCurrentlyAwaitingData;$/;"	m	class:FramedSource
fMaxSize	include/FramedSource.hh	/^  unsigned fMaxSize; \/\/ in$/;"	m	class:FramedSource
fNumTruncatedBytes	include/FramedSource.hh	/^  unsigned fNumTruncatedBytes; \/\/ out$/;"	m	class:FramedSource
fOnCloseClientData	include/FramedSource.hh	/^  void* fOnCloseClientData;$/;"	m	class:FramedSource
fOnCloseFunc	include/FramedSource.hh	/^  onCloseFunc* fOnCloseFunc;$/;"	m	class:FramedSource
fPresentationTime	include/FramedSource.hh	/^  struct timeval fPresentationTime; \/\/ out$/;"	m	class:FramedSource	typeref:struct:FramedSource::timeval
fTo	include/FramedSource.hh	/^  unsigned char* fTo; \/\/ in$/;"	m	class:FramedSource
isCurrentlyAwaitingData	include/FramedSource.hh	/^  Boolean isCurrentlyAwaitingData() const {return fIsCurrentlyAwaitingData;}$/;"	f	class:FramedSource
onCloseFunc	include/FramedSource.hh	/^  typedef void (onCloseFunc)(void* clientData);$/;"	t	class:FramedSource
GSMAudioRTPSink	include/GSMAudioRTPSink.hh	/^class GSMAudioRTPSink: public AudioRTPSink {$/;"	c
_GSM_AUDIO_RTP_SINK_HH	include/GSMAudioRTPSink.hh	22;"	d
ClientConnection	include/GenericMediaServer.hh	/^  class ClientConnection {$/;"	c	class:GenericMediaServer
ClientSession	include/GenericMediaServer.hh	/^  class ClientSession {$/;"	c	class:GenericMediaServer
GenericMediaServer	include/GenericMediaServer.hh	/^class GenericMediaServer: public Medium {$/;"	c
REQUEST_BUFFER_SIZE	include/GenericMediaServer.hh	30;"	d
RESPONSE_BUFFER_SIZE	include/GenericMediaServer.hh	33;"	d
ServerMediaSessionIterator	include/GenericMediaServer.hh	/^  class ServerMediaSessionIterator {$/;"	c	class:GenericMediaServer
UserAuthenticationDatabase	include/GenericMediaServer.hh	/^class UserAuthenticationDatabase {$/;"	c
_GENERIC_MEDIA_SERVER_HH	include/GenericMediaServer.hh	23;"	d
envir	include/GenericMediaServer.hh	/^    UsageEnvironment& envir() { return fOurServer.envir(); }$/;"	f	class:GenericMediaServer::ClientConnection
envir	include/GenericMediaServer.hh	/^    UsageEnvironment& envir() { return fOurServer.envir(); }$/;"	f	class:GenericMediaServer::ClientSession
fClientAddr	include/GenericMediaServer.hh	/^    struct sockaddr_in fClientAddr;$/;"	m	class:GenericMediaServer::ClientConnection	typeref:struct:GenericMediaServer::ClientConnection::sockaddr_in
fClientConnections	include/GenericMediaServer.hh	/^  HashTable* fClientConnections; \/\/ the "ClientConnection" objects that we're using$/;"	m	class:GenericMediaServer
fClientSessions	include/GenericMediaServer.hh	/^  HashTable* fClientSessions; \/\/ maps 'session id' strings to "ClientSession" objects$/;"	m	class:GenericMediaServer
fLivenessCheckTask	include/GenericMediaServer.hh	/^    TaskToken fLivenessCheckTask;$/;"	m	class:GenericMediaServer::ClientSession
fOurIterator	include/GenericMediaServer.hh	/^    HashTable::Iterator* fOurIterator;$/;"	m	class:GenericMediaServer::ServerMediaSessionIterator
fOurServer	include/GenericMediaServer.hh	/^    GenericMediaServer& fOurServer;$/;"	m	class:GenericMediaServer::ClientConnection
fOurServer	include/GenericMediaServer.hh	/^    GenericMediaServer& fOurServer;$/;"	m	class:GenericMediaServer::ClientSession
fOurServerMediaSession	include/GenericMediaServer.hh	/^    ServerMediaSession* fOurServerMediaSession;$/;"	m	class:GenericMediaServer::ClientSession
fOurSessionId	include/GenericMediaServer.hh	/^    u_int32_t fOurSessionId;$/;"	m	class:GenericMediaServer::ClientSession
fOurSocket	include/GenericMediaServer.hh	/^    int fOurSocket;$/;"	m	class:GenericMediaServer::ClientConnection
fPasswordsAreMD5	include/GenericMediaServer.hh	/^  Boolean fPasswordsAreMD5;$/;"	m	class:UserAuthenticationDatabase
fRealm	include/GenericMediaServer.hh	/^  char* fRealm;$/;"	m	class:UserAuthenticationDatabase
fReclamationSeconds	include/GenericMediaServer.hh	/^  unsigned fReclamationSeconds;$/;"	m	class:GenericMediaServer
fRequestBuffer	include/GenericMediaServer.hh	/^    unsigned char fRequestBuffer[REQUEST_BUFFER_SIZE];$/;"	m	class:GenericMediaServer::ClientConnection
fRequestBufferBytesLeft	include/GenericMediaServer.hh	/^    unsigned fRequestBytesAlreadySeen, fRequestBufferBytesLeft;$/;"	m	class:GenericMediaServer::ClientConnection
fRequestBytesAlreadySeen	include/GenericMediaServer.hh	/^    unsigned fRequestBytesAlreadySeen, fRequestBufferBytesLeft;$/;"	m	class:GenericMediaServer::ClientConnection
fResponseBuffer	include/GenericMediaServer.hh	/^    unsigned char fResponseBuffer[RESPONSE_BUFFER_SIZE];$/;"	m	class:GenericMediaServer::ClientConnection
fServerMediaSessions	include/GenericMediaServer.hh	/^  HashTable* fServerMediaSessions; \/\/ maps 'stream name' strings to "ServerMediaSession" objects$/;"	m	class:GenericMediaServer
fServerPort	include/GenericMediaServer.hh	/^  Port fServerPort;$/;"	m	class:GenericMediaServer
fServerSocket	include/GenericMediaServer.hh	/^  int fServerSocket;$/;"	m	class:GenericMediaServer
fTable	include/GenericMediaServer.hh	/^  HashTable* fTable;$/;"	m	class:UserAuthenticationDatabase
passwordsAreMD5	include/GenericMediaServer.hh	/^  Boolean passwordsAreMD5() { return fPasswordsAreMD5; }$/;"	f	class:UserAuthenticationDatabase
realm	include/GenericMediaServer.hh	/^  char const* realm() { return fRealm; }$/;"	f	class:UserAuthenticationDatabase
H261VideoRTPSource	include/H261VideoRTPSource.hh	/^class H261VideoRTPSource: public MultiFramedRTPSource {$/;"	c
_H261_VIDEO_RTP_SOURCE_HH	include/H261VideoRTPSource.hh	22;"	d
fLastSpecialHeader	include/H261VideoRTPSource.hh	/^  u_int32_t fLastSpecialHeader;$/;"	m	class:H261VideoRTPSource
lastSpecialHeader	include/H261VideoRTPSource.hh	/^  u_int32_t lastSpecialHeader() const {return fLastSpecialHeader;}$/;"	f	class:H261VideoRTPSource
H263plusVideoFileServerMediaSubsession	include/H263plusVideoFileServerMediaSubsession.hh	/^class H263plusVideoFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_H263PLUS_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/H263plusVideoFileServerMediaSubsession.hh	23;"	d
H263plusVideoRTPSink	include/H263plusVideoRTPSink.hh	/^class H263plusVideoRTPSink: public VideoRTPSink {$/;"	c
_H263_PLUS_VIDEO_RTP_SINK_HH	include/H263plusVideoRTPSink.hh	22;"	d
H263plusVideoRTPSource	include/H263plusVideoRTPSource.hh	/^class H263plusVideoRTPSource: public MultiFramedRTPSource {$/;"	c
SPECIAL_HEADER_BUFFER_SIZE	include/H263plusVideoRTPSource.hh	28;"	d
_H263_PLUS_VIDEO_RTP_SOURCE_HH	include/H263plusVideoRTPSource.hh	22;"	d
fNumSpecialHeaders	include/H263plusVideoRTPSource.hh	/^  unsigned char fNumSpecialHeaders;$/;"	m	class:H263plusVideoRTPSource
fPacketSizes	include/H263plusVideoRTPSource.hh	/^  unsigned fPacketSizes[256];$/;"	m	class:H263plusVideoRTPSource
fSpecialHeaderBytes	include/H263plusVideoRTPSource.hh	/^  unsigned char fSpecialHeaderBytes[SPECIAL_HEADER_BUFFER_SIZE];$/;"	m	class:H263plusVideoRTPSource
fSpecialHeaderBytesLength	include/H263plusVideoRTPSource.hh	/^  unsigned fSpecialHeaderBytesLength;$/;"	m	class:H263plusVideoRTPSource
H263plusVideoStreamFramer	include/H263plusVideoStreamFramer.hh	/^class H263plusVideoStreamFramer: public FramedFilter {$/;"	c
_H263PLUS_VIDEO_STREAM_FRAMER_HH	include/H263plusVideoStreamFramer.hh	22;"	d
fFrameRate	include/H263plusVideoStreamFramer.hh	/^  double   fFrameRate;$/;"	m	class:H263plusVideoStreamFramer
fParser	include/H263plusVideoStreamFramer.hh	/^  class H263plusVideoStreamParser* fParser;$/;"	m	class:H263plusVideoStreamFramer	typeref:class:H263plusVideoStreamFramer::H263plusVideoStreamParser
fPictureCount	include/H263plusVideoStreamFramer.hh	/^  unsigned fPictureCount; \/\/ hack used to implement doGetNextFrame() ??$/;"	m	class:H263plusVideoStreamFramer
fPictureEndMarker	include/H263plusVideoStreamFramer.hh	/^  Boolean  fPictureEndMarker;$/;"	m	class:H263plusVideoStreamFramer
fPresentationTimeBase	include/H263plusVideoStreamFramer.hh	/^  struct timeval fPresentationTimeBase;$/;"	m	class:H263plusVideoStreamFramer	typeref:struct:H263plusVideoStreamFramer::timeval
pictureEndMarker	include/H263plusVideoStreamFramer.hh	/^  Boolean& pictureEndMarker() { return fPictureEndMarker; }    \/\/ a hack for implementing the RTP 'M' bit$/;"	f	class:H263plusVideoStreamFramer
H264VideoFileServerMediaSubsession	include/H264VideoFileServerMediaSubsession.hh	/^class H264VideoFileServerMediaSubsession: public FileServerMediaSubsession {$/;"	c
_H264_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/H264VideoFileServerMediaSubsession.hh	23;"	d
fAuxSDPLine	include/H264VideoFileServerMediaSubsession.hh	/^  char* fAuxSDPLine;$/;"	m	class:H264VideoFileServerMediaSubsession
fDoneFlag	include/H264VideoFileServerMediaSubsession.hh	/^  char fDoneFlag; \/\/ used when setting up "fAuxSDPLine"$/;"	m	class:H264VideoFileServerMediaSubsession
fDummyRTPSink	include/H264VideoFileServerMediaSubsession.hh	/^  RTPSink* fDummyRTPSink; \/\/ ditto$/;"	m	class:H264VideoFileServerMediaSubsession
setDoneFlag	include/H264VideoFileServerMediaSubsession.hh	/^  void setDoneFlag() { fDoneFlag = ~0; }$/;"	f	class:H264VideoFileServerMediaSubsession
H264VideoFileSink	include/H264VideoFileSink.hh	/^class H264VideoFileSink: public H264or5VideoFileSink {$/;"	c
_H264_VIDEO_FILE_SINK_HH	include/H264VideoFileSink.hh	22;"	d
H264VideoRTPSink	include/H264VideoRTPSink.hh	/^class H264VideoRTPSink: public H264or5VideoRTPSink {$/;"	c
_H264_VIDEO_RTP_SINK_HH	include/H264VideoRTPSink.hh	22;"	d
H264VideoRTPSource	include/H264VideoRTPSource.hh	/^class H264VideoRTPSource: public MultiFramedRTPSource {$/;"	c
SPropRecord	include/H264VideoRTPSource.hh	/^class SPropRecord {$/;"	c
_H264_VIDEO_RTP_SOURCE_HH	include/H264VideoRTPSource.hh	22;"	d
fCurPacketNALUnitType	include/H264VideoRTPSource.hh	/^  unsigned char fCurPacketNALUnitType;$/;"	m	class:H264VideoRTPSource
sPropBytes	include/H264VideoRTPSource.hh	/^  unsigned char* sPropBytes;$/;"	m	class:SPropRecord
sPropLength	include/H264VideoRTPSource.hh	/^  unsigned sPropLength; \/\/ in bytes$/;"	m	class:SPropRecord
~SPropRecord	include/H264VideoRTPSource.hh	/^  ~SPropRecord() { delete[] sPropBytes; }$/;"	f	class:SPropRecord
H264VideoStreamDiscreteFramer	include/H264VideoStreamDiscreteFramer.hh	/^class H264VideoStreamDiscreteFramer: public H264or5VideoStreamDiscreteFramer {$/;"	c
_H264_VIDEO_STREAM_DISCRETE_FRAMER_HH	include/H264VideoStreamDiscreteFramer.hh	25;"	d
H264VideoStreamFramer	include/H264VideoStreamFramer.hh	/^class H264VideoStreamFramer: public H264or5VideoStreamFramer {$/;"	c
_H264_VIDEO_STREAM_FRAMER_HH	include/H264VideoStreamFramer.hh	22;"	d
H264or5VideoFileSink	include/H264or5VideoFileSink.hh	/^class H264or5VideoFileSink: public FileSink {$/;"	c
_H264_OR_5_VIDEO_FILE_SINK_HH	include/H264or5VideoFileSink.hh	22;"	d
fHaveWrittenFirstFrame	include/H264or5VideoFileSink.hh	/^  Boolean fHaveWrittenFirstFrame;$/;"	m	class:H264or5VideoFileSink
fSPropParameterSetsStr	include/H264or5VideoFileSink.hh	/^  char const* fSPropParameterSetsStr[3];$/;"	m	class:H264or5VideoFileSink
H264or5VideoRTPSink	include/H264or5VideoRTPSink.hh	/^class H264or5VideoRTPSink: public VideoRTPSink {$/;"	c
_H264_OR_5_VIDEO_RTP_SINK_HH	include/H264or5VideoRTPSink.hh	22;"	d
fFmtpSDPLine	include/H264or5VideoRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:H264or5VideoRTPSink
fHNumber	include/H264or5VideoRTPSink.hh	/^  int fHNumber;$/;"	m	class:H264or5VideoRTPSink
fOurFragmenter	include/H264or5VideoRTPSink.hh	/^  FramedFilter* fOurFragmenter;$/;"	m	class:H264or5VideoRTPSink
fPPS	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fPPS; unsigned fPPSSize;$/;"	m	class:H264or5VideoRTPSink
fPPSSize	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fPPS; unsigned fPPSSize;$/;"	m	class:H264or5VideoRTPSink
fSPS	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fSPS; unsigned fSPSSize;$/;"	m	class:H264or5VideoRTPSink
fSPSSize	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fSPS; unsigned fSPSSize;$/;"	m	class:H264or5VideoRTPSink
fVPS	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fVPS; unsigned fVPSSize;$/;"	m	class:H264or5VideoRTPSink
fVPSSize	include/H264or5VideoRTPSink.hh	/^  u_int8_t* fVPS; unsigned fVPSSize;$/;"	m	class:H264or5VideoRTPSink
H264or5VideoStreamDiscreteFramer	include/H264or5VideoStreamDiscreteFramer.hh	/^class H264or5VideoStreamDiscreteFramer: public H264or5VideoStreamFramer {$/;"	c
_H264_OR_5_VIDEO_STREAM_DISCRETE_FRAMER_HH	include/H264or5VideoStreamDiscreteFramer.hh	25;"	d
H264or5VideoStreamFramer	include/H264or5VideoStreamFramer.hh	/^class H264or5VideoStreamFramer: public MPEGVideoStreamFramer {$/;"	c
_H264_OR_5_VIDEO_STREAM_FRAMER_HH	include/H264or5VideoStreamFramer.hh	22;"	d
fHNumber	include/H264or5VideoStreamFramer.hh	/^  int fHNumber;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenPPS	include/H264or5VideoStreamFramer.hh	/^  u_int8_t* fLastSeenPPS;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenPPSSize	include/H264or5VideoStreamFramer.hh	/^  unsigned fLastSeenPPSSize;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenSPS	include/H264or5VideoStreamFramer.hh	/^  u_int8_t* fLastSeenSPS;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenSPSSize	include/H264or5VideoStreamFramer.hh	/^  unsigned fLastSeenSPSSize;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenVPS	include/H264or5VideoStreamFramer.hh	/^  u_int8_t* fLastSeenVPS;$/;"	m	class:H264or5VideoStreamFramer
fLastSeenVPSSize	include/H264or5VideoStreamFramer.hh	/^  unsigned fLastSeenVPSSize;$/;"	m	class:H264or5VideoStreamFramer
fNextPresentationTime	include/H264or5VideoStreamFramer.hh	/^  struct timeval fNextPresentationTime; \/\/ the presentation time to be used for the next NAL unit to be parsed\/delivered after this$/;"	m	class:H264or5VideoStreamFramer	typeref:struct:H264or5VideoStreamFramer::timeval
getVPSandSPSandPPS	include/H264or5VideoStreamFramer.hh	/^  void getVPSandSPSandPPS(u_int8_t*& vps, unsigned& vpsSize,$/;"	f	class:H264or5VideoStreamFramer
setPresentationTime	include/H264or5VideoStreamFramer.hh	/^  void setPresentationTime() { fPresentationTime = fNextPresentationTime; }$/;"	f	class:H264or5VideoStreamFramer
setVPSandSPSandPPS	include/H264or5VideoStreamFramer.hh	/^  void setVPSandSPSandPPS(u_int8_t* vps, unsigned vpsSize,$/;"	f	class:H264or5VideoStreamFramer
H265VideoFileServerMediaSubsession	include/H265VideoFileServerMediaSubsession.hh	/^class H265VideoFileServerMediaSubsession: public FileServerMediaSubsession {$/;"	c
_H265_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/H265VideoFileServerMediaSubsession.hh	23;"	d
fAuxSDPLine	include/H265VideoFileServerMediaSubsession.hh	/^  char* fAuxSDPLine;$/;"	m	class:H265VideoFileServerMediaSubsession
fDoneFlag	include/H265VideoFileServerMediaSubsession.hh	/^  char fDoneFlag; \/\/ used when setting up "fAuxSDPLine"$/;"	m	class:H265VideoFileServerMediaSubsession
fDummyRTPSink	include/H265VideoFileServerMediaSubsession.hh	/^  RTPSink* fDummyRTPSink; \/\/ ditto$/;"	m	class:H265VideoFileServerMediaSubsession
setDoneFlag	include/H265VideoFileServerMediaSubsession.hh	/^  void setDoneFlag() { fDoneFlag = ~0; }$/;"	f	class:H265VideoFileServerMediaSubsession
H265VideoFileSink	include/H265VideoFileSink.hh	/^class H265VideoFileSink: public H264or5VideoFileSink {$/;"	c
_H265_VIDEO_FILE_SINK_HH	include/H265VideoFileSink.hh	22;"	d
H265VideoRTPSink	include/H265VideoRTPSink.hh	/^class H265VideoRTPSink: public H264or5VideoRTPSink {$/;"	c
_H265_VIDEO_RTP_SINK_HH	include/H265VideoRTPSink.hh	22;"	d
H265VideoRTPSource	include/H265VideoRTPSource.hh	/^class H265VideoRTPSource: public MultiFramedRTPSource {$/;"	c
_H265_VIDEO_RTP_SOURCE_HH	include/H265VideoRTPSource.hh	22;"	d
currentNALUnitAbsDon	include/H265VideoRTPSource.hh	/^  u_int64_t currentNALUnitAbsDon() const { return fCurrentNALUnitAbsDon; }$/;"	f	class:H265VideoRTPSource
fCurPacketNALUnitType	include/H265VideoRTPSource.hh	/^  unsigned char fCurPacketNALUnitType;$/;"	m	class:H265VideoRTPSource
fCurrentNALUnitAbsDon	include/H265VideoRTPSource.hh	/^  u_int64_t fCurrentNALUnitAbsDon;$/;"	m	class:H265VideoRTPSource
fExpectDONFields	include/H265VideoRTPSource.hh	/^  Boolean fExpectDONFields;$/;"	m	class:H265VideoRTPSource
fPreviousNALUnitDON	include/H265VideoRTPSource.hh	/^  u_int16_t fPreviousNALUnitDON;$/;"	m	class:H265VideoRTPSource
H265VideoStreamDiscreteFramer	include/H265VideoStreamDiscreteFramer.hh	/^class H265VideoStreamDiscreteFramer: public H264or5VideoStreamDiscreteFramer {$/;"	c
_H265_VIDEO_STREAM_DISCRETE_FRAMER_HH	include/H265VideoStreamDiscreteFramer.hh	25;"	d
H265VideoStreamFramer	include/H265VideoStreamFramer.hh	/^class H265VideoStreamFramer: public H264or5VideoStreamFramer {$/;"	c
_H265_VIDEO_STREAM_FRAMER_HH	include/H265VideoStreamFramer.hh	22;"	d
READ_FROM_FILES_SYNCHRONOUSLY	include/InputFile.hh	34;"	d
_INPUT_FILE_HH	include/InputFile.hh	22;"	d
JPEGVideoRTPSink	include/JPEGVideoRTPSink.hh	/^class JPEGVideoRTPSink: public VideoRTPSink {$/;"	c
_JPEG_VIDEO_RTP_SINK_HH	include/JPEGVideoRTPSink.hh	22;"	d
JPEGVideoRTPSource	include/JPEGVideoRTPSource.hh	/^class JPEGVideoRTPSource: public MultiFramedRTPSource {$/;"	c
MAX_JPEG_HEADER_SIZE	include/JPEGVideoRTPSource.hh	28;"	d
_JPEG_VIDEO_RTP_SOURCE_HH	include/JPEGVideoRTPSource.hh	22;"	d
fDefaultHeight	include/JPEGVideoRTPSource.hh	/^  unsigned fDefaultWidth, fDefaultHeight;$/;"	m	class:JPEGVideoRTPSource
fDefaultWidth	include/JPEGVideoRTPSource.hh	/^  unsigned fDefaultWidth, fDefaultHeight;$/;"	m	class:JPEGVideoRTPSource
JPEGVideoSource	include/JPEGVideoSource.hh	/^class JPEGVideoSource: public FramedSource {$/;"	c
_JPEG_VIDEO_SOURCE_HH	include/JPEGVideoSource.hh	22;"	d
All	include/Locale.hh	/^enum LocaleCategory { All, Numeric }; \/\/ define and implement more categories later, as needed$/;"	e	enum:LocaleCategory
LOCALE_NOT_USED	include/Locale.hh	36;"	d
Locale	include/Locale.hh	/^class Locale {$/;"	c
LocaleCategory	include/Locale.hh	/^enum LocaleCategory { All, Numeric }; \/\/ define and implement more categories later, as needed$/;"	g
Numeric	include/Locale.hh	/^enum LocaleCategory { All, Numeric }; \/\/ define and implement more categories later, as needed$/;"	e	enum:LocaleCategory
XLOCALE_NOT_USED	include/Locale.hh	37;"	d
XLOCALE_NOT_USED	include/Locale.hh	40;"	d
_LOCALE_HH	include/Locale.hh	23;"	d
fCategoryNum	include/Locale.hh	/^  int fCategoryNum;$/;"	m	class:Locale
fLocale	include/Locale.hh	/^  locale_t fLocale, fPrevLocale;$/;"	m	class:Locale
fPrevLocale	include/Locale.hh	/^  char* fPrevLocale;$/;"	m	class:Locale
fPrevLocale	include/Locale.hh	/^  locale_t fLocale, fPrevLocale;$/;"	m	class:Locale
ADUFromMP3Source	include/MP3ADU.hh	/^class ADUFromMP3Source: public FramedFilter {$/;"	c
MP3FromADUSource	include/MP3ADU.hh	/^class MP3FromADUSource: public FramedFilter {$/;"	c
_MP3_ADU_HH	include/MP3ADU.hh	22;"	d
fAreEnqueueingADU	include/MP3ADU.hh	/^  Boolean fAreEnqueueingADU;$/;"	m	class:MP3FromADUSource
fAreEnqueueingMP3Frame	include/MP3ADU.hh	/^  Boolean fAreEnqueueingMP3Frame;$/;"	m	class:ADUFromMP3Source
fFrameCounter	include/MP3ADU.hh	/^  unsigned fFrameCounter;$/;"	m	class:ADUFromMP3Source
fIncludeADUdescriptors	include/MP3ADU.hh	/^  Boolean fIncludeADUdescriptors;$/;"	m	class:ADUFromMP3Source
fScale	include/MP3ADU.hh	/^  int fScale;$/;"	m	class:ADUFromMP3Source
fSegments	include/MP3ADU.hh	/^  class SegmentQueue* fSegments;$/;"	m	class:ADUFromMP3Source	typeref:class:ADUFromMP3Source::SegmentQueue
fSegments	include/MP3ADU.hh	/^  class SegmentQueue* fSegments;$/;"	m	class:MP3FromADUSource	typeref:class:MP3FromADUSource::SegmentQueue
fTotalDataSizeBeforePreviousRead	include/MP3ADU.hh	/^  unsigned fTotalDataSizeBeforePreviousRead;$/;"	m	class:ADUFromMP3Source
MP3ADURTPSink	include/MP3ADURTPSink.hh	/^class MP3ADURTPSink: public AudioRTPSink {$/;"	c
_MP3_ADU_RTP_SINK_HH	include/MP3ADURTPSink.hh	22;"	d
fCurADUSize	include/MP3ADURTPSink.hh	/^  unsigned fCurADUSize; \/\/ used when fragmenting over multiple RTP packets$/;"	m	class:MP3ADURTPSink
MP3ADURTPSource	include/MP3ADURTPSource.hh	/^class MP3ADURTPSource: public MultiFramedRTPSource {$/;"	c
_MP3_ADU_SOURCE_HH	include/MP3ADURTPSource.hh	22;"	d
MP3ADUTranscoder	include/MP3ADUTranscoder.hh	/^class MP3ADUTranscoder: public FramedFilter {$/;"	c
_MP3_ADU_TRANSCODER_HH	include/MP3ADUTranscoder.hh	22;"	d
fAvailableBytesForBackpointer	include/MP3ADUTranscoder.hh	/^  unsigned fAvailableBytesForBackpointer;$/;"	m	class:MP3ADUTranscoder
fOrigADU	include/MP3ADUTranscoder.hh	/^  unsigned char* fOrigADU;$/;"	m	class:MP3ADUTranscoder
fOutBitrate	include/MP3ADUTranscoder.hh	/^  unsigned fOutBitrate; \/\/ in kbps$/;"	m	class:MP3ADUTranscoder
outBitrate	include/MP3ADUTranscoder.hh	/^  unsigned outBitrate() const { return fOutBitrate; }$/;"	f	class:MP3ADUTranscoder
Interleaving	include/MP3ADUinterleaving.hh	/^class Interleaving {$/;"	c
MAX_CYCLE_SIZE	include/MP3ADUinterleaving.hh	29;"	d
MP3ADUdeinterleaver	include/MP3ADUinterleaving.hh	/^class MP3ADUdeinterleaver: public MP3ADUinterleaverBase {$/;"	c
MP3ADUinterleaver	include/MP3ADUinterleaving.hh	/^class MP3ADUinterleaver: public MP3ADUinterleaverBase {$/;"	c
MP3ADUinterleaverBase	include/MP3ADUinterleaving.hh	/^class MP3ADUinterleaverBase: public FramedFilter {$/;"	c
_MP3_ADU_INTERLEAVING_HH	include/MP3ADUinterleaving.hh	22;"	d
cycleSize	include/MP3ADUinterleaving.hh	/^  unsigned cycleSize() const {return fCycleSize;}$/;"	f	class:Interleaving
fCycleSize	include/MP3ADUinterleaving.hh	/^  unsigned fCycleSize;$/;"	m	class:Interleaving
fFrames	include/MP3ADUinterleaving.hh	/^  class DeinterleavingFrames* fFrames;$/;"	m	class:MP3ADUdeinterleaver	typeref:class:MP3ADUdeinterleaver::DeinterleavingFrames
fFrames	include/MP3ADUinterleaving.hh	/^  class InterleavingFrames* fFrames;$/;"	m	class:MP3ADUinterleaver	typeref:class:MP3ADUinterleaver::InterleavingFrames
fICC	include/MP3ADUinterleaving.hh	/^  unsigned fII, fICC;$/;"	m	class:MP3ADUinterleaver
fICClastSeen	include/MP3ADUinterleaving.hh	/^  unsigned fIIlastSeen, fICClastSeen;$/;"	m	class:MP3ADUdeinterleaver
fII	include/MP3ADUinterleaving.hh	/^  unsigned fII, fICC;$/;"	m	class:MP3ADUinterleaver
fIIlastSeen	include/MP3ADUinterleaving.hh	/^  unsigned fIIlastSeen, fICClastSeen;$/;"	m	class:MP3ADUdeinterleaver
fInterleaving	include/MP3ADUinterleaving.hh	/^  Interleaving const fInterleaving;$/;"	m	class:MP3ADUinterleaver
fInverseCycle	include/MP3ADUinterleaving.hh	/^  unsigned char fInverseCycle[MAX_CYCLE_SIZE];$/;"	m	class:Interleaving
fPositionOfNextIncomingFrame	include/MP3ADUinterleaving.hh	/^  unsigned char fPositionOfNextIncomingFrame;$/;"	m	class:MP3ADUinterleaver
lookupInverseCycle	include/MP3ADUinterleaving.hh	/^  unsigned char lookupInverseCycle(unsigned char index) const {$/;"	f	class:Interleaving
MP3AudioFileServerMediaSubsession	include/MP3AudioFileServerMediaSubsession.hh	/^class MP3AudioFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_MP3_AUDIO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/MP3AudioFileServerMediaSubsession.hh	24;"	d
fFileDuration	include/MP3AudioFileServerMediaSubsession.hh	/^  float fFileDuration;$/;"	m	class:MP3AudioFileServerMediaSubsession
fGenerateADUs	include/MP3AudioFileServerMediaSubsession.hh	/^  Boolean fGenerateADUs;$/;"	m	class:MP3AudioFileServerMediaSubsession
fInterleaving	include/MP3AudioFileServerMediaSubsession.hh	/^  Interleaving* fInterleaving;$/;"	m	class:MP3AudioFileServerMediaSubsession
MP3FileSource	include/MP3FileSource.hh	/^class MP3FileSource: public FramedFileSource {$/;"	c
_MP3_FILE_SOURCE_HH	include/MP3FileSource.hh	22;"	d
fFirstFramePresentationTime	include/MP3FileSource.hh	/^  struct timeval fFirstFramePresentationTime; \/\/ set on stream init$/;"	m	class:MP3FileSource	typeref:struct:MP3FileSource::timeval
fHaveJustInitialized	include/MP3FileSource.hh	/^  Boolean fHaveJustInitialized;$/;"	m	class:MP3FileSource
fLimitNumBytesToStream	include/MP3FileSource.hh	/^  Boolean fLimitNumBytesToStream;$/;"	m	class:MP3FileSource
fNumBytesToStream	include/MP3FileSource.hh	/^  unsigned fNumBytesToStream; \/\/ used iff "fLimitNumBytesToStream" is True$/;"	m	class:MP3FileSource
fStreamState	include/MP3FileSource.hh	/^  MP3StreamState* fStreamState;$/;"	m	class:MP3FileSource
streamState	include/MP3FileSource.hh	/^  MP3StreamState* streamState() {return fStreamState;}$/;"	f	class:MP3FileSource
MP3Transcoder	include/MP3Transcoder.hh	/^class MP3Transcoder: public MP3FromADUSource {$/;"	c
_MP3_TRANSCODER_HH	include/MP3Transcoder.hh	22;"	d
MPEG1or2AudioRTPSink	include/MPEG1or2AudioRTPSink.hh	/^class MPEG1or2AudioRTPSink: public AudioRTPSink {$/;"	c
_MPEG_1OR2_AUDIO_RTP_SINK_HH	include/MPEG1or2AudioRTPSink.hh	22;"	d
MPEG1or2AudioRTPSource	include/MPEG1or2AudioRTPSource.hh	/^class MPEG1or2AudioRTPSource: public MultiFramedRTPSource {$/;"	c
_MPEG_1OR2_AUDIO_RTP_SOURCE_HH	include/MPEG1or2AudioRTPSource.hh	22;"	d
MPEG1or2AudioStreamFramer	include/MPEG1or2AudioStreamFramer.hh	/^class MPEG1or2AudioStreamFramer: public FramedFilter {$/;"	c
_MPEG_1OR2_AUDIO_STREAM_FRAMER_HH	include/MPEG1or2AudioStreamFramer.hh	22;"	d
fNextFramePresentationTime	include/MPEG1or2AudioStreamFramer.hh	/^  struct timeval fNextFramePresentationTime;$/;"	m	class:MPEG1or2AudioStreamFramer	typeref:struct:MPEG1or2AudioStreamFramer::timeval
fParser	include/MPEG1or2AudioStreamFramer.hh	/^  class MPEG1or2AudioStreamParser* fParser;$/;"	m	class:MPEG1or2AudioStreamFramer	typeref:class:MPEG1or2AudioStreamFramer::MPEG1or2AudioStreamParser
fSyncWithInputSource	include/MPEG1or2AudioStreamFramer.hh	/^  Boolean fSyncWithInputSource;$/;"	m	class:MPEG1or2AudioStreamFramer
MPEG1or2Demux	include/MPEG1or2Demux.hh	/^class MPEG1or2Demux: public Medium {$/;"	c
OutputDescriptor	include/MPEG1or2Demux.hh	/^  typedef struct OutputDescriptor {$/;"	s	class:MPEG1or2Demux
OutputDescriptor_t	include/MPEG1or2Demux.hh	/^  } OutputDescriptor_t;$/;"	t	class:MPEG1or2Demux	typeref:struct:MPEG1or2Demux::OutputDescriptor
SCR	include/MPEG1or2Demux.hh	/^  class SCR {$/;"	c	class:MPEG1or2Demux
_MPEG_1OR2_DEMUX_HH	include/MPEG1or2Demux.hh	22;"	d
afterGettingClientData	include/MPEG1or2Demux.hh	/^    void* afterGettingClientData;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
extension	include/MPEG1or2Demux.hh	/^    u_int16_t extension;$/;"	m	class:MPEG1or2Demux::SCR
fAfterGettingFunc	include/MPEG1or2Demux.hh	/^    FramedSource::afterGettingFunc* fAfterGettingFunc;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
fHaveUndeliveredData	include/MPEG1or2Demux.hh	/^  Boolean fHaveUndeliveredData;$/;"	m	class:MPEG1or2Demux
fInputSource	include/MPEG1or2Demux.hh	/^  FramedSource* fInputSource;$/;"	m	class:MPEG1or2Demux
fLastSeenSCR	include/MPEG1or2Demux.hh	/^  SCR fLastSeenSCR;$/;"	m	class:MPEG1or2Demux
fMPEGversion	include/MPEG1or2Demux.hh	/^  unsigned char fMPEGversion;$/;"	m	class:MPEG1or2Demux
fNextAudioStreamNumber	include/MPEG1or2Demux.hh	/^  unsigned char fNextAudioStreamNumber;$/;"	m	class:MPEG1or2Demux
fNextVideoStreamNumber	include/MPEG1or2Demux.hh	/^  unsigned char fNextVideoStreamNumber;$/;"	m	class:MPEG1or2Demux
fNumOutstandingESs	include/MPEG1or2Demux.hh	/^  unsigned fNumOutstandingESs;$/;"	m	class:MPEG1or2Demux
fNumPendingReads	include/MPEG1or2Demux.hh	/^  unsigned fNumPendingReads;$/;"	m	class:MPEG1or2Demux
fOnCloseFunc	include/MPEG1or2Demux.hh	/^    FramedSource::onCloseFunc* fOnCloseFunc;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
fOutput	include/MPEG1or2Demux.hh	/^  OutputDescriptor_t fOutput[256];$/;"	m	class:MPEG1or2Demux
fParser	include/MPEG1or2Demux.hh	/^  class MPEGProgramStreamParser* fParser;$/;"	m	class:MPEG1or2Demux	typeref:class:MPEG1or2Demux::MPEGProgramStreamParser
fReclaimWhenLastESDies	include/MPEG1or2Demux.hh	/^  Boolean fReclaimWhenLastESDies;$/;"	m	class:MPEG1or2Demux
frameSize	include/MPEG1or2Demux.hh	/^    unsigned frameSize; struct timeval presentationTime;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
highBit	include/MPEG1or2Demux.hh	/^    u_int8_t highBit;$/;"	m	class:MPEG1or2Demux::SCR
inputSource	include/MPEG1or2Demux.hh	/^  FramedSource* inputSource() const { return fInputSource; }$/;"	f	class:MPEG1or2Demux
isCurrentlyActive	include/MPEG1or2Demux.hh	/^    Boolean isCurrentlyActive;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
isCurrentlyAwaitingData	include/MPEG1or2Demux.hh	/^    Boolean isCurrentlyAwaitingData;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
isPotentiallyReadable	include/MPEG1or2Demux.hh	/^    Boolean isPotentiallyReadable;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
isValid	include/MPEG1or2Demux.hh	/^    Boolean isValid;$/;"	m	class:MPEG1or2Demux::SCR
lastSeenSCR	include/MPEG1or2Demux.hh	/^  SCR& lastSeenSCR() { return fLastSeenSCR; }$/;"	f	class:MPEG1or2Demux
maxSize	include/MPEG1or2Demux.hh	/^    unsigned char* to; unsigned maxSize;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
mpegVersion	include/MPEG1or2Demux.hh	/^  unsigned char mpegVersion() const { return fMPEGversion; }$/;"	f	class:MPEG1or2Demux
onCloseClientData	include/MPEG1or2Demux.hh	/^    void* onCloseClientData;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
presentationTime	include/MPEG1or2Demux.hh	/^    unsigned frameSize; struct timeval presentationTime;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor	typeref:struct:MPEG1or2Demux::OutputDescriptor::timeval
remainingBits	include/MPEG1or2Demux.hh	/^    u_int32_t remainingBits;$/;"	m	class:MPEG1or2Demux::SCR
savedDataHead	include/MPEG1or2Demux.hh	/^    SavedData* savedDataHead;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
savedDataTail	include/MPEG1or2Demux.hh	/^    SavedData* savedDataTail;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
savedDataTotalSize	include/MPEG1or2Demux.hh	/^    unsigned savedDataTotalSize;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
to	include/MPEG1or2Demux.hh	/^    unsigned char* to; unsigned maxSize;$/;"	m	struct:MPEG1or2Demux::OutputDescriptor
MPEG1or2DemuxedElementaryStream	include/MPEG1or2DemuxedElementaryStream.hh	/^class MPEG1or2DemuxedElementaryStream: public FramedSource {$/;"	c
_MPEG_1OR2_DEMUXED_ELEMENTARY_STREAM_HH	include/MPEG1or2DemuxedElementaryStream.hh	22;"	d
fLastSeenSCR	include/MPEG1or2DemuxedElementaryStream.hh	/^  MPEG1or2Demux::SCR fLastSeenSCR;$/;"	m	class:MPEG1or2DemuxedElementaryStream
fMIMEtype	include/MPEG1or2DemuxedElementaryStream.hh	/^  char const* fMIMEtype;$/;"	m	class:MPEG1or2DemuxedElementaryStream
fMPEGversion	include/MPEG1or2DemuxedElementaryStream.hh	/^  unsigned char fMPEGversion;$/;"	m	class:MPEG1or2DemuxedElementaryStream
fOurSourceDemux	include/MPEG1or2DemuxedElementaryStream.hh	/^  MPEG1or2Demux& fOurSourceDemux;$/;"	m	class:MPEG1or2DemuxedElementaryStream
fOurStreamIdTag	include/MPEG1or2DemuxedElementaryStream.hh	/^  u_int8_t fOurStreamIdTag;$/;"	m	class:MPEG1or2DemuxedElementaryStream
lastSeenSCR	include/MPEG1or2DemuxedElementaryStream.hh	/^  MPEG1or2Demux::SCR lastSeenSCR() const { return fLastSeenSCR; }$/;"	f	class:MPEG1or2DemuxedElementaryStream
mpegVersion	include/MPEG1or2DemuxedElementaryStream.hh	/^  unsigned char mpegVersion() const { return fMPEGversion; }$/;"	f	class:MPEG1or2DemuxedElementaryStream
sourceDemux	include/MPEG1or2DemuxedElementaryStream.hh	/^  MPEG1or2Demux& sourceDemux() const { return fOurSourceDemux; }$/;"	f	class:MPEG1or2DemuxedElementaryStream
MPEG1or2DemuxedServerMediaSubsession	include/MPEG1or2DemuxedServerMediaSubsession.hh	/^class MPEG1or2DemuxedServerMediaSubsession: public OnDemandServerMediaSubsession{$/;"	c
_MPEG_1OR2_DEMUXED_SERVER_MEDIA_SUBSESSION_HH	include/MPEG1or2DemuxedServerMediaSubsession.hh	23;"	d
fIFramesOnly	include/MPEG1or2DemuxedServerMediaSubsession.hh	/^  Boolean fIFramesOnly; \/\/ for video streams$/;"	m	class:MPEG1or2DemuxedServerMediaSubsession
fOurDemux	include/MPEG1or2DemuxedServerMediaSubsession.hh	/^  MPEG1or2FileServerDemux& fOurDemux;$/;"	m	class:MPEG1or2DemuxedServerMediaSubsession
fStreamIdTag	include/MPEG1or2DemuxedServerMediaSubsession.hh	/^  u_int8_t fStreamIdTag;$/;"	m	class:MPEG1or2DemuxedServerMediaSubsession
fVSHPeriod	include/MPEG1or2DemuxedServerMediaSubsession.hh	/^  double fVSHPeriod; \/\/ for video streams$/;"	m	class:MPEG1or2DemuxedServerMediaSubsession
MPEG1or2FileServerDemux	include/MPEG1or2FileServerDemux.hh	/^class MPEG1or2FileServerDemux: public Medium {$/;"	c
_MPEG_1OR2_FILE_SERVER_DEMUX_HH	include/MPEG1or2FileServerDemux.hh	22;"	d
fFileDuration	include/MPEG1or2FileServerDemux.hh	/^  float fFileDuration;$/;"	m	class:MPEG1or2FileServerDemux
fFileName	include/MPEG1or2FileServerDemux.hh	/^  char const* fFileName;$/;"	m	class:MPEG1or2FileServerDemux
fFileSize	include/MPEG1or2FileServerDemux.hh	/^  unsigned fFileSize;$/;"	m	class:MPEG1or2FileServerDemux
fLastClientSessionId	include/MPEG1or2FileServerDemux.hh	/^  unsigned fLastClientSessionId;$/;"	m	class:MPEG1or2FileServerDemux
fLastCreatedDemux	include/MPEG1or2FileServerDemux.hh	/^  MPEG1or2Demux* fLastCreatedDemux;$/;"	m	class:MPEG1or2FileServerDemux
fReuseFirstSource	include/MPEG1or2FileServerDemux.hh	/^  Boolean fReuseFirstSource;$/;"	m	class:MPEG1or2FileServerDemux
fSession0Demux	include/MPEG1or2FileServerDemux.hh	/^  MPEG1or2Demux* fSession0Demux;$/;"	m	class:MPEG1or2FileServerDemux
fileDuration	include/MPEG1or2FileServerDemux.hh	/^  float fileDuration() const { return fFileDuration; }$/;"	f	class:MPEG1or2FileServerDemux
fileSize	include/MPEG1or2FileServerDemux.hh	/^  unsigned fileSize() const { return fFileSize; }$/;"	f	class:MPEG1or2FileServerDemux
MPEG1or2VideoFileServerMediaSubsession	include/MPEG1or2VideoFileServerMediaSubsession.hh	/^class MPEG1or2VideoFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_MPEG_1OR2_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/MPEG1or2VideoFileServerMediaSubsession.hh	23;"	d
fIFramesOnly	include/MPEG1or2VideoFileServerMediaSubsession.hh	/^  Boolean fIFramesOnly;$/;"	m	class:MPEG1or2VideoFileServerMediaSubsession
fVSHPeriod	include/MPEG1or2VideoFileServerMediaSubsession.hh	/^  double fVSHPeriod;$/;"	m	class:MPEG1or2VideoFileServerMediaSubsession
MPEG1or2VideoRTPSink	include/MPEG1or2VideoRTPSink.hh	/^class MPEG1or2VideoRTPSink: public VideoRTPSink {$/;"	c
_MPEG_1OR2_VIDEO_RTP_SINK_HH	include/MPEG1or2VideoRTPSink.hh	22;"	d
fPacketBeginsSlice	include/MPEG1or2VideoRTPSink.hh	/^  Boolean fPacketBeginsSlice, fPacketEndsSlice;$/;"	m	class:MPEG1or2VideoRTPSink
fPacketEndsSlice	include/MPEG1or2VideoRTPSink.hh	/^  Boolean fPacketBeginsSlice, fPacketEndsSlice;$/;"	m	class:MPEG1or2VideoRTPSink
fPictureState	include/MPEG1or2VideoRTPSink.hh	/^  } fPictureState;$/;"	m	class:MPEG1or2VideoRTPSink	typeref:struct:MPEG1or2VideoRTPSink::__anon8
fPreviousFrameWasSlice	include/MPEG1or2VideoRTPSink.hh	/^  Boolean fPreviousFrameWasSlice;$/;"	m	class:MPEG1or2VideoRTPSink
fSequenceHeaderPresent	include/MPEG1or2VideoRTPSink.hh	/^  Boolean fSequenceHeaderPresent;$/;"	m	class:MPEG1or2VideoRTPSink
picture_coding_type	include/MPEG1or2VideoRTPSink.hh	/^    unsigned char picture_coding_type;$/;"	m	struct:MPEG1or2VideoRTPSink::__anon8
temporal_reference	include/MPEG1or2VideoRTPSink.hh	/^    unsigned temporal_reference;$/;"	m	struct:MPEG1or2VideoRTPSink::__anon8
vector_code_bits	include/MPEG1or2VideoRTPSink.hh	/^    unsigned char vector_code_bits; \/\/ FBV,BFC,FFV,FFC from RFC 2250, sec. 3.4$/;"	m	struct:MPEG1or2VideoRTPSink::__anon8
MPEG1or2VideoRTPSource	include/MPEG1or2VideoRTPSource.hh	/^class MPEG1or2VideoRTPSource: public MultiFramedRTPSource {$/;"	c
_MPEG_1OR2_VIDEO_RTP_SOURCE_HH	include/MPEG1or2VideoRTPSource.hh	22;"	d
MPEG1or2VideoStreamDiscreteFramer	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^class MPEG1or2VideoStreamDiscreteFramer: public MPEG1or2VideoStreamFramer {$/;"	c
VSH_MAX_SIZE	include/MPEG1or2VideoStreamDiscreteFramer.hh	31;"	d
_MPEG1or2_VIDEO_STREAM_DISCRETE_FRAMER_HH	include/MPEG1or2VideoStreamDiscreteFramer.hh	25;"	d
fIFramesOnly	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  Boolean fIFramesOnly;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fLastNonBFramePresentationTime	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  struct timeval fLastNonBFramePresentationTime;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer	typeref:struct:MPEG1or2VideoStreamDiscreteFramer::timeval
fLastNonBFrameTemporal_reference	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  unsigned fLastNonBFrameTemporal_reference;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fLeavePresentationTimesUnmodified	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  Boolean fLeavePresentationTimesUnmodified;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fSavedVSHBuffer	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  unsigned char fSavedVSHBuffer[VSH_MAX_SIZE];$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fSavedVSHSize	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  unsigned fSavedVSHSize;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fSavedVSHTimestamp	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  double fSavedVSHTimestamp;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
fVSHPeriod	include/MPEG1or2VideoStreamDiscreteFramer.hh	/^  double fVSHPeriod;$/;"	m	class:MPEG1or2VideoStreamDiscreteFramer
MPEG1or2VideoStreamFramer	include/MPEG1or2VideoStreamFramer.hh	/^class MPEG1or2VideoStreamFramer: public MPEGVideoStreamFramer {$/;"	c
_MPEG_1OR2_VIDEO_STREAM_FRAMER_HH	include/MPEG1or2VideoStreamFramer.hh	23;"	d
MAX_PES_PACKET_SIZE	include/MPEG2IndexFromTransportStream.hh	33;"	d
MPEG2IFrameIndexFromTransportStream	include/MPEG2IndexFromTransportStream.hh	/^class MPEG2IFrameIndexFromTransportStream: public FramedFilter {$/;"	c
TRANSPORT_PACKET_SIZE	include/MPEG2IndexFromTransportStream.hh	29;"	d
_MPEG2_IFRAME_INDEX_FROM_TRANSPORT_STREAM_HH	include/MPEG2IndexFromTransportStream.hh	22;"	d
fClosureNumber	include/MPEG2IndexFromTransportStream.hh	/^  unsigned fClosureNumber;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fFirstPCR	include/MPEG2IndexFromTransportStream.hh	/^  float fFirstPCR, fLastPCR;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fHaveSeenFirstPCR	include/MPEG2IndexFromTransportStream.hh	/^  Boolean fHaveSeenFirstPCR;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fHeadIndexRecord	include/MPEG2IndexFromTransportStream.hh	/^  IndexRecord* fHeadIndexRecord;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fInputBuffer	include/MPEG2IndexFromTransportStream.hh	/^  unsigned char fInputBuffer[TRANSPORT_PACKET_SIZE];$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fInputTransportPacketCounter	include/MPEG2IndexFromTransportStream.hh	/^  unsigned long fInputTransportPacketCounter;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fIsH264	include/MPEG2IndexFromTransportStream.hh	/^  Boolean fIsH264; \/\/ True iff the video is H.264 (encapsulated in a Transport Stream)$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fIsH265	include/MPEG2IndexFromTransportStream.hh	/^  Boolean fIsH265; \/\/ True iff the video is H.265 (encapsulated in a Transport Stream)$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fLastContinuityCounter	include/MPEG2IndexFromTransportStream.hh	/^  u_int8_t fLastContinuityCounter;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fLastPCR	include/MPEG2IndexFromTransportStream.hh	/^  float fFirstPCR, fLastPCR;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fPMT_PID	include/MPEG2IndexFromTransportStream.hh	/^  u_int16_t fPMT_PID, fVideo_PID;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fParseBuffer	include/MPEG2IndexFromTransportStream.hh	/^  unsigned char* fParseBuffer;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fParseBufferDataEnd	include/MPEG2IndexFromTransportStream.hh	/^  unsigned fParseBufferDataEnd;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fParseBufferFrameStart	include/MPEG2IndexFromTransportStream.hh	/^  unsigned fParseBufferFrameStart;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fParseBufferParseEnd	include/MPEG2IndexFromTransportStream.hh	/^  unsigned fParseBufferParseEnd;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fParseBufferSize	include/MPEG2IndexFromTransportStream.hh	/^  unsigned fParseBufferSize;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fTailIndexRecord	include/MPEG2IndexFromTransportStream.hh	/^  IndexRecord* fTailIndexRecord;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
fVideo_PID	include/MPEG2IndexFromTransportStream.hh	/^  u_int16_t fPMT_PID, fVideo_PID;$/;"	m	class:MPEG2IFrameIndexFromTransportStream
ClientTrickPlayState	include/MPEG2TransportFileServerMediaSubsession.hh	/^class ClientTrickPlayState {$/;"	c
MPEG2TransportFileServerMediaSubsession	include/MPEG2TransportFileServerMediaSubsession.hh	/^class MPEG2TransportFileServerMediaSubsession: public FileServerMediaSubsession {$/;"	c
_MPEG2_TRANSPORT_FILE_SERVER_MEDIA_SUBSESSION_HH	include/MPEG2TransportFileServerMediaSubsession.hh	23;"	d
areChangingScale	include/MPEG2TransportFileServerMediaSubsession.hh	/^  Boolean areChangingScale() const { return fNextScale != fScale; }$/;"	f	class:ClientTrickPlayState
fClientSessionHashTable	include/MPEG2TransportFileServerMediaSubsession.hh	/^  HashTable* fClientSessionHashTable; \/\/ indexed by client session id$/;"	m	class:MPEG2TransportFileServerMediaSubsession
fDuration	include/MPEG2TransportFileServerMediaSubsession.hh	/^  float fDuration;$/;"	m	class:MPEG2TransportFileServerMediaSubsession
fFramer	include/MPEG2TransportFileServerMediaSubsession.hh	/^  MPEG2TransportStreamFramer* fFramer;$/;"	m	class:ClientTrickPlayState
fIndexFile	include/MPEG2TransportFileServerMediaSubsession.hh	/^  MPEG2TransportStreamIndexFile* fIndexFile;$/;"	m	class:ClientTrickPlayState
fIndexFile	include/MPEG2TransportFileServerMediaSubsession.hh	/^  MPEG2TransportStreamIndexFile* fIndexFile;$/;"	m	class:MPEG2TransportFileServerMediaSubsession
fIxRecordNum	include/MPEG2TransportFileServerMediaSubsession.hh	/^  unsigned long fTSRecordNum, fIxRecordNum;$/;"	m	class:ClientTrickPlayState
fNPT	include/MPEG2TransportFileServerMediaSubsession.hh	/^  float fScale, fNextScale, fNPT;$/;"	m	class:ClientTrickPlayState
fNextScale	include/MPEG2TransportFileServerMediaSubsession.hh	/^  float fScale, fNextScale, fNPT;$/;"	m	class:ClientTrickPlayState
fOriginalTransportStreamSource	include/MPEG2TransportFileServerMediaSubsession.hh	/^  ByteStreamFileSource* fOriginalTransportStreamSource;$/;"	m	class:ClientTrickPlayState
fScale	include/MPEG2TransportFileServerMediaSubsession.hh	/^  float fScale, fNextScale, fNPT;$/;"	m	class:ClientTrickPlayState
fTSRecordNum	include/MPEG2TransportFileServerMediaSubsession.hh	/^  unsigned long fTSRecordNum, fIxRecordNum;$/;"	m	class:ClientTrickPlayState
fTrickModeFilter	include/MPEG2TransportFileServerMediaSubsession.hh	/^  MPEG2TransportStreamTrickModeFilter* fTrickModeFilter;$/;"	m	class:ClientTrickPlayState
fTrickPlaySource	include/MPEG2TransportFileServerMediaSubsession.hh	/^  MPEG2TransportStreamFromESSource* fTrickPlaySource;$/;"	m	class:ClientTrickPlayState
setNextScale	include/MPEG2TransportFileServerMediaSubsession.hh	/^  void setNextScale(float nextScale) { fNextScale = nextScale; }$/;"	f	class:ClientTrickPlayState
MPEG2TransportStreamFramer	include/MPEG2TransportStreamFramer.hh	/^class MPEG2TransportStreamFramer: public FramedFilter {$/;"	c
_MPEG2_TRANSPORT_STREAM_FRAMER_HH	include/MPEG2TransportStreamFramer.hh	24;"	d
changeInputSource	include/MPEG2TransportStreamFramer.hh	/^  void changeInputSource(FramedSource* newInputSource) { fInputSource = newInputSource; }$/;"	f	class:MPEG2TransportStreamFramer
fLimitNumTSPacketsToStream	include/MPEG2TransportStreamFramer.hh	/^  Boolean fLimitNumTSPacketsToStream;$/;"	m	class:MPEG2TransportStreamFramer
fLimitTSPacketsToStreamByPCR	include/MPEG2TransportStreamFramer.hh	/^  Boolean fLimitTSPacketsToStreamByPCR;$/;"	m	class:MPEG2TransportStreamFramer
fNumTSPacketsToStream	include/MPEG2TransportStreamFramer.hh	/^  unsigned long fNumTSPacketsToStream; \/\/ used iff "fLimitNumTSPacketsToStream" is True$/;"	m	class:MPEG2TransportStreamFramer
fPCRLimit	include/MPEG2TransportStreamFramer.hh	/^  float fPCRLimit; \/\/ used iff "fLimitTSPacketsToStreamByPCR" is True$/;"	m	class:MPEG2TransportStreamFramer
fPIDStatusTable	include/MPEG2TransportStreamFramer.hh	/^  HashTable* fPIDStatusTable;$/;"	m	class:MPEG2TransportStreamFramer
fTSPCRCount	include/MPEG2TransportStreamFramer.hh	/^  u_int64_t fTSPCRCount;$/;"	m	class:MPEG2TransportStreamFramer
fTSPacketCount	include/MPEG2TransportStreamFramer.hh	/^  u_int64_t fTSPacketCount;$/;"	m	class:MPEG2TransportStreamFramer
fTSPacketDurationEstimate	include/MPEG2TransportStreamFramer.hh	/^  double fTSPacketDurationEstimate;$/;"	m	class:MPEG2TransportStreamFramer
tsPacketCount	include/MPEG2TransportStreamFramer.hh	/^  u_int64_t tsPacketCount() const { return fTSPacketCount; }$/;"	f	class:MPEG2TransportStreamFramer
MPEG2TransportStreamFromESSource	include/MPEG2TransportStreamFromESSource.hh	/^class MPEG2TransportStreamFromESSource: public MPEG2TransportStreamMultiplexor {$/;"	c
_MPEG2_TRANSPORT_STREAM_FROM_ES_SOURCE_HH	include/MPEG2TransportStreamFromESSource.hh	23;"	d
fAudioSourceCounter	include/MPEG2TransportStreamFromESSource.hh	/^  unsigned fVideoSourceCounter, fAudioSourceCounter;$/;"	m	class:MPEG2TransportStreamFromESSource
fAwaitingBackgroundDelivery	include/MPEG2TransportStreamFromESSource.hh	/^  Boolean fAwaitingBackgroundDelivery;$/;"	m	class:MPEG2TransportStreamFromESSource
fInputSources	include/MPEG2TransportStreamFromESSource.hh	/^  class InputESSourceRecord* fInputSources;$/;"	m	class:MPEG2TransportStreamFromESSource	typeref:class:MPEG2TransportStreamFromESSource::InputESSourceRecord
fVideoSourceCounter	include/MPEG2TransportStreamFromESSource.hh	/^  unsigned fVideoSourceCounter, fAudioSourceCounter;$/;"	m	class:MPEG2TransportStreamFromESSource
MPEG2TransportStreamFromPESSource	include/MPEG2TransportStreamFromPESSource.hh	/^class MPEG2TransportStreamFromPESSource: public MPEG2TransportStreamMultiplexor {$/;"	c
_MPEG2_TRANSPORT_STREAM_FROM_PES_SOURCE_HH	include/MPEG2TransportStreamFromPESSource.hh	22;"	d
fInputBuffer	include/MPEG2TransportStreamFromPESSource.hh	/^  unsigned char* fInputBuffer;$/;"	m	class:MPEG2TransportStreamFromPESSource
fInputSource	include/MPEG2TransportStreamFromPESSource.hh	/^  MPEG1or2DemuxedElementaryStream* fInputSource;$/;"	m	class:MPEG2TransportStreamFromPESSource
INDEX_RECORD_SIZE	include/MPEG2TransportStreamIndexFile.hh	31;"	d
MPEG2TransportStreamIndexFile	include/MPEG2TransportStreamIndexFile.hh	/^class MPEG2TransportStreamIndexFile: public Medium {$/;"	c
_MPEG2_TRANSPORT_STREAM_INDEX_FILE_HH	include/MPEG2TransportStreamIndexFile.hh	25;"	d
fBuf	include/MPEG2TransportStreamIndexFile.hh	/^  unsigned char fBuf[INDEX_RECORD_SIZE]; \/\/ used for reading index records from file$/;"	m	class:MPEG2TransportStreamIndexFile
fCachedIndexRecordNumber	include/MPEG2TransportStreamIndexFile.hh	/^  unsigned long fCachedTSPacketNumber, fCachedIndexRecordNumber;$/;"	m	class:MPEG2TransportStreamIndexFile
fCachedPCR	include/MPEG2TransportStreamIndexFile.hh	/^  float fCachedPCR;$/;"	m	class:MPEG2TransportStreamIndexFile
fCachedTSPacketNumber	include/MPEG2TransportStreamIndexFile.hh	/^  unsigned long fCachedTSPacketNumber, fCachedIndexRecordNumber;$/;"	m	class:MPEG2TransportStreamIndexFile
fCurrentIndexRecordNum	include/MPEG2TransportStreamIndexFile.hh	/^  unsigned long fCurrentIndexRecordNum; \/\/ within "fFid"$/;"	m	class:MPEG2TransportStreamIndexFile
fFid	include/MPEG2TransportStreamIndexFile.hh	/^  FILE* fFid; \/\/ used internally when reading from the file$/;"	m	class:MPEG2TransportStreamIndexFile
fFileName	include/MPEG2TransportStreamIndexFile.hh	/^  char* fFileName;$/;"	m	class:MPEG2TransportStreamIndexFile
fMPEGVersion	include/MPEG2TransportStreamIndexFile.hh	/^  int fMPEGVersion;$/;"	m	class:MPEG2TransportStreamIndexFile
fNumIndexRecords	include/MPEG2TransportStreamIndexFile.hh	/^  unsigned long fNumIndexRecords;$/;"	m	class:MPEG2TransportStreamIndexFile
offsetFromBuf	include/MPEG2TransportStreamIndexFile.hh	/^  u_int8_t offsetFromBuf() { return fBuf[1]; }$/;"	f	class:MPEG2TransportStreamIndexFile
recordTypeFromBuf	include/MPEG2TransportStreamIndexFile.hh	/^  u_int8_t recordTypeFromBuf() { return fBuf[0]; }$/;"	f	class:MPEG2TransportStreamIndexFile
sizeFromBuf	include/MPEG2TransportStreamIndexFile.hh	/^  u_int8_t sizeFromBuf() { return fBuf[2]; }$/;"	f	class:MPEG2TransportStreamIndexFile
stopReading	include/MPEG2TransportStreamIndexFile.hh	/^  void stopReading() { closeFid(); }$/;"	f	class:MPEG2TransportStreamIndexFile
MPEG2TransportStreamMultiplexor	include/MPEG2TransportStreamMultiplexor.hh	/^class MPEG2TransportStreamMultiplexor: public FramedSource {$/;"	c
PID_TABLE_SIZE	include/MPEG2TransportStreamMultiplexor.hh	32;"	d
_MPEG2_TRANSPORT_STREAM_MULTIPLEXOR_HH	include/MPEG2TransportStreamMultiplexor.hh	23;"	d
counter	include/MPEG2TransportStreamMultiplexor.hh	/^    unsigned counter;$/;"	m	struct:MPEG2TransportStreamMultiplexor::__anon7
fCurrentInputProgramMapVersion	include/MPEG2TransportStreamMultiplexor.hh	/^  u_int8_t fPreviousInputProgramMapVersion, fCurrentInputProgramMapVersion;$/;"	m	class:MPEG2TransportStreamMultiplexor
fCurrentPID	include/MPEG2TransportStreamMultiplexor.hh	/^  u_int8_t fPCR_PID, fCurrentPID;$/;"	m	class:MPEG2TransportStreamMultiplexor
fHaveVideoStreams	include/MPEG2TransportStreamMultiplexor.hh	/^  Boolean fHaveVideoStreams;$/;"	m	class:MPEG2TransportStreamMultiplexor
fInputBuffer	include/MPEG2TransportStreamMultiplexor.hh	/^  unsigned char* fInputBuffer;$/;"	m	class:MPEG2TransportStreamMultiplexor
fInputBufferBytesUsed	include/MPEG2TransportStreamMultiplexor.hh	/^  unsigned fInputBufferSize, fInputBufferBytesUsed;$/;"	m	class:MPEG2TransportStreamMultiplexor
fInputBufferSize	include/MPEG2TransportStreamMultiplexor.hh	/^  unsigned fInputBufferSize, fInputBufferBytesUsed;$/;"	m	class:MPEG2TransportStreamMultiplexor
fIsFirstAdaptationField	include/MPEG2TransportStreamMultiplexor.hh	/^  Boolean fIsFirstAdaptationField;$/;"	m	class:MPEG2TransportStreamMultiplexor
fOutgoingPacketCounter	include/MPEG2TransportStreamMultiplexor.hh	/^  unsigned fOutgoingPacketCounter;$/;"	m	class:MPEG2TransportStreamMultiplexor
fPCR	include/MPEG2TransportStreamMultiplexor.hh	/^  MPEG1or2Demux::SCR fPCR;$/;"	m	class:MPEG2TransportStreamMultiplexor
fPCR_PID	include/MPEG2TransportStreamMultiplexor.hh	/^  u_int8_t fPCR_PID, fCurrentPID;$/;"	m	class:MPEG2TransportStreamMultiplexor
fPIDState	include/MPEG2TransportStreamMultiplexor.hh	/^  } fPIDState[PID_TABLE_SIZE];$/;"	m	class:MPEG2TransportStreamMultiplexor	typeref:struct:MPEG2TransportStreamMultiplexor::__anon7
fPreviousInputProgramMapVersion	include/MPEG2TransportStreamMultiplexor.hh	/^  u_int8_t fPreviousInputProgramMapVersion, fCurrentInputProgramMapVersion;$/;"	m	class:MPEG2TransportStreamMultiplexor
fProgramMapVersion	include/MPEG2TransportStreamMultiplexor.hh	/^  unsigned fProgramMapVersion;$/;"	m	class:MPEG2TransportStreamMultiplexor
streamType	include/MPEG2TransportStreamMultiplexor.hh	/^    u_int8_t streamType; \/\/ for use in Program Maps$/;"	m	struct:MPEG2TransportStreamMultiplexor::__anon7
DELIVERING_SAVED_FRAME	include/MPEG2TransportStreamTrickModeFilter.hh	/^    DELIVERING_SAVED_FRAME,$/;"	e	enum:MPEG2TransportStreamTrickModeFilter::__anon9
MPEG2TransportStreamTrickModeFilter	include/MPEG2TransportStreamTrickModeFilter.hh	/^class MPEG2TransportStreamTrickModeFilter: public FramedFilter {$/;"	c
SAVING_AND_DELIVERING_FRAME	include/MPEG2TransportStreamTrickModeFilter.hh	/^    SAVING_AND_DELIVERING_FRAME$/;"	e	enum:MPEG2TransportStreamTrickModeFilter::__anon9
SKIPPING_FRAME	include/MPEG2TransportStreamTrickModeFilter.hh	/^    SKIPPING_FRAME,$/;"	e	enum:MPEG2TransportStreamTrickModeFilter::__anon9
TRANSPORT_PACKET_SIZE	include/MPEG2TransportStreamTrickModeFilter.hh	35;"	d
_MPEG2_TRANSPORT_STREAM_TRICK_MODE_FILTER_HH	include/MPEG2TransportStreamTrickModeFilter.hh	24;"	d
fCurrentTSPacketNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fCurrentTSPacketNum; \/\/ corresponding to data currently in the buffer$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fDesiredDataOffset	include/MPEG2TransportStreamTrickModeFilter.hh	/^  u_int8_t fDesiredDataOffset, fDesiredDataSize;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fDesiredDataPCR	include/MPEG2TransportStreamTrickModeFilter.hh	/^  float fDesiredDataPCR, fFirstPCR;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fDesiredDataSize	include/MPEG2TransportStreamTrickModeFilter.hh	/^  u_int8_t fDesiredDataOffset, fDesiredDataSize;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fDesiredTSPacketNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fDesiredTSPacketNum;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fDirection	include/MPEG2TransportStreamTrickModeFilter.hh	/^  int fDirection; \/\/ 1 => forward; -1 => reverse$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fFirstPCR	include/MPEG2TransportStreamTrickModeFilter.hh	/^  float fDesiredDataPCR, fFirstPCR;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fFrameCount	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned fFrameCount;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fHaveStarted	include/MPEG2TransportStreamTrickModeFilter.hh	/^  Boolean fHaveStarted;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fIndexFile	include/MPEG2TransportStreamTrickModeFilter.hh	/^  MPEG2TransportStreamIndexFile* fIndexFile;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fInputBuffer	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned char fInputBuffer[TRANSPORT_PACKET_SIZE];$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fNextIndexRecordNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fNextIndexRecordNum; \/\/ next to be read from the index file$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fNextTSPacketNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fNextTSPacketNum; \/\/ next to be read from the transport stream file$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fSavedFrameIndexRecordStart	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fSavedFrameIndexRecordStart;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fSavedSequentialIndexRecordNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long fSavedSequentialIndexRecordNum;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fScale	include/MPEG2TransportStreamTrickModeFilter.hh	/^  int fScale; \/\/ absolute value$/;"	m	class:MPEG2TransportStreamTrickModeFilter
fState	include/MPEG2TransportStreamTrickModeFilter.hh	/^  } fState;$/;"	m	class:MPEG2TransportStreamTrickModeFilter	typeref:enum:MPEG2TransportStreamTrickModeFilter::__anon9
fUseSavedFrameNextTime	include/MPEG2TransportStreamTrickModeFilter.hh	/^  Boolean fUseSavedFrameNextTime;$/;"	m	class:MPEG2TransportStreamTrickModeFilter
forgetInputSource	include/MPEG2TransportStreamTrickModeFilter.hh	/^  void forgetInputSource() { fInputSource = NULL; }$/;"	f	class:MPEG2TransportStreamTrickModeFilter
nextIndexRecordNum	include/MPEG2TransportStreamTrickModeFilter.hh	/^  unsigned long nextIndexRecordNum() const { return fNextIndexRecordNum; }$/;"	f	class:MPEG2TransportStreamTrickModeFilter
MPEG2TransportUDPServerMediaSubsession	include/MPEG2TransportUDPServerMediaSubsession.hh	/^class MPEG2TransportUDPServerMediaSubsession: public OnDemandServerMediaSubsession {$/;"	c
_MPEG2_TRANSPORT_UDP_SERVER_MEDIA_SUBSESSION_HH	include/MPEG2TransportUDPServerMediaSubsession.hh	23;"	d
fInputAddressStr	include/MPEG2TransportUDPServerMediaSubsession.hh	/^  char const* fInputAddressStr;$/;"	m	class:MPEG2TransportUDPServerMediaSubsession
fInputGroupsock	include/MPEG2TransportUDPServerMediaSubsession.hh	/^  Groupsock* fInputGroupsock;$/;"	m	class:MPEG2TransportUDPServerMediaSubsession
fInputPort	include/MPEG2TransportUDPServerMediaSubsession.hh	/^  Port fInputPort;$/;"	m	class:MPEG2TransportUDPServerMediaSubsession
fInputStreamIsRawUDP	include/MPEG2TransportUDPServerMediaSubsession.hh	/^  Boolean fInputStreamIsRawUDP;$/;"	m	class:MPEG2TransportUDPServerMediaSubsession
MPEG4ESVideoRTPSink	include/MPEG4ESVideoRTPSink.hh	/^class MPEG4ESVideoRTPSink: public VideoRTPSink {$/;"	c
_MPEG4ES_VIDEO_RTP_SINK_HH	include/MPEG4ESVideoRTPSink.hh	22;"	d
fConfigBytes	include/MPEG4ESVideoRTPSink.hh	/^  unsigned char* fConfigBytes;$/;"	m	class:MPEG4ESVideoRTPSink
fFmtpSDPLine	include/MPEG4ESVideoRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:MPEG4ESVideoRTPSink
fNumConfigBytes	include/MPEG4ESVideoRTPSink.hh	/^  unsigned fNumConfigBytes;$/;"	m	class:MPEG4ESVideoRTPSink
fProfileAndLevelIndication	include/MPEG4ESVideoRTPSink.hh	/^  u_int8_t fProfileAndLevelIndication;$/;"	m	class:MPEG4ESVideoRTPSink
fVOPIsPresent	include/MPEG4ESVideoRTPSink.hh	/^  Boolean fVOPIsPresent;$/;"	m	class:MPEG4ESVideoRTPSink
MPEG4ESVideoRTPSource	include/MPEG4ESVideoRTPSource.hh	/^class MPEG4ESVideoRTPSource: public MultiFramedRTPSource {$/;"	c
_MPEG4_ES_VIDEO_RTP_SOURCE_HH	include/MPEG4ESVideoRTPSource.hh	22;"	d
MPEG4GenericRTPSink	include/MPEG4GenericRTPSink.hh	/^class MPEG4GenericRTPSink: public MultiFramedRTPSink {$/;"	c
_MPEG4_GENERIC_RTP_SINK_HH	include/MPEG4GenericRTPSink.hh	22;"	d
fConfigString	include/MPEG4GenericRTPSink.hh	/^  char const* fConfigString;$/;"	m	class:MPEG4GenericRTPSink
fFmtpSDPLine	include/MPEG4GenericRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:MPEG4GenericRTPSink
fMPEG4Mode	include/MPEG4GenericRTPSink.hh	/^  char const* fMPEG4Mode;$/;"	m	class:MPEG4GenericRTPSink
fSDPMediaTypeString	include/MPEG4GenericRTPSink.hh	/^  char const* fSDPMediaTypeString;$/;"	m	class:MPEG4GenericRTPSink
MPEG4GenericRTPSource	include/MPEG4GenericRTPSource.hh	/^class MPEG4GenericRTPSource: public MultiFramedRTPSource {$/;"	c
_MPEG4_GENERIC_RTP_SOURCE_HH	include/MPEG4GenericRTPSource.hh	22;"	d
fAUHeaders	include/MPEG4GenericRTPSource.hh	/^  struct AUHeader* fAUHeaders;$/;"	m	class:MPEG4GenericRTPSource	typeref:struct:MPEG4GenericRTPSource::AUHeader
fIndexDeltaLength	include/MPEG4GenericRTPSource.hh	/^  unsigned fSizeLength, fIndexLength, fIndexDeltaLength;$/;"	m	class:MPEG4GenericRTPSource
fIndexLength	include/MPEG4GenericRTPSource.hh	/^  unsigned fSizeLength, fIndexLength, fIndexDeltaLength;$/;"	m	class:MPEG4GenericRTPSource
fMIMEType	include/MPEG4GenericRTPSource.hh	/^  char* fMIMEType;$/;"	m	class:MPEG4GenericRTPSource
fMode	include/MPEG4GenericRTPSource.hh	/^  char* fMode;$/;"	m	class:MPEG4GenericRTPSource
fNextAUHeader	include/MPEG4GenericRTPSource.hh	/^  unsigned fNextAUHeader; \/\/ index of the next AU Header to read$/;"	m	class:MPEG4GenericRTPSource
fNumAUHeaders	include/MPEG4GenericRTPSource.hh	/^  unsigned fNumAUHeaders; \/\/ in the most recently read packet$/;"	m	class:MPEG4GenericRTPSource
fSizeLength	include/MPEG4GenericRTPSource.hh	/^  unsigned fSizeLength, fIndexLength, fIndexDeltaLength;$/;"	m	class:MPEG4GenericRTPSource
MPEG4LATMAudioRTPSink	include/MPEG4LATMAudioRTPSink.hh	/^class MPEG4LATMAudioRTPSink: public AudioRTPSink {$/;"	c
_MPEG4_LATM_AUDIO_RTP_SINK_HH	include/MPEG4LATMAudioRTPSink.hh	24;"	d
fAllowMultipleFramesPerPacket	include/MPEG4LATMAudioRTPSink.hh	/^  Boolean fAllowMultipleFramesPerPacket;$/;"	m	class:MPEG4LATMAudioRTPSink
fFmtpSDPLine	include/MPEG4LATMAudioRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:MPEG4LATMAudioRTPSink
fStreamMuxConfigString	include/MPEG4LATMAudioRTPSink.hh	/^  char const* fStreamMuxConfigString;$/;"	m	class:MPEG4LATMAudioRTPSink
MPEG4LATMAudioRTPSource	include/MPEG4LATMAudioRTPSource.hh	/^class MPEG4LATMAudioRTPSource: public MultiFramedRTPSource {$/;"	c
_MPEG4_LATM_AUDIO_RTP_SOURCE_HH	include/MPEG4LATMAudioRTPSource.hh	22;"	d
fIncludeLATMDataLengthField	include/MPEG4LATMAudioRTPSource.hh	/^  Boolean fIncludeLATMDataLengthField;$/;"	m	class:MPEG4LATMAudioRTPSource
returnedFrameIncludesLATMDataLengthField	include/MPEG4LATMAudioRTPSource.hh	/^  Boolean returnedFrameIncludesLATMDataLengthField() const { return fIncludeLATMDataLengthField; }$/;"	f	class:MPEG4LATMAudioRTPSource
MPEG4VideoFileServerMediaSubsession	include/MPEG4VideoFileServerMediaSubsession.hh	/^class MPEG4VideoFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_MPEG4_VIDEO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/MPEG4VideoFileServerMediaSubsession.hh	23;"	d
fAuxSDPLine	include/MPEG4VideoFileServerMediaSubsession.hh	/^  char* fAuxSDPLine;$/;"	m	class:MPEG4VideoFileServerMediaSubsession
fDoneFlag	include/MPEG4VideoFileServerMediaSubsession.hh	/^  char fDoneFlag; \/\/ used when setting up "fAuxSDPLine"$/;"	m	class:MPEG4VideoFileServerMediaSubsession
fDummyRTPSink	include/MPEG4VideoFileServerMediaSubsession.hh	/^  RTPSink* fDummyRTPSink; \/\/ ditto$/;"	m	class:MPEG4VideoFileServerMediaSubsession
setDoneFlag	include/MPEG4VideoFileServerMediaSubsession.hh	/^  void setDoneFlag() { fDoneFlag = ~0; }$/;"	f	class:MPEG4VideoFileServerMediaSubsession
MPEG4VideoStreamDiscreteFramer	include/MPEG4VideoStreamDiscreteFramer.hh	/^class MPEG4VideoStreamDiscreteFramer: public MPEG4VideoStreamFramer {$/;"	c
_MPEG4_VIDEO_STREAM_DISCRETE_FRAMER_HH	include/MPEG4VideoStreamDiscreteFramer.hh	25;"	d
fLastNonBFramePresentationTime	include/MPEG4VideoStreamDiscreteFramer.hh	/^  struct timeval fLastNonBFramePresentationTime;$/;"	m	class:MPEG4VideoStreamDiscreteFramer	typeref:struct:MPEG4VideoStreamDiscreteFramer::timeval
fLastNonBFrameVop_time_increment	include/MPEG4VideoStreamDiscreteFramer.hh	/^  unsigned fLastNonBFrameVop_time_increment;$/;"	m	class:MPEG4VideoStreamDiscreteFramer
fLeavePresentationTimesUnmodified	include/MPEG4VideoStreamDiscreteFramer.hh	/^  Boolean fLeavePresentationTimesUnmodified;$/;"	m	class:MPEG4VideoStreamDiscreteFramer
fNumBitsSeenSoFar	include/MPEG4VideoStreamDiscreteFramer.hh	/^  unsigned fNumBitsSeenSoFar; \/\/ used by the getNextFrameBit*() routines$/;"	m	class:MPEG4VideoStreamDiscreteFramer
fNumVTIRBits	include/MPEG4VideoStreamDiscreteFramer.hh	/^  unsigned fNumVTIRBits;$/;"	m	class:MPEG4VideoStreamDiscreteFramer
vop_time_increment_resolution	include/MPEG4VideoStreamDiscreteFramer.hh	/^  u_int32_t vop_time_increment_resolution;$/;"	m	class:MPEG4VideoStreamDiscreteFramer
MPEG4VideoStreamFramer	include/MPEG4VideoStreamFramer.hh	/^class MPEG4VideoStreamFramer: public MPEGVideoStreamFramer {$/;"	c
_MPEG4_VIDEO_STREAM_FRAMER_HH	include/MPEG4VideoStreamFramer.hh	27;"	d
fConfigBytes	include/MPEG4VideoStreamFramer.hh	/^  unsigned char* fConfigBytes;$/;"	m	class:MPEG4VideoStreamFramer
fNewConfigBytes	include/MPEG4VideoStreamFramer.hh	/^  unsigned char* fNewConfigBytes;$/;"	m	class:MPEG4VideoStreamFramer
fNumConfigBytes	include/MPEG4VideoStreamFramer.hh	/^  unsigned fNumConfigBytes;$/;"	m	class:MPEG4VideoStreamFramer
fNumNewConfigBytes	include/MPEG4VideoStreamFramer.hh	/^  unsigned fNumNewConfigBytes;$/;"	m	class:MPEG4VideoStreamFramer
fProfileAndLevelIndication	include/MPEG4VideoStreamFramer.hh	/^  u_int8_t fProfileAndLevelIndication;$/;"	m	class:MPEG4VideoStreamFramer
profile_and_level_indication	include/MPEG4VideoStreamFramer.hh	/^  u_int8_t profile_and_level_indication() const {$/;"	f	class:MPEG4VideoStreamFramer
MPEGVideoStreamFramer	include/MPEGVideoStreamFramer.hh	/^class MPEGVideoStreamFramer: public FramedFilter {$/;"	c
TimeCode	include/MPEGVideoStreamFramer.hh	/^class TimeCode {$/;"	c
_MPEG_VIDEO_STREAM_FRAMER_HH	include/MPEGVideoStreamFramer.hh	23;"	d
days	include/MPEGVideoStreamFramer.hh	/^  unsigned days, hours, minutes, seconds, pictures;$/;"	m	class:TimeCode
fCurGOPTimeCode	include/MPEGVideoStreamFramer.hh	/^  TimeCode fCurGOPTimeCode, fPrevGOPTimeCode;$/;"	m	class:MPEGVideoStreamFramer
fFrameRate	include/MPEGVideoStreamFramer.hh	/^  double fFrameRate; \/\/ Note: For MPEG-4, this is really a 'tick rate'$/;"	m	class:MPEGVideoStreamFramer
fHaveSeenFirstTimeCode	include/MPEGVideoStreamFramer.hh	/^  Boolean fHaveSeenFirstTimeCode;$/;"	m	class:MPEGVideoStreamFramer
fParser	include/MPEGVideoStreamFramer.hh	/^  class MPEGVideoStreamParser* fParser;$/;"	m	class:MPEGVideoStreamFramer	typeref:class:MPEGVideoStreamFramer::MPEGVideoStreamParser
fPictureCount	include/MPEGVideoStreamFramer.hh	/^  unsigned fPictureCount; \/\/ hack used to implement doGetNextFrame()$/;"	m	class:MPEGVideoStreamFramer
fPictureEndMarker	include/MPEGVideoStreamFramer.hh	/^  Boolean fPictureEndMarker;$/;"	m	class:MPEGVideoStreamFramer
fPictureTimeBase	include/MPEGVideoStreamFramer.hh	/^  double fPictureTimeBase;$/;"	m	class:MPEGVideoStreamFramer
fPicturesAdjustment	include/MPEGVideoStreamFramer.hh	/^  unsigned fPicturesAdjustment;$/;"	m	class:MPEGVideoStreamFramer
fPresentationTimeBase	include/MPEGVideoStreamFramer.hh	/^  struct timeval fPresentationTimeBase;$/;"	m	class:MPEGVideoStreamFramer	typeref:struct:MPEGVideoStreamFramer::timeval
fPrevGOPTimeCode	include/MPEGVideoStreamFramer.hh	/^  TimeCode fCurGOPTimeCode, fPrevGOPTimeCode;$/;"	m	class:MPEGVideoStreamFramer
fTcSecsBase	include/MPEGVideoStreamFramer.hh	/^  unsigned fTcSecsBase;$/;"	m	class:MPEGVideoStreamFramer
hours	include/MPEGVideoStreamFramer.hh	/^  unsigned days, hours, minutes, seconds, pictures;$/;"	m	class:TimeCode
minutes	include/MPEGVideoStreamFramer.hh	/^  unsigned days, hours, minutes, seconds, pictures;$/;"	m	class:TimeCode
pictureEndMarker	include/MPEGVideoStreamFramer.hh	/^  Boolean& pictureEndMarker() { return fPictureEndMarker; }$/;"	f	class:MPEGVideoStreamFramer
pictures	include/MPEGVideoStreamFramer.hh	/^  unsigned days, hours, minutes, seconds, pictures;$/;"	m	class:TimeCode
seconds	include/MPEGVideoStreamFramer.hh	/^  unsigned days, hours, minutes, seconds, pictures;$/;"	m	class:TimeCode
MATROSKA_TRACK_TYPE_AUDIO	include/MatroskaFile.hh	108;"	d
MATROSKA_TRACK_TYPE_OTHER	include/MatroskaFile.hh	110;"	d
MATROSKA_TRACK_TYPE_SUBTITLE	include/MatroskaFile.hh	109;"	d
MATROSKA_TRACK_TYPE_VIDEO	include/MatroskaFile.hh	107;"	d
MatroskaDemux	include/MatroskaFile.hh	/^class MatroskaDemux: public Medium {$/;"	c
MatroskaFile	include/MatroskaFile.hh	/^class MatroskaFile: public Medium {$/;"	c
MatroskaTrack	include/MatroskaFile.hh	/^class MatroskaTrack {$/;"	c
_MATROSKA_FILE_HH	include/MatroskaFile.hh	22;"	d
chosenAudioTrackNumber	include/MatroskaFile.hh	/^  unsigned chosenAudioTrackNumber() { return fChosenAudioTrackNumber; }$/;"	f	class:MatroskaFile
chosenSubtitleTrackNumber	include/MatroskaFile.hh	/^  unsigned chosenSubtitleTrackNumber() { return fChosenSubtitleTrackNumber; }$/;"	f	class:MatroskaFile
chosenVideoTrackNumber	include/MatroskaFile.hh	/^  unsigned chosenVideoTrackNumber() { return fChosenVideoTrackNumber; }$/;"	f	class:MatroskaFile
codecID	include/MatroskaFile.hh	/^  char* codecID;$/;"	m	class:MatroskaTrack
codecIsOpus	include/MatroskaFile.hh	/^  Boolean codecIsOpus; \/\/ a hack for Opus audio$/;"	m	class:MatroskaTrack
codecPrivate	include/MatroskaFile.hh	/^  u_int8_t* codecPrivate;$/;"	m	class:MatroskaTrack
codecPrivateSize	include/MatroskaFile.hh	/^  unsigned codecPrivateSize;$/;"	m	class:MatroskaTrack
codecPrivateUsesH264FormatForH265	include/MatroskaFile.hh	/^  Boolean codecPrivateUsesH264FormatForH265; \/\/ a hack specifically for H.265 video tracks$/;"	m	class:MatroskaTrack
defaultDuration	include/MatroskaFile.hh	/^  unsigned defaultDuration;$/;"	m	class:MatroskaTrack
fChosenAudioTrackNumber	include/MatroskaFile.hh	/^  unsigned fChosenVideoTrackNumber, fChosenAudioTrackNumber, fChosenSubtitleTrackNumber;$/;"	m	class:MatroskaFile
fChosenSubtitleTrackNumber	include/MatroskaFile.hh	/^  unsigned fChosenVideoTrackNumber, fChosenAudioTrackNumber, fChosenSubtitleTrackNumber;$/;"	m	class:MatroskaFile
fChosenVideoTrackNumber	include/MatroskaFile.hh	/^  unsigned fChosenVideoTrackNumber, fChosenAudioTrackNumber, fChosenSubtitleTrackNumber;$/;"	m	class:MatroskaFile
fClusterOffset	include/MatroskaFile.hh	/^  u_int64_t fSegmentDataOffset, fClusterOffset, fCuesOffset;$/;"	m	class:MatroskaFile
fCuePoints	include/MatroskaFile.hh	/^  class CuePoint* fCuePoints;$/;"	m	class:MatroskaFile	typeref:class:MatroskaFile::CuePoint
fCuesOffset	include/MatroskaFile.hh	/^  u_int64_t fSegmentDataOffset, fClusterOffset, fCuesOffset;$/;"	m	class:MatroskaFile
fDemuxedTracksTable	include/MatroskaFile.hh	/^  HashTable* fDemuxedTracksTable;$/;"	m	class:MatroskaDemux
fDemuxesTable	include/MatroskaFile.hh	/^  HashTable* fDemuxesTable;$/;"	m	class:MatroskaFile
fFileName	include/MatroskaFile.hh	/^  char const* fFileName;$/;"	m	class:MatroskaFile
fNextTrackTypeToCheck	include/MatroskaFile.hh	/^  u_int8_t fNextTrackTypeToCheck;$/;"	m	class:MatroskaDemux
fOnCreation	include/MatroskaFile.hh	/^  onCreationFunc* fOnCreation;$/;"	m	class:MatroskaFile
fOnCreationClientData	include/MatroskaFile.hh	/^  void* fOnCreationClientData;$/;"	m	class:MatroskaFile
fOurFile	include/MatroskaFile.hh	/^  MatroskaFile& fOurFile;$/;"	m	class:MatroskaDemux
fOurParser	include/MatroskaFile.hh	/^  class MatroskaFileParser* fOurParser;$/;"	m	class:MatroskaDemux	typeref:class:MatroskaDemux::MatroskaFileParser
fParserForInitialization	include/MatroskaFile.hh	/^  class MatroskaFileParser* fParserForInitialization;$/;"	m	class:MatroskaFile	typeref:class:MatroskaFile::MatroskaFileParser
fPreferredLanguage	include/MatroskaFile.hh	/^  char const* fPreferredLanguage;$/;"	m	class:MatroskaFile
fSegmentDataOffset	include/MatroskaFile.hh	/^  u_int64_t fSegmentDataOffset, fClusterOffset, fCuesOffset;$/;"	m	class:MatroskaFile
fSegmentDuration	include/MatroskaFile.hh	/^  float fSegmentDuration; \/\/ in units of "fTimecodeScale"$/;"	m	class:MatroskaFile
fTimecodeScale	include/MatroskaFile.hh	/^  unsigned fTimecodeScale; \/\/ in nanoseconds$/;"	m	class:MatroskaFile
fTrackTable	include/MatroskaFile.hh	/^  class MatroskaTrackTable* fTrackTable;$/;"	m	class:MatroskaFile	typeref:class:MatroskaFile::MatroskaTrackTable
fileName	include/MatroskaFile.hh	/^  char const* fileName() const { return fFileName; }$/;"	f	class:MatroskaFile
haveSubframes	include/MatroskaFile.hh	/^  Boolean haveSubframes() const { return subframeSizeSize > 0; }$/;"	f	class:MatroskaTrack
headerStrippedBytes	include/MatroskaFile.hh	/^  u_int8_t* headerStrippedBytes;$/;"	m	class:MatroskaTrack
headerStrippedBytesSize	include/MatroskaFile.hh	/^  unsigned headerStrippedBytesSize;$/;"	m	class:MatroskaTrack
isDefault	include/MatroskaFile.hh	/^  Boolean isEnabled, isDefault, isForced;$/;"	m	class:MatroskaTrack
isEnabled	include/MatroskaFile.hh	/^  Boolean isEnabled, isDefault, isForced;$/;"	m	class:MatroskaTrack
isForced	include/MatroskaFile.hh	/^  Boolean isEnabled, isDefault, isForced;$/;"	m	class:MatroskaTrack
language	include/MatroskaFile.hh	/^  char* language;$/;"	m	class:MatroskaTrack
mimeType	include/MatroskaFile.hh	/^  char const* mimeType;$/;"	m	class:MatroskaTrack
name	include/MatroskaFile.hh	/^  char* name;$/;"	m	class:MatroskaTrack
numChannels	include/MatroskaFile.hh	/^  unsigned numChannels;$/;"	m	class:MatroskaTrack
onCreationFunc	include/MatroskaFile.hh	/^  typedef void (onCreationFunc)(MatroskaFile* newFile, void* clientData);$/;"	t	class:MatroskaFile
samplingFrequency	include/MatroskaFile.hh	/^  unsigned samplingFrequency;$/;"	m	class:MatroskaTrack
segmentDuration	include/MatroskaFile.hh	/^  float segmentDuration() { return fSegmentDuration; } \/\/ in units of "timecodeScale()"$/;"	f	class:MatroskaFile
subframeSizeSize	include/MatroskaFile.hh	/^  unsigned subframeSizeSize; \/\/ 0 means: frames do not have subframes (the default behavior)$/;"	m	class:MatroskaTrack
timecodeScale	include/MatroskaFile.hh	/^  unsigned timecodeScale() { return fTimecodeScale; } \/\/ in nanoseconds$/;"	f	class:MatroskaFile
trackNumber	include/MatroskaFile.hh	/^  unsigned trackNumber;$/;"	m	class:MatroskaTrack
trackType	include/MatroskaFile.hh	/^  u_int8_t trackType;$/;"	m	class:MatroskaTrack
MatroskaFileServerDemux	include/MatroskaFileServerDemux.hh	/^class MatroskaFileServerDemux: public Medium {$/;"	c
_MATROSKA_FILE_SERVER_DEMUX_HH	include/MatroskaFileServerDemux.hh	22;"	d
fFileName	include/MatroskaFileServerDemux.hh	/^  char const* fFileName; $/;"	m	class:MatroskaFileServerDemux
fLastClientSessionId	include/MatroskaFileServerDemux.hh	/^  unsigned fLastClientSessionId;$/;"	m	class:MatroskaFileServerDemux
fLastCreatedDemux	include/MatroskaFileServerDemux.hh	/^  MatroskaDemux* fLastCreatedDemux;$/;"	m	class:MatroskaFileServerDemux
fNextTrackTypeToCheck	include/MatroskaFileServerDemux.hh	/^  u_int8_t fNextTrackTypeToCheck;$/;"	m	class:MatroskaFileServerDemux
fOnCreation	include/MatroskaFileServerDemux.hh	/^  onCreationFunc* fOnCreation;$/;"	m	class:MatroskaFileServerDemux
fOnCreationClientData	include/MatroskaFileServerDemux.hh	/^  void* fOnCreationClientData;$/;"	m	class:MatroskaFileServerDemux
fOurMatroskaFile	include/MatroskaFileServerDemux.hh	/^  MatroskaFile* fOurMatroskaFile;$/;"	m	class:MatroskaFileServerDemux
fileDuration	include/MatroskaFileServerDemux.hh	/^  float fileDuration() const { return fOurMatroskaFile->fileDuration(); }$/;"	f	class:MatroskaFileServerDemux
fileName	include/MatroskaFileServerDemux.hh	/^  char const* fileName() const { return fFileName; }$/;"	f	class:MatroskaFileServerDemux
onCreationFunc	include/MatroskaFileServerDemux.hh	/^  typedef void (onCreationFunc)(MatroskaFileServerDemux* newDemux, void* clientData);$/;"	t	class:MatroskaFileServerDemux
ourMatroskaFile	include/MatroskaFileServerDemux.hh	/^  MatroskaFile* ourMatroskaFile() { return fOurMatroskaFile; }$/;"	f	class:MatroskaFileServerDemux
MediaLookupTable	include/Media.hh	/^class MediaLookupTable {$/;"	c
Medium	include/Media.hh	/^class Medium {$/;"	c
_MEDIA_HH	include/Media.hh	22;"	d
_Tables	include/Media.hh	/^class _Tables {$/;"	c
_strnicmp	include/Media.hh	44;"	d
envir	include/Media.hh	/^  UsageEnvironment& envir() const {return fEnviron;}$/;"	f	class:Medium
fEnv	include/Media.hh	/^  UsageEnvironment& fEnv;$/;"	m	class:MediaLookupTable
fEnv	include/Media.hh	/^  UsageEnvironment& fEnv;$/;"	m	class:_Tables
fEnviron	include/Media.hh	/^  UsageEnvironment& fEnviron;$/;"	m	class:Medium
fMediumName	include/Media.hh	/^  char fMediumName[mediumNameMaxLen];$/;"	m	class:Medium
fNameGenerator	include/Media.hh	/^  unsigned fNameGenerator;$/;"	m	class:MediaLookupTable
fNextTask	include/Media.hh	/^  TaskToken fNextTask;$/;"	m	class:Medium
fTable	include/Media.hh	/^  HashTable* fTable;$/;"	m	class:MediaLookupTable
fabsf	include/Media.hh	45;"	d
getTable	include/Media.hh	/^  HashTable const& getTable() { return *fTable; }$/;"	f	class:MediaLookupTable
mediaTable	include/Media.hh	/^  MediaLookupTable* mediaTable;$/;"	m	class:_Tables
mediumNameMaxLen	include/Media.hh	48;"	d
name	include/Media.hh	/^  char const* name() const {return fMediumName;}$/;"	f	class:Medium
nextTask	include/Media.hh	/^  TaskToken& nextTask() {$/;"	f	class:Medium
socketTable	include/Media.hh	/^  void* socketTable;$/;"	m	class:_Tables
CNAME	include/MediaSession.hh	/^  char const* CNAME() const { return fCNAME; }$/;"	f	class:MediaSession
MediaSession	include/MediaSession.hh	/^class MediaSession: public Medium {$/;"	c
MediaSubsession	include/MediaSession.hh	/^class MediaSubsession {$/;"	c
MediaSubsessionIterator	include/MediaSession.hh	/^class MediaSubsessionIterator {$/;"	c
_MEDIA_SESSION_HH	include/MediaSession.hh	49;"	d
_absEndTime	include/MediaSession.hh	/^  char*& _absEndTime() { return fAbsEndTime; }$/;"	f	class:MediaSession
_absEndTime	include/MediaSession.hh	/^  char*& _absEndTime() { return fAbsEndTime; }$/;"	f	class:MediaSubsession
_absStartTime	include/MediaSession.hh	/^  char*& _absStartTime() { return fAbsStartTime; }$/;"	f	class:MediaSession
_absStartTime	include/MediaSession.hh	/^  char*& _absStartTime() { return fAbsStartTime; }$/;"	f	class:MediaSubsession
_playEndTime	include/MediaSession.hh	/^  double& _playEndTime() { return fPlayEndTime; }$/;"	f	class:MediaSubsession
_playStartTime	include/MediaSession.hh	/^  double& _playStartTime() { return fPlayStartTime; }$/;"	f	class:MediaSubsession
attrVal_bool	include/MediaSession.hh	/^  Boolean attrVal_bool(char const* attrName) const { return attrVal_int(attrName) != 0; }$/;"	f	class:MediaSubsession
attrVal_unsigned	include/MediaSession.hh	/^  unsigned attrVal_unsigned(char const* attrName) const { return (unsigned)attrVal_int(attrName); }$/;"	f	class:MediaSubsession
bandwidth	include/MediaSession.hh	/^  unsigned bandwidth() const { return fBandwidth; }$/;"	f	class:MediaSubsession
clientPortNum	include/MediaSession.hh	/^  unsigned short clientPortNum() const { return fClientPortNum; }$/;"	f	class:MediaSubsession
codecName	include/MediaSession.hh	/^  char const* codecName() const { return fCodecName; }$/;"	f	class:MediaSubsession
connectionEndpointName	include/MediaSession.hh	/^  char const* connectionEndpointName() const {$/;"	f	class:MediaSubsession
connectionEndpointName	include/MediaSession.hh	/^  char* connectionEndpointName() const { return fConnectionEndpointName; }$/;"	f	class:MediaSession
connectionEndpointName	include/MediaSession.hh	/^  char*& connectionEndpointName() { return fConnectionEndpointName; }$/;"	f	class:MediaSubsession
controlPath	include/MediaSession.hh	/^  char const* controlPath() const { return fControlPath; }$/;"	f	class:MediaSession
controlPath	include/MediaSession.hh	/^  char const* controlPath() const { return fControlPath; }$/;"	f	class:MediaSubsession
env	include/MediaSession.hh	/^  UsageEnvironment& env() { return fParent.envir(); }$/;"	f	class:MediaSubsession
fAbsEndTime	include/MediaSession.hh	/^  char* fAbsEndTime;$/;"	m	class:MediaSession
fAbsEndTime	include/MediaSession.hh	/^  char* fAbsEndTime;$/;"	m	class:MediaSubsession
fAbsStartTime	include/MediaSession.hh	/^  char* fAbsStartTime;$/;"	m	class:MediaSession
fAbsStartTime	include/MediaSession.hh	/^  char* fAbsStartTime;$/;"	m	class:MediaSubsession
fAttributeTable	include/MediaSession.hh	/^  HashTable* fAttributeTable; \/\/ for "a=fmtp:" attributes.  (Later an array by payload type #####)$/;"	m	class:MediaSubsession
fBandwidth	include/MediaSession.hh	/^  unsigned fBandwidth; \/\/ in kilobits-per-second, from b= line$/;"	m	class:MediaSubsession
fCNAME	include/MediaSession.hh	/^  char* fCNAME; \/\/ used for RTCP$/;"	m	class:MediaSession
fClientPortNum	include/MediaSession.hh	/^  unsigned short fClientPortNum; \/\/ in host byte order$/;"	m	class:MediaSubsession
fCodecName	include/MediaSession.hh	/^  char* fCodecName;$/;"	m	class:MediaSubsession
fConnectionEndpointName	include/MediaSession.hh	/^  char* fConnectionEndpointName; \/\/ may also be set by RTSP SETUP response$/;"	m	class:MediaSubsession
fConnectionEndpointName	include/MediaSession.hh	/^  char* fConnectionEndpointName;$/;"	m	class:MediaSession
fControlPath	include/MediaSession.hh	/^  char* fControlPath; \/\/ holds optional a=control: string$/;"	m	class:MediaSession
fControlPath	include/MediaSession.hh	/^  char* fControlPath; \/\/ holds optional a=control: string$/;"	m	class:MediaSubsession
fMaxPlayEndTime	include/MediaSession.hh	/^  double fMaxPlayEndTime;$/;"	m	class:MediaSession
fMaxPlayStartTime	include/MediaSession.hh	/^  double fMaxPlayStartTime;$/;"	m	class:MediaSession
fMediaSessionType	include/MediaSession.hh	/^  char* fMediaSessionType; \/\/ holds a=type value$/;"	m	class:MediaSession
fMediumName	include/MediaSession.hh	/^  char* fMediumName;$/;"	m	class:MediaSubsession
fMultiplexRTCPWithRTP	include/MediaSession.hh	/^  Boolean fMultiplexRTCPWithRTP;$/;"	m	class:MediaSubsession
fNPT_PTS_Offset	include/MediaSession.hh	/^  double fNPT_PTS_Offset; \/\/ set by "getNormalPlayTime()"; add this to a PTS to get NPT$/;"	m	class:MediaSubsession
fNext	include/MediaSession.hh	/^  MediaSubsession* fNext;$/;"	m	class:MediaSubsession
fNextPtr	include/MediaSession.hh	/^  MediaSubsession* fNextPtr;$/;"	m	class:MediaSubsessionIterator
fNumChannels	include/MediaSession.hh	/^  unsigned fNumChannels;$/;"	m	class:MediaSubsession
fOurSession	include/MediaSession.hh	/^  MediaSession const& fOurSession;$/;"	m	class:MediaSubsessionIterator
fParent	include/MediaSession.hh	/^  MediaSession& fParent;$/;"	m	class:MediaSubsession
fPlayEndTime	include/MediaSession.hh	/^  double fPlayEndTime;$/;"	m	class:MediaSubsession
fPlayStartTime	include/MediaSession.hh	/^  double fPlayStartTime;$/;"	m	class:MediaSubsession
fProtocolName	include/MediaSession.hh	/^  char* fProtocolName;$/;"	m	class:MediaSubsession
fRTCPInstance	include/MediaSession.hh	/^  RTPSource* fRTPSource; RTCPInstance* fRTCPInstance;$/;"	m	class:MediaSubsession
fRTCPSocket	include/MediaSession.hh	/^  Groupsock* fRTPSocket; Groupsock* fRTCPSocket; \/\/ works even for unicast$/;"	m	class:MediaSubsession
fRTPPayloadFormat	include/MediaSession.hh	/^  unsigned char fRTPPayloadFormat;$/;"	m	class:MediaSubsession
fRTPSocket	include/MediaSession.hh	/^  Groupsock* fRTPSocket; Groupsock* fRTCPSocket; \/\/ works even for unicast$/;"	m	class:MediaSubsession
fRTPSource	include/MediaSession.hh	/^  RTPSource* fRTPSource; RTCPInstance* fRTCPInstance;$/;"	m	class:MediaSubsession
fRTPTimestampFrequency	include/MediaSession.hh	/^  unsigned fRTPTimestampFrequency;$/;"	m	class:MediaSubsession
fReadSource	include/MediaSession.hh	/^  FramedSource* fReadSource;$/;"	m	class:MediaSubsession
fReceiveRawJPEGFrames	include/MediaSession.hh	/^  Boolean fReceiveRawMP3ADUs, fReceiveRawJPEGFrames;$/;"	m	class:MediaSubsession
fReceiveRawMP3ADUs	include/MediaSession.hh	/^  Boolean fReceiveRawMP3ADUs, fReceiveRawJPEGFrames;$/;"	m	class:MediaSubsession
fSavedSDPLines	include/MediaSession.hh	/^  char* fSavedSDPLines;$/;"	m	class:MediaSubsession
fScale	include/MediaSession.hh	/^  float fScale; \/\/ set from a RTSP "Scale:" header$/;"	m	class:MediaSession
fScale	include/MediaSession.hh	/^  float fScale; \/\/ set from a RTSP "Scale:" header$/;"	m	class:MediaSubsession
fSessionDescription	include/MediaSession.hh	/^  char* fSessionDescription; \/\/ holds i=<session description> value$/;"	m	class:MediaSession
fSessionId	include/MediaSession.hh	/^  char* fSessionId; \/\/ used by RTSP$/;"	m	class:MediaSubsession
fSessionName	include/MediaSession.hh	/^  char* fSessionName; \/\/ holds s=<session name> value$/;"	m	class:MediaSession
fSourceFilterAddr	include/MediaSession.hh	/^  struct in_addr fSourceFilterAddr; \/\/ used for SSM$/;"	m	class:MediaSession	typeref:struct:MediaSession::in_addr
fSourceFilterAddr	include/MediaSession.hh	/^  struct in_addr fSourceFilterAddr; \/\/ used for SSM$/;"	m	class:MediaSubsession	typeref:struct:MediaSubsession::in_addr
fSpeed	include/MediaSession.hh	/^  float fSpeed;$/;"	m	class:MediaSession
fSpeed	include/MediaSession.hh	/^  float fSpeed;$/;"	m	class:MediaSubsession
fSubsessionsHead	include/MediaSession.hh	/^  MediaSubsession* fSubsessionsHead;$/;"	m	class:MediaSession
fSubsessionsTail	include/MediaSession.hh	/^  MediaSubsession* fSubsessionsTail;$/;"	m	class:MediaSession
fVideoFPS	include/MediaSession.hh	/^  unsigned fVideoFPS;$/;"	m	class:MediaSubsession
fVideoHeight	include/MediaSession.hh	/^  unsigned short fVideoWidth, fVideoHeight;$/;"	m	class:MediaSubsession
fVideoWidth	include/MediaSession.hh	/^  unsigned short fVideoWidth, fVideoHeight;$/;"	m	class:MediaSubsession
fmtp_configuration	include/MediaSession.hh	/^  char const* fmtp_configuration() const { return fmtp_config(); }$/;"	f	class:MediaSubsession
fmtp_spropparametersets	include/MediaSession.hh	/^  char const* fmtp_spropparametersets() const { return attrVal_str("sprop-parameter-sets"); }$/;"	f	class:MediaSubsession
fmtp_sproppps	include/MediaSession.hh	/^  char const* fmtp_sproppps() const { return attrVal_str("sprop-pps"); }$/;"	f	class:MediaSubsession
fmtp_spropsps	include/MediaSession.hh	/^  char const* fmtp_spropsps() const { return attrVal_str("sprop-sps"); }$/;"	f	class:MediaSubsession
fmtp_spropvps	include/MediaSession.hh	/^  char const* fmtp_spropvps() const { return attrVal_str("sprop-vps"); }$/;"	f	class:MediaSubsession
hasSubsessions	include/MediaSession.hh	/^  Boolean hasSubsessions() const { return fSubsessionsHead != NULL; }$/;"	f	class:MediaSession
infoIsNew	include/MediaSession.hh	/^    Boolean infoIsNew; \/\/ not part of the RTSP header; instead, set whenever this struct is filled in$/;"	m	struct:MediaSubsession::__anon10
isSSM	include/MediaSession.hh	/^  Boolean isSSM() const { return fSourceFilterAddr.s_addr != 0; }$/;"	f	class:MediaSubsession
mediaSessionType	include/MediaSession.hh	/^  char* mediaSessionType() const { return fMediaSessionType; }$/;"	f	class:MediaSession
mediumName	include/MediaSession.hh	/^  char const* mediumName() const { return fMediumName; }$/;"	f	class:MediaSubsession
miscPtr	include/MediaSession.hh	/^  void* miscPtr; \/\/ callers can use this for whatever they want$/;"	m	class:MediaSubsession
numChannels	include/MediaSession.hh	/^  unsigned numChannels() const { return fNumChannels; }$/;"	f	class:MediaSubsession
parentSession	include/MediaSession.hh	/^  MediaSession const& parentSession() const { return fParent; }$/;"	f	class:MediaSubsession
parentSession	include/MediaSession.hh	/^  MediaSession& parentSession() { return fParent; }$/;"	f	class:MediaSubsession
playEndTime	include/MediaSession.hh	/^  double& playEndTime() { return fMaxPlayEndTime; }$/;"	f	class:MediaSession
playStartTime	include/MediaSession.hh	/^  double& playStartTime() { return fMaxPlayStartTime; }$/;"	f	class:MediaSession
protocolName	include/MediaSession.hh	/^  char const* protocolName() const { return fProtocolName; }$/;"	f	class:MediaSubsession
readSource	include/MediaSession.hh	/^  FramedSource* readSource() { return fReadSource; }$/;"	f	class:MediaSubsession
receiveRawJPEGFrames	include/MediaSession.hh	/^  void receiveRawJPEGFrames() { fReceiveRawJPEGFrames = True; } \/\/ optional hack for video\/JPEG; must not be called after initiate()$/;"	f	class:MediaSubsession
receiveRawMP3ADUs	include/MediaSession.hh	/^  void receiveRawMP3ADUs() { fReceiveRawMP3ADUs = True; } \/\/ optional hack for audio\/MPA-ROBUST; must not be called after initiate()$/;"	f	class:MediaSubsession
rtcpChannelId	include/MediaSession.hh	/^  unsigned char rtpChannelId, rtcpChannelId; \/\/ used by RTSP (for RTP\/TCP)$/;"	m	class:MediaSubsession
rtcpInstance	include/MediaSession.hh	/^  RTCPInstance* rtcpInstance() { return fRTCPInstance; }$/;"	f	class:MediaSubsession
rtcpIsMuxed	include/MediaSession.hh	/^  Boolean rtcpIsMuxed() const { return fMultiplexRTCPWithRTP; }$/;"	f	class:MediaSubsession
rtpChannelId	include/MediaSession.hh	/^  unsigned char rtpChannelId, rtcpChannelId; \/\/ used by RTSP (for RTP\/TCP)$/;"	m	class:MediaSubsession
rtpInfo	include/MediaSession.hh	/^  } rtpInfo;$/;"	m	class:MediaSubsession	typeref:struct:MediaSubsession::__anon10
rtpPayloadFormat	include/MediaSession.hh	/^  unsigned char rtpPayloadFormat() const { return fRTPPayloadFormat; }$/;"	f	class:MediaSubsession
rtpSource	include/MediaSession.hh	/^  RTPSource* rtpSource() { return fRTPSource; }$/;"	f	class:MediaSubsession
rtpTimestampFrequency	include/MediaSession.hh	/^  unsigned rtpTimestampFrequency() const { return fRTPTimestampFrequency; }$/;"	f	class:MediaSubsession
savedSDPLines	include/MediaSession.hh	/^  char const* savedSDPLines() const { return fSavedSDPLines; }$/;"	f	class:MediaSubsession
scale	include/MediaSession.hh	/^  float& scale() { return fScale; }$/;"	f	class:MediaSession
scale	include/MediaSession.hh	/^  float& scale() { return fScale; }$/;"	f	class:MediaSubsession
seqNum	include/MediaSession.hh	/^    u_int16_t seqNum;$/;"	m	struct:MediaSubsession::__anon10
serverPortNum	include/MediaSession.hh	/^  unsigned short serverPortNum; \/\/ in host byte order (used by RTSP)$/;"	m	class:MediaSubsession
sessionDescription	include/MediaSession.hh	/^  char* sessionDescription() const { return fSessionDescription; }$/;"	f	class:MediaSession
sessionId	include/MediaSession.hh	/^  char const* sessionId() const { return fSessionId; }$/;"	f	class:MediaSubsession
sessionName	include/MediaSession.hh	/^  char* sessionName() const { return fSessionName; }$/;"	f	class:MediaSession
setNext	include/MediaSession.hh	/^  void setNext(MediaSubsession* next) { fNext = next; }$/;"	f	class:MediaSubsession
sink	include/MediaSession.hh	/^  MediaSink* sink; \/\/ callers can use this to keep track of who's playing us$/;"	m	class:MediaSubsession
sourceFilterAddr	include/MediaSession.hh	/^  struct in_addr const& sourceFilterAddr() const { return fSourceFilterAddr; }$/;"	f	class:MediaSession
speed	include/MediaSession.hh	/^  float& speed() { return fSpeed; }$/;"	f	class:MediaSession
speed	include/MediaSession.hh	/^  float& speed() { return fSpeed; }$/;"	f	class:MediaSubsession
timestamp	include/MediaSession.hh	/^    u_int32_t timestamp;$/;"	m	struct:MediaSubsession::__anon10
videoFPS	include/MediaSession.hh	/^  unsigned videoFPS() const { return fVideoFPS; }$/;"	f	class:MediaSubsession
videoHeight	include/MediaSession.hh	/^  unsigned short videoHeight() const { return fVideoHeight; }$/;"	f	class:MediaSubsession
videoWidth	include/MediaSession.hh	/^  unsigned short videoWidth() const { return fVideoWidth; }$/;"	f	class:MediaSubsession
MediaSink	include/MediaSink.hh	/^class MediaSink: public Medium {$/;"	c
OutPacketBuffer	include/MediaSink.hh	/^class OutPacketBuffer {$/;"	c
_MEDIA_SINK_HH	include/MediaSink.hh	22;"	d
afterPlayingFunc	include/MediaSink.hh	/^  typedef void (afterPlayingFunc)(void* clientData);$/;"	t	class:MediaSink
curPacketSize	include/MediaSink.hh	/^  unsigned curPacketSize() const {return fCurOffset;}$/;"	f	class:OutPacketBuffer
curPtr	include/MediaSink.hh	/^  unsigned char* curPtr() const {return &fBuf[fPacketStart + fCurOffset];}$/;"	f	class:OutPacketBuffer
fAfterClientData	include/MediaSink.hh	/^  void* fAfterClientData;$/;"	m	class:MediaSink
fAfterFunc	include/MediaSink.hh	/^  afterPlayingFunc* fAfterFunc;$/;"	m	class:MediaSink
fBuf	include/MediaSink.hh	/^  unsigned char* fBuf;$/;"	m	class:OutPacketBuffer
fCurOffset	include/MediaSink.hh	/^  unsigned fPacketStart, fCurOffset, fPreferred, fMax, fLimit;$/;"	m	class:OutPacketBuffer
fLimit	include/MediaSink.hh	/^  unsigned fPacketStart, fCurOffset, fPreferred, fMax, fLimit;$/;"	m	class:OutPacketBuffer
fMax	include/MediaSink.hh	/^  unsigned fPacketStart, fCurOffset, fPreferred, fMax, fLimit;$/;"	m	class:OutPacketBuffer
fOverflowDataOffset	include/MediaSink.hh	/^  unsigned fOverflowDataOffset, fOverflowDataSize;$/;"	m	class:OutPacketBuffer
fOverflowDataSize	include/MediaSink.hh	/^  unsigned fOverflowDataOffset, fOverflowDataSize;$/;"	m	class:OutPacketBuffer
fOverflowDurationInMicroseconds	include/MediaSink.hh	/^  unsigned fOverflowDurationInMicroseconds;$/;"	m	class:OutPacketBuffer
fOverflowPresentationTime	include/MediaSink.hh	/^  struct timeval fOverflowPresentationTime;$/;"	m	class:OutPacketBuffer	typeref:struct:OutPacketBuffer::timeval
fPacketStart	include/MediaSink.hh	/^  unsigned fPacketStart, fCurOffset, fPreferred, fMax, fLimit;$/;"	m	class:OutPacketBuffer
fPreferred	include/MediaSink.hh	/^  unsigned fPacketStart, fCurOffset, fPreferred, fMax, fLimit;$/;"	m	class:OutPacketBuffer
fSource	include/MediaSink.hh	/^  FramedSource* fSource;$/;"	m	class:MediaSink
haveOverflowData	include/MediaSink.hh	/^  Boolean haveOverflowData() const {return fOverflowDataSize > 0;}$/;"	f	class:OutPacketBuffer
increaseMaxSizeTo	include/MediaSink.hh	/^  static void increaseMaxSizeTo(unsigned newMaxSize) { if (newMaxSize > OutPacketBuffer::maxSize) OutPacketBuffer::maxSize = newMaxSize; }$/;"	f	class:OutPacketBuffer
increment	include/MediaSink.hh	/^  void increment(unsigned numBytes) {fCurOffset += numBytes;}$/;"	f	class:OutPacketBuffer
isPreferredSize	include/MediaSink.hh	/^  Boolean isPreferredSize() const {return fCurOffset >= fPreferred;}$/;"	f	class:OutPacketBuffer
isTooBigForAPacket	include/MediaSink.hh	/^  Boolean isTooBigForAPacket(unsigned numBytes) const {$/;"	f	class:OutPacketBuffer
maxSize	include/MediaSink.hh	/^  static unsigned maxSize;$/;"	m	class:OutPacketBuffer
numOverflowBytes	include/MediaSink.hh	/^  unsigned numOverflowBytes(unsigned numBytes) const {$/;"	f	class:OutPacketBuffer
overflowDataSize	include/MediaSink.hh	/^  unsigned overflowDataSize() const {return fOverflowDataSize;}$/;"	f	class:OutPacketBuffer
overflowDurationInMicroseconds	include/MediaSink.hh	/^  unsigned overflowDurationInMicroseconds() const {return fOverflowDurationInMicroseconds;}$/;"	f	class:OutPacketBuffer
overflowPresentationTime	include/MediaSink.hh	/^  struct timeval overflowPresentationTime() const {return fOverflowPresentationTime;}$/;"	f	class:OutPacketBuffer
packet	include/MediaSink.hh	/^  unsigned char* packet() const {return &fBuf[fPacketStart];}$/;"	f	class:OutPacketBuffer
resetOffset	include/MediaSink.hh	/^  void resetOffset() { fCurOffset = 0; }$/;"	f	class:OutPacketBuffer
resetOverflowData	include/MediaSink.hh	/^  void resetOverflowData() { fOverflowDataOffset = fOverflowDataSize = 0; }$/;"	f	class:OutPacketBuffer
source	include/MediaSink.hh	/^  FramedSource* source() const {return fSource;}$/;"	f	class:MediaSink
totalBufferSize	include/MediaSink.hh	/^  unsigned totalBufferSize() const { return fLimit; }$/;"	f	class:OutPacketBuffer
totalBytesAvailable	include/MediaSink.hh	/^  unsigned totalBytesAvailable() const {$/;"	f	class:OutPacketBuffer
wouldOverflow	include/MediaSink.hh	/^  Boolean wouldOverflow(unsigned numBytes) const {$/;"	f	class:OutPacketBuffer
MediaSource	include/MediaSource.hh	/^class MediaSource: public Medium {$/;"	c
_MEDIA_SOURCE_HH	include/MediaSource.hh	22;"	d
MediaTranscodingTable	include/MediaTranscodingTable.hh	/^  MediaTranscodingTable(UsageEnvironment& env)$/;"	f	class:MediaTranscodingTable
MediaTranscodingTable	include/MediaTranscodingTable.hh	/^class MediaTranscodingTable: public Medium {$/;"	c
_MEDIA_TRANSCODING_TABLE_HH	include/MediaTranscodingTable.hh	25;"	d
lookupTranscoder	include/MediaTranscodingTable.hh	/^  lookupTranscoder(MediaSubsession& \/*inputCodecDescription*\/, \/\/ in$/;"	f	class:MediaTranscodingTable
~MediaTranscodingTable	include/MediaTranscodingTable.hh	/^  virtual ~MediaTranscodingTable() {$/;"	f	class:MediaTranscodingTable
MultiFramedRTPSink	include/MultiFramedRTPSink.hh	/^class MultiFramedRTPSink: public RTPSink {$/;"	c
_MULTI_FRAMED_RTP_SINK_HH	include/MultiFramedRTPSink.hh	23;"	d
curFragmentationOffset	include/MultiFramedRTPSink.hh	/^  unsigned curFragmentationOffset() const { return fCurFragmentationOffset; }$/;"	f	class:MultiFramedRTPSink
fCurFragmentationOffset	include/MultiFramedRTPSink.hh	/^  unsigned fCurFragmentationOffset;$/;"	m	class:MultiFramedRTPSink
fCurFrameSpecificHeaderPosition	include/MultiFramedRTPSink.hh	/^  unsigned fCurFrameSpecificHeaderPosition;$/;"	m	class:MultiFramedRTPSink
fCurFrameSpecificHeaderSize	include/MultiFramedRTPSink.hh	/^  unsigned fCurFrameSpecificHeaderSize; \/\/ size in bytes of cur frame-specific header$/;"	m	class:MultiFramedRTPSink
fIsFirstPacket	include/MultiFramedRTPSink.hh	/^  Boolean fIsFirstPacket;$/;"	m	class:MultiFramedRTPSink
fNextSendTime	include/MultiFramedRTPSink.hh	/^  struct timeval fNextSendTime;$/;"	m	class:MultiFramedRTPSink	typeref:struct:MultiFramedRTPSink::timeval
fNoFramesLeft	include/MultiFramedRTPSink.hh	/^  Boolean fNoFramesLeft;$/;"	m	class:MultiFramedRTPSink
fNumFramesUsedSoFar	include/MultiFramedRTPSink.hh	/^  unsigned fNumFramesUsedSoFar;$/;"	m	class:MultiFramedRTPSink
fOnSendErrorData	include/MultiFramedRTPSink.hh	/^  void* fOnSendErrorData;$/;"	m	class:MultiFramedRTPSink
fOnSendErrorFunc	include/MultiFramedRTPSink.hh	/^  onSendErrorFunc* fOnSendErrorFunc;$/;"	m	class:MultiFramedRTPSink
fOurMaxPacketSize	include/MultiFramedRTPSink.hh	/^  unsigned fOurMaxPacketSize;$/;"	m	class:MultiFramedRTPSink
fOutBuf	include/MultiFramedRTPSink.hh	/^  OutPacketBuffer* fOutBuf;$/;"	m	class:MultiFramedRTPSink
fPreviousFrameEndedFragmentation	include/MultiFramedRTPSink.hh	/^  Boolean fPreviousFrameEndedFragmentation;$/;"	m	class:MultiFramedRTPSink
fSpecialHeaderPosition	include/MultiFramedRTPSink.hh	/^  unsigned fSpecialHeaderPosition;$/;"	m	class:MultiFramedRTPSink
fSpecialHeaderSize	include/MultiFramedRTPSink.hh	/^  unsigned fSpecialHeaderSize; \/\/ size in bytes of any special header used$/;"	m	class:MultiFramedRTPSink
fTimestampPosition	include/MultiFramedRTPSink.hh	/^  unsigned fTimestampPosition;$/;"	m	class:MultiFramedRTPSink
fTotalFrameSpecificHeaderSizes	include/MultiFramedRTPSink.hh	/^  unsigned fTotalFrameSpecificHeaderSizes; \/\/ size of all frame-specific hdrs in pkt$/;"	m	class:MultiFramedRTPSink
isFirstFrameInPacket	include/MultiFramedRTPSink.hh	/^  Boolean isFirstFrameInPacket() const { return fNumFramesUsedSoFar == 0; }$/;"	f	class:MultiFramedRTPSink
isFirstPacket	include/MultiFramedRTPSink.hh	/^  Boolean isFirstPacket() const { return fIsFirstPacket; }$/;"	f	class:MultiFramedRTPSink
numFramesUsedSoFar	include/MultiFramedRTPSink.hh	/^  unsigned numFramesUsedSoFar() const { return fNumFramesUsedSoFar; }$/;"	f	class:MultiFramedRTPSink
onSendErrorFunc	include/MultiFramedRTPSink.hh	/^  typedef void (onSendErrorFunc)(void* clientData);$/;"	t	class:MultiFramedRTPSink
ourMaxPacketSize	include/MultiFramedRTPSink.hh	/^  unsigned ourMaxPacketSize() const { return fOurMaxPacketSize; }$/;"	f	class:MultiFramedRTPSink
setOnSendErrorFunc	include/MultiFramedRTPSink.hh	/^  void setOnSendErrorFunc(onSendErrorFunc* onSendErrorFunc, void* onSendErrorFuncData) {$/;"	f	class:MultiFramedRTPSink
BufferedPacket	include/MultiFramedRTPSource.hh	/^class BufferedPacket {$/;"	c
BufferedPacketFactory	include/MultiFramedRTPSource.hh	/^class BufferedPacketFactory {$/;"	c
MultiFramedRTPSource	include/MultiFramedRTPSource.hh	/^class MultiFramedRTPSource: public RTPSource {$/;"	c
_MULTI_FRAMED_RTP_SOURCE_HH	include/MultiFramedRTPSource.hh	23;"	d
bytesAvailable	include/MultiFramedRTPSource.hh	/^  unsigned bytesAvailable() const { return fPacketSize - fTail; }$/;"	f	class:BufferedPacket
data	include/MultiFramedRTPSource.hh	/^  unsigned char* data() const { return &fBuf[fHead]; }$/;"	f	class:BufferedPacket
dataSize	include/MultiFramedRTPSource.hh	/^  unsigned dataSize() const { return fTail-fHead; }$/;"	f	class:BufferedPacket
fAreDoingNetworkReads	include/MultiFramedRTPSource.hh	/^  Boolean fAreDoingNetworkReads;$/;"	m	class:MultiFramedRTPSource
fBuf	include/MultiFramedRTPSource.hh	/^  unsigned char* fBuf;$/;"	m	class:BufferedPacket
fCurrentPacketBeginsFrame	include/MultiFramedRTPSource.hh	/^  Boolean fCurrentPacketBeginsFrame;$/;"	m	class:MultiFramedRTPSource
fCurrentPacketCompletesFrame	include/MultiFramedRTPSource.hh	/^  Boolean fCurrentPacketCompletesFrame;$/;"	m	class:MultiFramedRTPSource
fHasBeenSyncedUsingRTCP	include/MultiFramedRTPSource.hh	/^  Boolean fHasBeenSyncedUsingRTCP;$/;"	m	class:BufferedPacket
fHead	include/MultiFramedRTPSource.hh	/^  unsigned fHead;$/;"	m	class:BufferedPacket
fIsFirstPacket	include/MultiFramedRTPSource.hh	/^  Boolean fIsFirstPacket;$/;"	m	class:BufferedPacket
fNeedDelivery	include/MultiFramedRTPSource.hh	/^  Boolean fNeedDelivery;$/;"	m	class:MultiFramedRTPSource
fNextPacket	include/MultiFramedRTPSource.hh	/^  BufferedPacket* fNextPacket; \/\/ used to link together packets$/;"	m	class:BufferedPacket
fPacketLossInFragmentedFrame	include/MultiFramedRTPSource.hh	/^  Boolean fPacketLossInFragmentedFrame;$/;"	m	class:MultiFramedRTPSource
fPacketReadInProgress	include/MultiFramedRTPSource.hh	/^  BufferedPacket* fPacketReadInProgress;$/;"	m	class:MultiFramedRTPSource
fPacketSize	include/MultiFramedRTPSource.hh	/^  unsigned fPacketSize;$/;"	m	class:BufferedPacket
fPresentationTime	include/MultiFramedRTPSource.hh	/^  struct timeval fPresentationTime; \/\/ corresponding to "fRTPTimestamp"$/;"	m	class:BufferedPacket	typeref:struct:BufferedPacket::timeval
fRTPMarkerBit	include/MultiFramedRTPSource.hh	/^  Boolean fRTPMarkerBit;$/;"	m	class:BufferedPacket
fRTPSeqNo	include/MultiFramedRTPSource.hh	/^  unsigned short fRTPSeqNo;$/;"	m	class:BufferedPacket
fRTPTimestamp	include/MultiFramedRTPSource.hh	/^  unsigned fRTPTimestamp;$/;"	m	class:BufferedPacket
fReorderingBuffer	include/MultiFramedRTPSource.hh	/^  class ReorderingPacketBuffer* fReorderingBuffer;$/;"	m	class:MultiFramedRTPSource	typeref:class:MultiFramedRTPSource::ReorderingPacketBuffer
fSavedMaxSize	include/MultiFramedRTPSource.hh	/^  unsigned fSavedMaxSize;$/;"	m	class:MultiFramedRTPSource
fSavedTo	include/MultiFramedRTPSource.hh	/^  unsigned char* fSavedTo;$/;"	m	class:MultiFramedRTPSource
fTail	include/MultiFramedRTPSource.hh	/^  unsigned fTail;$/;"	m	class:BufferedPacket
fTimeReceived	include/MultiFramedRTPSource.hh	/^  struct timeval fTimeReceived;$/;"	m	class:BufferedPacket	typeref:struct:BufferedPacket::timeval
fUseCount	include/MultiFramedRTPSource.hh	/^  unsigned fUseCount;$/;"	m	class:BufferedPacket
hasUsableData	include/MultiFramedRTPSource.hh	/^  Boolean hasUsableData() const { return fTail > fHead; }$/;"	f	class:BufferedPacket
isFirstPacket	include/MultiFramedRTPSource.hh	/^  Boolean& isFirstPacket() { return fIsFirstPacket; }$/;"	f	class:BufferedPacket
nextPacket	include/MultiFramedRTPSource.hh	/^  BufferedPacket*& nextPacket() { return fNextPacket; }$/;"	f	class:BufferedPacket
rtpMarkerBit	include/MultiFramedRTPSource.hh	/^  Boolean rtpMarkerBit() const { return fRTPMarkerBit; }$/;"	f	class:BufferedPacket
rtpSeqNo	include/MultiFramedRTPSource.hh	/^  unsigned short rtpSeqNo() const { return fRTPSeqNo; }$/;"	f	class:BufferedPacket
timeReceived	include/MultiFramedRTPSource.hh	/^  struct timeval const& timeReceived() const { return fTimeReceived; }$/;"	f	class:BufferedPacket
useCount	include/MultiFramedRTPSource.hh	/^  unsigned useCount() const { return fUseCount; }$/;"	f	class:BufferedPacket
KFGSHIFT	include/OggFile.hh	/^    u_int8_t KFGSHIFT;$/;"	m	struct:OggTrack::_vtoHdrs
OggDemux	include/OggFile.hh	/^class OggDemux: public Medium {$/;"	c
OggFile	include/OggFile.hh	/^class OggFile: public Medium {$/;"	c
OggTrack	include/OggFile.hh	/^class OggTrack {$/;"	c
OggTrackTableIterator	include/OggFile.hh	/^class OggTrackTableIterator {$/;"	c
_OGG_FILE_HH	include/OggFile.hh	22;"	d
_vtoHdrs	include/OggFile.hh	/^  struct _vtoHdrs {$/;"	s	class:OggTrack
blocksize	include/OggFile.hh	/^    unsigned blocksize[2]; \/\/ samples per frame (packet)$/;"	m	struct:OggTrack::_vtoHdrs
estBitrate	include/OggFile.hh	/^  unsigned estBitrate; \/\/ estimate, in kbps (for RTCP)$/;"	m	class:OggTrack
fDemuxedTracksTable	include/OggFile.hh	/^  HashTable* fDemuxedTracksTable;$/;"	m	class:OggDemux
fDemuxesTable	include/OggFile.hh	/^  HashTable* fDemuxesTable;$/;"	m	class:OggFile
fFileName	include/OggFile.hh	/^  char const* fFileName;$/;"	m	class:OggFile
fIter	include/OggFile.hh	/^  HashTable::Iterator* fIter;$/;"	m	class:OggTrackTableIterator
fIter	include/OggFile.hh	/^  OggTrackTableIterator* fIter;$/;"	m	class:OggDemux
fOnCreation	include/OggFile.hh	/^  onCreationFunc* fOnCreation;$/;"	m	class:OggFile
fOnCreationClientData	include/OggFile.hh	/^  void* fOnCreationClientData;$/;"	m	class:OggFile
fOurFile	include/OggFile.hh	/^  OggFile& fOurFile;$/;"	m	class:OggDemux
fOurParser	include/OggFile.hh	/^  class OggFileParser* fOurParser;$/;"	m	class:OggDemux	typeref:class:OggDemux::OggFileParser
fParserForInitialization	include/OggFile.hh	/^  class OggFileParser* fParserForInitialization;$/;"	m	class:OggFile	typeref:class:OggFile::OggFileParser
fTrackTable	include/OggFile.hh	/^  class OggTrackTable* fTrackTable;$/;"	m	class:OggFile	typeref:class:OggFile::OggTrackTable
fileName	include/OggFile.hh	/^  char const* fileName() const { return fFileName; }$/;"	f	class:OggFile
header	include/OggFile.hh	/^    u_int8_t* header[3]; \/\/ "identification", "comment", "setup"$/;"	m	struct:OggTrack::_vtoHdrs
headerSize	include/OggFile.hh	/^    unsigned headerSize[3];$/;"	m	struct:OggTrack::_vtoHdrs
ilog_vorbis_mode_count_minus_1	include/OggFile.hh	/^    unsigned ilog_vorbis_mode_count_minus_1;$/;"	m	struct:OggTrack::_vtoHdrs
mimeType	include/OggFile.hh	/^  char const* mimeType; \/\/ NULL if not known$/;"	m	class:OggTrack
numChannels	include/OggFile.hh	/^  unsigned samplingFrequency, numChannels; \/\/ for audio tracks$/;"	m	class:OggTrack
onCreationFunc	include/OggFile.hh	/^  typedef void (onCreationFunc)(OggFile* newFile, void* clientData);$/;"	t	class:OggFile
samplingFrequency	include/OggFile.hh	/^  unsigned samplingFrequency, numChannels; \/\/ for audio tracks$/;"	m	class:OggTrack
trackNumber	include/OggFile.hh	/^  u_int32_t trackNumber; \/\/ bitstream serial number$/;"	m	class:OggTrack
trackTable	include/OggFile.hh	/^  class OggTrackTable& trackTable() { return *fTrackTable; }$/;"	f	class:OggFile
uSecsPerFrame	include/OggFile.hh	/^    unsigned uSecsPerFrame;$/;"	m	struct:OggTrack::_vtoHdrs
uSecsPerPacket	include/OggFile.hh	/^    unsigned uSecsPerPacket[2]; \/\/ computed as (blocksize[i]*1000000)\/samplingFrequency$/;"	m	struct:OggTrack::_vtoHdrs
vorbis_mode_blockflag	include/OggFile.hh	/^    u_int8_t* vorbis_mode_blockflag;$/;"	m	struct:OggTrack::_vtoHdrs
vorbis_mode_count	include/OggFile.hh	/^    unsigned vorbis_mode_count;$/;"	m	struct:OggTrack::_vtoHdrs
vtoHdrs	include/OggFile.hh	/^  } vtoHdrs;$/;"	m	class:OggTrack	typeref:struct:OggTrack::_vtoHdrs
weNeedHeaders	include/OggFile.hh	/^  Boolean weNeedHeaders() const {$/;"	f	class:OggTrack
OggFileServerDemux	include/OggFileServerDemux.hh	/^class OggFileServerDemux: public Medium {$/;"	c
_OGG_FILE_SERVER_DEMUX_HH	include/OggFileServerDemux.hh	22;"	d
fFileName	include/OggFileServerDemux.hh	/^  char const* fFileName; $/;"	m	class:OggFileServerDemux
fIter	include/OggFileServerDemux.hh	/^  OggTrackTableIterator* fIter;$/;"	m	class:OggFileServerDemux
fLastClientSessionId	include/OggFileServerDemux.hh	/^  unsigned fLastClientSessionId;$/;"	m	class:OggFileServerDemux
fLastCreatedDemux	include/OggFileServerDemux.hh	/^  OggDemux* fLastCreatedDemux;$/;"	m	class:OggFileServerDemux
fOnCreation	include/OggFileServerDemux.hh	/^  onCreationFunc* fOnCreation;$/;"	m	class:OggFileServerDemux
fOnCreationClientData	include/OggFileServerDemux.hh	/^  void* fOnCreationClientData;$/;"	m	class:OggFileServerDemux
fOurOggFile	include/OggFileServerDemux.hh	/^  OggFile* fOurOggFile;$/;"	m	class:OggFileServerDemux
fileName	include/OggFileServerDemux.hh	/^  char const* fileName() const { return fFileName; }$/;"	f	class:OggFileServerDemux
onCreationFunc	include/OggFileServerDemux.hh	/^  typedef void (onCreationFunc)(OggFileServerDemux* newDemux, void* clientData);$/;"	t	class:OggFileServerDemux
ourOggFile	include/OggFileServerDemux.hh	/^  OggFile* ourOggFile() { return fOurOggFile; }$/;"	f	class:OggFileServerDemux
OggFileSink	include/OggFileSink.hh	/^class OggFileSink: public FileSink {$/;"	c
_OGG_FILE_SINK_HH	include/OggFileSink.hh	22;"	d
fAltBuffer	include/OggFileSink.hh	/^  unsigned char* fAltBuffer;$/;"	m	class:OggFileSink
fAltFrameSize	include/OggFileSink.hh	/^  unsigned fAltFrameSize, fAltNumTruncatedBytes;$/;"	m	class:OggFileSink
fAltNumTruncatedBytes	include/OggFileSink.hh	/^  unsigned fAltFrameSize, fAltNumTruncatedBytes;$/;"	m	class:OggFileSink
fAltPresentationTime	include/OggFileSink.hh	/^  struct timeval fAltPresentationTime;$/;"	m	class:OggFileSink	typeref:struct:OggFileSink::timeval
fConfigStr	include/OggFileSink.hh	/^  char const* fConfigStr;$/;"	m	class:OggFileSink
fFirstPresentationTime	include/OggFileSink.hh	/^  struct timeval fFirstPresentationTime;$/;"	m	class:OggFileSink	typeref:struct:OggFileSink::timeval
fGranuleIncrementPerFrame	include/OggFileSink.hh	/^  u_int64_t fGranuleIncrementPerFrame; \/\/ == 1 << KFGSHIFT$/;"	m	class:OggFileSink
fGranulePosition	include/OggFileSink.hh	/^  int64_t fGranulePosition;$/;"	m	class:OggFileSink
fGranulePositionAdjustment	include/OggFileSink.hh	/^  int64_t fGranulePositionAdjustment; \/\/ used to ensure that "fGranulePosition" stays monotonic$/;"	m	class:OggFileSink
fHaveSeenEOF	include/OggFileSink.hh	/^  Boolean fHaveWrittenFirstFrame, fHaveSeenEOF;$/;"	m	class:OggFileSink
fHaveWrittenFirstFrame	include/OggFileSink.hh	/^  Boolean fHaveWrittenFirstFrame, fHaveSeenEOF;$/;"	m	class:OggFileSink
fIsTheora	include/OggFileSink.hh	/^  Boolean fIsTheora;$/;"	m	class:OggFileSink
fPageHeaderBytes	include/OggFileSink.hh	/^  u_int8_t fPageHeaderBytes[27];$/;"	m	class:OggFileSink
fPageSequenceNumber	include/OggFileSink.hh	/^  u_int32_t fPageSequenceNumber;$/;"	m	class:OggFileSink
fSamplingFrequency	include/OggFileSink.hh	/^  unsigned fSamplingFrequency;$/;"	m	class:OggFileSink
Destinations	include/OnDemandServerMediaSubsession.hh	/^  Destinations(int tcpSockNum, unsigned char rtpChanId, unsigned char rtcpChanId)$/;"	f	class:Destinations
Destinations	include/OnDemandServerMediaSubsession.hh	/^  Destinations(struct in_addr const& destAddr,$/;"	f	class:Destinations
Destinations	include/OnDemandServerMediaSubsession.hh	/^class Destinations {$/;"	c
OnDemandServerMediaSubsession	include/OnDemandServerMediaSubsession.hh	/^class OnDemandServerMediaSubsession: public ServerMediaSubsession {$/;"	c
StreamState	include/OnDemandServerMediaSubsession.hh	/^class StreamState {$/;"	c
_ON_DEMAND_SERVER_MEDIA_SUBSESSION_HH	include/OnDemandServerMediaSubsession.hh	23;"	d
addr	include/OnDemandServerMediaSubsession.hh	/^  struct in_addr addr;$/;"	m	class:Destinations	typeref:struct:Destinations::in_addr
fAppHandlerClientData	include/OnDemandServerMediaSubsession.hh	/^  void* fAppHandlerClientData;$/;"	m	class:OnDemandServerMediaSubsession
fAppHandlerTask	include/OnDemandServerMediaSubsession.hh	/^  RTCPAppHandlerFunc* fAppHandlerTask;$/;"	m	class:OnDemandServerMediaSubsession
fAreCurrentlyPlaying	include/OnDemandServerMediaSubsession.hh	/^  Boolean fAreCurrentlyPlaying;$/;"	m	class:StreamState
fCNAME	include/OnDemandServerMediaSubsession.hh	/^  char fCNAME[100]; \/\/ for RTCP$/;"	m	class:OnDemandServerMediaSubsession
fDestinationsHashTable	include/OnDemandServerMediaSubsession.hh	/^  HashTable* fDestinationsHashTable; \/\/ indexed by client session id$/;"	m	class:OnDemandServerMediaSubsession
fInitialPortNum	include/OnDemandServerMediaSubsession.hh	/^  portNumBits fInitialPortNum;$/;"	m	class:OnDemandServerMediaSubsession
fLastStreamToken	include/OnDemandServerMediaSubsession.hh	/^  void* fLastStreamToken;$/;"	m	class:OnDemandServerMediaSubsession
fMaster	include/OnDemandServerMediaSubsession.hh	/^  OnDemandServerMediaSubsession& fMaster;$/;"	m	class:StreamState
fMediaSource	include/OnDemandServerMediaSubsession.hh	/^  FramedSource* fMediaSource;$/;"	m	class:StreamState
fMultiplexRTCPWithRTP	include/OnDemandServerMediaSubsession.hh	/^  Boolean fMultiplexRTCPWithRTP;$/;"	m	class:OnDemandServerMediaSubsession
fRTCPInstance	include/OnDemandServerMediaSubsession.hh	/^  RTCPInstance* fRTCPInstance;$/;"	m	class:StreamState
fRTCPgs	include/OnDemandServerMediaSubsession.hh	/^  Groupsock* fRTCPgs;$/;"	m	class:StreamState
fRTPSink	include/OnDemandServerMediaSubsession.hh	/^  RTPSink* fRTPSink;$/;"	m	class:StreamState
fRTPgs	include/OnDemandServerMediaSubsession.hh	/^  Groupsock* fRTPgs;$/;"	m	class:StreamState
fReferenceCount	include/OnDemandServerMediaSubsession.hh	/^  unsigned fReferenceCount;$/;"	m	class:StreamState
fReuseFirstSource	include/OnDemandServerMediaSubsession.hh	/^  Boolean fReuseFirstSource;$/;"	m	class:OnDemandServerMediaSubsession
fSDPLines	include/OnDemandServerMediaSubsession.hh	/^  char* fSDPLines;$/;"	m	class:OnDemandServerMediaSubsession
fServerRTCPPort	include/OnDemandServerMediaSubsession.hh	/^  Port fServerRTPPort, fServerRTCPPort;$/;"	m	class:StreamState
fServerRTPPort	include/OnDemandServerMediaSubsession.hh	/^  Port fServerRTPPort, fServerRTCPPort;$/;"	m	class:StreamState
fStartNPT	include/OnDemandServerMediaSubsession.hh	/^  float fStartNPT; \/\/ initial 'normal play time'; reset after each seek$/;"	m	class:StreamState
fStreamDuration	include/OnDemandServerMediaSubsession.hh	/^  float fStreamDuration;$/;"	m	class:StreamState
fTotalBW	include/OnDemandServerMediaSubsession.hh	/^  unsigned fTotalBW;$/;"	m	class:StreamState
fUDPSink	include/OnDemandServerMediaSubsession.hh	/^  BasicUDPSink* fUDPSink;$/;"	m	class:StreamState
isTCP	include/OnDemandServerMediaSubsession.hh	/^  Boolean isTCP;$/;"	m	class:Destinations
mediaSource	include/OnDemandServerMediaSubsession.hh	/^  FramedSource* mediaSource() const { return fMediaSource; }$/;"	f	class:StreamState
multiplexRTCPWithRTP	include/OnDemandServerMediaSubsession.hh	/^  void multiplexRTCPWithRTP() { fMultiplexRTCPWithRTP = True; }$/;"	f	class:OnDemandServerMediaSubsession
referenceCount	include/OnDemandServerMediaSubsession.hh	/^  unsigned& referenceCount() { return fReferenceCount; }$/;"	f	class:StreamState
rtcpChannelId	include/OnDemandServerMediaSubsession.hh	/^  unsigned char rtpChannelId, rtcpChannelId;$/;"	m	class:Destinations
rtcpInstance	include/OnDemandServerMediaSubsession.hh	/^  RTCPInstance* rtcpInstance() const { return fRTCPInstance; }$/;"	f	class:StreamState
rtcpPort	include/OnDemandServerMediaSubsession.hh	/^  Port rtcpPort;$/;"	m	class:Destinations
rtpChannelId	include/OnDemandServerMediaSubsession.hh	/^  unsigned char rtpChannelId, rtcpChannelId;$/;"	m	class:Destinations
rtpPort	include/OnDemandServerMediaSubsession.hh	/^  Port rtpPort;$/;"	m	class:Destinations
rtpSink	include/OnDemandServerMediaSubsession.hh	/^  RTPSink* rtpSink() const { return fRTPSink; }$/;"	f	class:StreamState
serverRTCPPort	include/OnDemandServerMediaSubsession.hh	/^  Port const& serverRTCPPort() const { return fServerRTCPPort; }$/;"	f	class:StreamState
serverRTPPort	include/OnDemandServerMediaSubsession.hh	/^  Port const& serverRTPPort() const { return fServerRTPPort; }$/;"	f	class:StreamState
startNPT	include/OnDemandServerMediaSubsession.hh	/^  float& startNPT() { return fStartNPT; }$/;"	f	class:StreamState
streamDuration	include/OnDemandServerMediaSubsession.hh	/^  float streamDuration() const { return fStreamDuration; }$/;"	f	class:StreamState
tcpSocketNum	include/OnDemandServerMediaSubsession.hh	/^  int tcpSocketNum;$/;"	m	class:Destinations
_OUTPUT_FILE_HH	include/OutputFile.hh	22;"	d
PassiveServerMediaSubsession	include/PassiveServerMediaSubsession.hh	/^class PassiveServerMediaSubsession: public ServerMediaSubsession {$/;"	c
_PASSIVE_SERVER_MEDIA_SUBSESSION_HH	include/PassiveServerMediaSubsession.hh	23;"	d
fClientRTCPSourceRecords	include/PassiveServerMediaSubsession.hh	/^  HashTable* fClientRTCPSourceRecords; \/\/ indexed by client session id; used to implement RTCP "RR" handling$/;"	m	class:PassiveServerMediaSubsession
fRTCPInstance	include/PassiveServerMediaSubsession.hh	/^  RTCPInstance* fRTCPInstance;$/;"	m	class:PassiveServerMediaSubsession
fRTPSink	include/PassiveServerMediaSubsession.hh	/^  RTPSink& fRTPSink;$/;"	m	class:PassiveServerMediaSubsession
fSDPLines	include/PassiveServerMediaSubsession.hh	/^  char* fSDPLines;$/;"	m	class:PassiveServerMediaSubsession
PresentationTimeSessionNormalizer	include/ProxyServerMediaSession.hh	/^class PresentationTimeSessionNormalizer: public Medium {$/;"	c
PresentationTimeSubsessionNormalizer	include/ProxyServerMediaSession.hh	/^class PresentationTimeSubsessionNormalizer: public FramedFilter {$/;"	c
ProxyRTSPClient	include/ProxyServerMediaSession.hh	/^class ProxyRTSPClient: public RTSPClient {$/;"	c
ProxyServerMediaSession	include/ProxyServerMediaSession.hh	/^class ProxyServerMediaSession: public ServerMediaSession {$/;"	c
_PROXY_SERVER_MEDIA_SESSION_HH	include/ProxyServerMediaSession.hh	23;"	d
auth	include/ProxyServerMediaSession.hh	/^  Authenticator* auth() { return fOurAuthenticator; }$/;"	f	class:ProxyRTSPClient
createNewProxyRTSPClientFunc	include/ProxyServerMediaSession.hh	/^createNewProxyRTSPClientFunc(ProxyServerMediaSession& ourServerMediaSession,$/;"	t
describeCompletedFlag	include/ProxyServerMediaSession.hh	/^  char describeCompletedFlag;$/;"	m	class:ProxyServerMediaSession
describeCompletedSuccessfully	include/ProxyServerMediaSession.hh	/^  Boolean describeCompletedSuccessfully() const { return fClientMediaSession != NULL; }$/;"	f	class:ProxyServerMediaSession
fClientMediaSession	include/ProxyServerMediaSession.hh	/^  MediaSession* fClientMediaSession;$/;"	m	class:ProxyServerMediaSession
fCodecName	include/ProxyServerMediaSession.hh	/^  char const* fCodecName;$/;"	m	class:PresentationTimeSubsessionNormalizer
fCreateNewProxyRTSPClientFunc	include/ProxyServerMediaSession.hh	/^  createNewProxyRTSPClientFunc* fCreateNewProxyRTSPClientFunc;$/;"	m	class:ProxyServerMediaSession
fDESCRIBECommandTask	include/ProxyServerMediaSession.hh	/^  TaskToken fLivenessCommandTask, fDESCRIBECommandTask, fSubsessionTimerTask;$/;"	m	class:ProxyRTSPClient
fInitialPortNum	include/ProxyServerMediaSession.hh	/^  portNumBits fInitialPortNum;$/;"	m	class:ProxyServerMediaSession
fLastCommandWasPLAY	include/ProxyServerMediaSession.hh	/^  Boolean fServerSupportsGetParameter, fLastCommandWasPLAY;$/;"	m	class:ProxyRTSPClient
fLivenessCommandTask	include/ProxyServerMediaSession.hh	/^  TaskToken fLivenessCommandTask, fDESCRIBECommandTask, fSubsessionTimerTask;$/;"	m	class:ProxyRTSPClient
fMasterSSNormalizer	include/ProxyServerMediaSession.hh	/^  PresentationTimeSubsessionNormalizer* fMasterSSNormalizer; \/\/ used for subsessions that have been RTCP-synced$/;"	m	class:PresentationTimeSessionNormalizer
fMultiplexRTCPWithRTP	include/ProxyServerMediaSession.hh	/^  Boolean fMultiplexRTCPWithRTP;$/;"	m	class:ProxyServerMediaSession
fNext	include/ProxyServerMediaSession.hh	/^  PresentationTimeSubsessionNormalizer* fNext;$/;"	m	class:PresentationTimeSubsessionNormalizer
fNextDESCRIBEDelay	include/ProxyServerMediaSession.hh	/^  unsigned fNextDESCRIBEDelay; \/\/ in seconds$/;"	m	class:ProxyRTSPClient
fNumSetupsDone	include/ProxyServerMediaSession.hh	/^  unsigned fNumSetupsDone;$/;"	m	class:ProxyRTSPClient
fOurAuthenticator	include/ProxyServerMediaSession.hh	/^  Authenticator* fOurAuthenticator;$/;"	m	class:ProxyRTSPClient
fOurMediaServer	include/ProxyServerMediaSession.hh	/^  GenericMediaServer* fOurMediaServer;$/;"	m	class:ProxyServerMediaSession
fOurServerMediaSession	include/ProxyServerMediaSession.hh	/^  ProxyServerMediaSession& fOurServerMediaSession;$/;"	m	class:ProxyRTSPClient
fOurURL	include/ProxyServerMediaSession.hh	/^  char* fOurURL;$/;"	m	class:ProxyRTSPClient
fPTAdjustment	include/ProxyServerMediaSession.hh	/^  struct timeval fPTAdjustment; \/\/ Added to (RTCP-synced) subsession presentation times to 'normalize' them with wall-clock time.$/;"	m	class:PresentationTimeSessionNormalizer	typeref:struct:PresentationTimeSessionNormalizer::timeval
fParent	include/ProxyServerMediaSession.hh	/^  PresentationTimeSessionNormalizer& fParent;$/;"	m	class:PresentationTimeSubsessionNormalizer
fPresentationTimeSessionNormalizer	include/ProxyServerMediaSession.hh	/^  class PresentationTimeSessionNormalizer* fPresentationTimeSessionNormalizer;$/;"	m	class:ProxyServerMediaSession	typeref:class:ProxyServerMediaSession::PresentationTimeSessionNormalizer
fProxyRTSPClient	include/ProxyServerMediaSession.hh	/^  ProxyRTSPClient* fProxyRTSPClient;$/;"	m	class:ProxyServerMediaSession
fRTPSink	include/ProxyServerMediaSession.hh	/^  RTPSink* fRTPSink;$/;"	m	class:PresentationTimeSubsessionNormalizer
fRTPSource	include/ProxyServerMediaSession.hh	/^  RTPSource* fRTPSource;$/;"	m	class:PresentationTimeSubsessionNormalizer
fServerSupportsGetParameter	include/ProxyServerMediaSession.hh	/^  Boolean fServerSupportsGetParameter, fLastCommandWasPLAY;$/;"	m	class:ProxyRTSPClient
fSetupQueueHead	include/ProxyServerMediaSession.hh	/^  class ProxyServerMediaSubsession *fSetupQueueHead, *fSetupQueueTail;$/;"	m	class:ProxyRTSPClient	typeref:class:ProxyRTSPClient::ProxyServerMediaSubsession
fSetupQueueTail	include/ProxyServerMediaSession.hh	/^  class ProxyServerMediaSubsession *fSetupQueueHead, *fSetupQueueTail;$/;"	m	class:ProxyRTSPClient	typeref:class:ProxyRTSPClient::
fStreamRTPOverTCP	include/ProxyServerMediaSession.hh	/^  Boolean fStreamRTPOverTCP;$/;"	m	class:ProxyRTSPClient
fSubsessionNormalizers	include/ProxyServerMediaSession.hh	/^  PresentationTimeSubsessionNormalizer* fSubsessionNormalizers;$/;"	m	class:PresentationTimeSessionNormalizer
fSubsessionTimerTask	include/ProxyServerMediaSession.hh	/^  TaskToken fLivenessCommandTask, fDESCRIBECommandTask, fSubsessionTimerTask;$/;"	m	class:ProxyRTSPClient
fTranscodingTable	include/ProxyServerMediaSession.hh	/^  MediaTranscodingTable* fTranscodingTable;$/;"	m	class:ProxyServerMediaSession
fVerbosityLevel	include/ProxyServerMediaSession.hh	/^  int fVerbosityLevel;$/;"	m	class:ProxyServerMediaSession
setRTPSink	include/ProxyServerMediaSession.hh	/^  void setRTPSink(RTPSink* rtpSink) { fRTPSink = rtpSink; }$/;"	f	class:PresentationTimeSubsessionNormalizer
QCELPAudioRTPSource	include/QCELPAudioRTPSource.hh	/^class QCELPAudioRTPSource {$/;"	c
_QCELP_AUDIO_RTP_SOURCE_HH	include/QCELPAudioRTPSource.hh	22;"	d
QuickTimeFileSink	include/QuickTimeFileSink.hh	/^class QuickTimeFileSink: public Medium {$/;"	c
_QUICKTIME_FILE_SINK_HH	include/QuickTimeFileSink.hh	22;"	d
_atom	include/QuickTimeFileSink.hh	112;"	d
addByte	include/QuickTimeFileSink.hh	/^  unsigned addByte(unsigned char byte) {$/;"	f	class:QuickTimeFileSink
afterPlayingFunc	include/QuickTimeFileSink.hh	/^  typedef void (afterPlayingFunc)(void* clientData);$/;"	t	class:QuickTimeFileSink
fAfterClientData	include/QuickTimeFileSink.hh	/^  void* fAfterClientData;$/;"	m	class:QuickTimeFileSink
fAfterFunc	include/QuickTimeFileSink.hh	/^  afterPlayingFunc* fAfterFunc;$/;"	m	class:QuickTimeFileSink
fAppleCreationTime	include/QuickTimeFileSink.hh	/^  unsigned fAppleCreationTime;$/;"	m	class:QuickTimeFileSink
fAreCurrentlyBeingPlayed	include/QuickTimeFileSink.hh	/^  Boolean fAreCurrentlyBeingPlayed;$/;"	m	class:QuickTimeFileSink
fBufferSize	include/QuickTimeFileSink.hh	/^  unsigned fBufferSize;$/;"	m	class:QuickTimeFileSink
fCurrentIOState	include/QuickTimeFileSink.hh	/^  class SubsessionIOState* fCurrentIOState;$/;"	m	class:QuickTimeFileSink	typeref:class:QuickTimeFileSink::SubsessionIOState
fFirstDataTime	include/QuickTimeFileSink.hh	/^  struct timeval fNewestSyncTime, fFirstDataTime;$/;"	m	class:QuickTimeFileSink	typeref:struct:QuickTimeFileSink::
fGenerateMP4Format	include/QuickTimeFileSink.hh	/^  Boolean fSyncStreams, fGenerateMP4Format;$/;"	m	class:QuickTimeFileSink
fHaveCompletedOutputFile	include/QuickTimeFileSink.hh	/^  Boolean fHaveCompletedOutputFile;$/;"	m	class:QuickTimeFileSink
fInputSession	include/QuickTimeFileSink.hh	/^  MediaSession& fInputSession;$/;"	m	class:QuickTimeFileSink
fLargestRTPtimestampFrequency	include/QuickTimeFileSink.hh	/^  unsigned fLargestRTPtimestampFrequency;$/;"	m	class:QuickTimeFileSink
fMDATposition	include/QuickTimeFileSink.hh	/^  int64_t fMDATposition;$/;"	m	class:QuickTimeFileSink
fMVHD_durationPosn	include/QuickTimeFileSink.hh	/^  int64_t fMVHD_durationPosn;$/;"	m	class:QuickTimeFileSink
fMaxTrackDurationM	include/QuickTimeFileSink.hh	/^  unsigned fMaxTrackDurationM; \/\/ in movie time units$/;"	m	class:QuickTimeFileSink
fMovieFPS	include/QuickTimeFileSink.hh	/^  unsigned fMovieFPS;$/;"	m	class:QuickTimeFileSink
fMovieHeight	include/QuickTimeFileSink.hh	/^  unsigned short fMovieWidth, fMovieHeight;$/;"	m	class:QuickTimeFileSink
fMovieWidth	include/QuickTimeFileSink.hh	/^  unsigned short fMovieWidth, fMovieHeight;$/;"	m	class:QuickTimeFileSink
fNewestSyncTime	include/QuickTimeFileSink.hh	/^  struct timeval fNewestSyncTime, fFirstDataTime;$/;"	m	class:QuickTimeFileSink	typeref:struct:QuickTimeFileSink::timeval
fNumSubsessions	include/QuickTimeFileSink.hh	/^  unsigned fNumSubsessions, fNumSyncedSubsessions;$/;"	m	class:QuickTimeFileSink
fNumSyncedSubsessions	include/QuickTimeFileSink.hh	/^  unsigned fNumSubsessions, fNumSyncedSubsessions;$/;"	m	class:QuickTimeFileSink
fOutFid	include/QuickTimeFileSink.hh	/^  FILE* fOutFid;$/;"	m	class:QuickTimeFileSink
fPacketLossCompensate	include/QuickTimeFileSink.hh	/^  Boolean fPacketLossCompensate;$/;"	m	class:QuickTimeFileSink
fStartTime	include/QuickTimeFileSink.hh	/^  struct timeval fStartTime;$/;"	m	class:QuickTimeFileSink	typeref:struct:QuickTimeFileSink::timeval
fSyncStreams	include/QuickTimeFileSink.hh	/^  Boolean fSyncStreams, fGenerateMP4Format;$/;"	m	class:QuickTimeFileSink
movieTimeScale	include/QuickTimeFileSink.hh	/^  unsigned movieTimeScale() const {return fLargestRTPtimestampFrequency;}$/;"	f	class:QuickTimeFileSink
numActiveSubsessions	include/QuickTimeFileSink.hh	/^  unsigned numActiveSubsessions() const { return fNumSubsessions; }$/;"	f	class:QuickTimeFileSink
PCK	include/QuickTimeGenericRTPSource.hh	/^    char PCK;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
QTState	include/QuickTimeGenericRTPSource.hh	/^  struct QTState {$/;"	s	class:QuickTimeGenericRTPSource
QuickTimeGenericRTPSource	include/QuickTimeGenericRTPSource.hh	/^class QuickTimeGenericRTPSource: public MultiFramedRTPSource {$/;"	c
_QUICKTIME_GENERIC_RTP_SOURCE_HH	include/QuickTimeGenericRTPSource.hh	23;"	d
fMIMEtypeString	include/QuickTimeGenericRTPSource.hh	/^  char const* fMIMEtypeString;$/;"	m	class:QuickTimeGenericRTPSource
height	include/QuickTimeGenericRTPSource.hh	/^    unsigned short width, height;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
qtState	include/QuickTimeGenericRTPSource.hh	/^  } qtState;$/;"	m	class:QuickTimeGenericRTPSource	typeref:struct:QuickTimeGenericRTPSource::QTState
sdAtom	include/QuickTimeGenericRTPSource.hh	/^    char* sdAtom;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
sdAtomSize	include/QuickTimeGenericRTPSource.hh	/^    unsigned sdAtomSize;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
timescale	include/QuickTimeGenericRTPSource.hh	/^    unsigned timescale;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
width	include/QuickTimeGenericRTPSource.hh	/^    unsigned short width, height;$/;"	m	struct:QuickTimeGenericRTPSource::QTState
RTCPAppHandlerFunc	include/RTCP.hh	/^typedef void RTCPAppHandlerFunc(void* clientData,$/;"	t
RTCPInstance	include/RTCP.hh	/^class RTCPInstance: public Medium {$/;"	c
RTCP_PT_APP	include/RTCP.hh	/^const unsigned char RTCP_PT_APP = 204;$/;"	v
RTCP_PT_AVB	include/RTCP.hh	/^const unsigned char RTCP_PT_AVB = 208; \/\/ AVB RTCP packet ["Standard for Layer 3 Transport Protocol for Time Sensitive Applications in Local Area Networks." Work in progress.]$/;"	v
RTCP_PT_BYE	include/RTCP.hh	/^const unsigned char RTCP_PT_BYE = 203;$/;"	v
RTCP_PT_IDMS	include/RTCP.hh	/^const unsigned char RTCP_PT_IDMS = 211; \/\/ IDMS Settings [RFC7272]$/;"	v
RTCP_PT_PSFB	include/RTCP.hh	/^const unsigned char RTCP_PT_PSFB = 206; \/\/ Payload-specific [RFC4585]$/;"	v
RTCP_PT_RR	include/RTCP.hh	/^const unsigned char RTCP_PT_RR = 201;$/;"	v
RTCP_PT_RSI	include/RTCP.hh	/^const unsigned char RTCP_PT_RSI = 209; \/\/ Receiver Summary Information [RFC5760]$/;"	v
RTCP_PT_RTPFB	include/RTCP.hh	/^const unsigned char RTCP_PT_RTPFB = 205; \/\/ Generic RTP Feedback [RFC4585]$/;"	v
RTCP_PT_SDES	include/RTCP.hh	/^const unsigned char RTCP_PT_SDES = 202;$/;"	v
RTCP_PT_SR	include/RTCP.hh	/^const unsigned char RTCP_PT_SR = 200;$/;"	v
RTCP_PT_TOKEN	include/RTCP.hh	/^const unsigned char RTCP_PT_TOKEN = 210; \/\/ Port Mapping [RFC6284]$/;"	v
RTCP_PT_XR	include/RTCP.hh	/^const unsigned char RTCP_PT_XR = 207; \/\/ extended report [RFC3611]$/;"	v
RTCP_SDES_CNAME	include/RTCP.hh	/^const unsigned char RTCP_SDES_CNAME = 1;$/;"	v
RTCP_SDES_EMAIL	include/RTCP.hh	/^const unsigned char RTCP_SDES_EMAIL = 3;$/;"	v
RTCP_SDES_END	include/RTCP.hh	/^const unsigned char RTCP_SDES_END = 0;$/;"	v
RTCP_SDES_LOC	include/RTCP.hh	/^const unsigned char RTCP_SDES_LOC = 5;$/;"	v
RTCP_SDES_NAME	include/RTCP.hh	/^const unsigned char RTCP_SDES_NAME = 2;$/;"	v
RTCP_SDES_NOTE	include/RTCP.hh	/^const unsigned char RTCP_SDES_NOTE = 7;$/;"	v
RTCP_SDES_PHONE	include/RTCP.hh	/^const unsigned char RTCP_SDES_PHONE = 4;$/;"	v
RTCP_SDES_PRIV	include/RTCP.hh	/^const unsigned char RTCP_SDES_PRIV = 8;$/;"	v
RTCP_SDES_TOOL	include/RTCP.hh	/^const unsigned char RTCP_SDES_TOOL = 6;$/;"	v
RTCPgs	include/RTCP.hh	/^  Groupsock* RTCPgs() const { return fRTCPInterface.gs(); }$/;"	f	class:RTCPInstance
SDESItem	include/RTCP.hh	/^class SDESItem {$/;"	c
_RTCP_HH	include/RTCP.hh	22;"	d
data	include/RTCP.hh	/^  unsigned char const* data() const {return fData;}$/;"	f	class:SDESItem
fAppHandlerClientData	include/RTCP.hh	/^  void* fAppHandlerClientData;$/;"	m	class:RTCPInstance
fAppHandlerTask	include/RTCP.hh	/^  RTCPAppHandlerFunc* fAppHandlerTask;$/;"	m	class:RTCPInstance
fAveRTCPSize	include/RTCP.hh	/^  double fAveRTCPSize;$/;"	m	class:RTCPInstance
fByeHandleActiveParticipantsOnly	include/RTCP.hh	/^  Boolean fByeHandleActiveParticipantsOnly;$/;"	m	class:RTCPInstance
fByeHandlerClientData	include/RTCP.hh	/^  void* fByeHandlerClientData;$/;"	m	class:RTCPInstance
fByeHandlerTask	include/RTCP.hh	/^  TaskFunc* fByeHandlerTask;$/;"	m	class:RTCPInstance
fCNAME	include/RTCP.hh	/^  SDESItem fCNAME;$/;"	m	class:RTCPInstance
fData	include/RTCP.hh	/^  unsigned char fData[2 + 0xFF]; \/\/ first 2 bytes are tag and length$/;"	m	class:SDESItem
fHaveJustSentPacket	include/RTCP.hh	/^  Boolean fHaveJustSentPacket;$/;"	m	class:RTCPInstance
fInBuf	include/RTCP.hh	/^  u_int8_t* fInBuf;$/;"	m	class:RTCPInstance
fIsInitial	include/RTCP.hh	/^  int fIsInitial;$/;"	m	class:RTCPInstance
fIsSSMSource	include/RTCP.hh	/^  Boolean fIsSSMSource;$/;"	m	class:RTCPInstance
fKnownMembers	include/RTCP.hh	/^  RTCPMemberDatabase* fKnownMembers;$/;"	m	class:RTCPInstance
fLastPacketSentSize	include/RTCP.hh	/^  unsigned fLastPacketSentSize;$/;"	m	class:RTCPInstance
fLastReceivedSSRC	include/RTCP.hh	/^  u_int32_t fLastReceivedSSRC;$/;"	m	class:RTCPInstance
fLastReceivedSize	include/RTCP.hh	/^  int fLastReceivedSize;$/;"	m	class:RTCPInstance
fLastSentSize	include/RTCP.hh	/^  int fLastSentSize;$/;"	m	class:RTCPInstance
fNextReportTime	include/RTCP.hh	/^  double fNextReportTime;$/;"	m	class:RTCPInstance
fNumBytesAlreadyRead	include/RTCP.hh	/^  unsigned fNumBytesAlreadyRead;$/;"	m	class:RTCPInstance
fOutBuf	include/RTCP.hh	/^  OutPacketBuffer* fOutBuf;$/;"	m	class:RTCPInstance
fOutgoingReportCount	include/RTCP.hh	/^  unsigned fOutgoingReportCount; \/\/ used for SSRC member aging$/;"	m	class:RTCPInstance
fPrevNumMembers	include/RTCP.hh	/^  int fPrevNumMembers;$/;"	m	class:RTCPInstance
fPrevReportTime	include/RTCP.hh	/^  double fPrevReportTime;$/;"	m	class:RTCPInstance
fRRHandlerClientData	include/RTCP.hh	/^  void* fRRHandlerClientData;$/;"	m	class:RTCPInstance
fRRHandlerTask	include/RTCP.hh	/^  TaskFunc* fRRHandlerTask;$/;"	m	class:RTCPInstance
fRTCPInterface	include/RTCP.hh	/^  RTPInterface fRTCPInterface;$/;"	m	class:RTCPInstance
fSRHandlerClientData	include/RTCP.hh	/^  void* fSRHandlerClientData;$/;"	m	class:RTCPInstance
fSRHandlerTask	include/RTCP.hh	/^  TaskFunc* fSRHandlerTask;$/;"	m	class:RTCPInstance
fSink	include/RTCP.hh	/^  RTPSink* fSink;$/;"	m	class:RTCPInstance
fSource	include/RTCP.hh	/^  RTPSource* fSource;$/;"	m	class:RTCPInstance
fSpecificRRHandlerTable	include/RTCP.hh	/^  AddressPortLookupTable* fSpecificRRHandlerTable;$/;"	m	class:RTCPInstance
fTotSessionBW	include/RTCP.hh	/^  unsigned fTotSessionBW;$/;"	m	class:RTCPInstance
fTypeOfEvent	include/RTCP.hh	/^  int fTypeOfEvent;$/;"	m	class:RTCPInstance
fTypeOfPacket	include/RTCP.hh	/^  int fTypeOfPacket;$/;"	m	class:RTCPInstance
packetType	include/RTCP.hh	/^  int packetType() {return fTypeOfPacket;}$/;"	f	class:RTCPInstance
receivedPacketSize	include/RTCP.hh	/^  int receivedPacketSize() {return fLastReceivedSize;}$/;"	f	class:RTCPInstance
removeStreamSocket	include/RTCP.hh	/^  void removeStreamSocket(int sockNum, unsigned char streamChannelId) {$/;"	f	class:RTCPInstance
sentPacketSize	include/RTCP.hh	/^  int sentPacketSize() {return fLastSentSize;}$/;"	f	class:RTCPInstance
setAuxilliaryReadHandler	include/RTCP.hh	/^  void setAuxilliaryReadHandler(AuxHandlerFunc* handlerFunc,$/;"	f	class:RTCPInstance
totSessionBW	include/RTCP.hh	/^  unsigned totSessionBW() const { return fTotSessionBW; }$/;"	f	class:RTCPInstance
typeOfEvent	include/RTCP.hh	/^  int typeOfEvent() {return fTypeOfEvent;}$/;"	f	class:RTCPInstance
AuxHandlerFunc	include/RTPInterface.hh	/^typedef void AuxHandlerFunc(void* clientData, unsigned char* packet,$/;"	t
RTPInterface	include/RTPInterface.hh	/^class RTPInterface {$/;"	c
ServerRequestAlternativeByteHandler	include/RTPInterface.hh	/^typedef void ServerRequestAlternativeByteHandler(void* instance, u_int8_t requestByte);$/;"	t
_RTP_INTERFACE_HH	include/RTPInterface.hh	24;"	d
envir	include/RTPInterface.hh	/^  UsageEnvironment& envir() const { return fOwner->envir(); }$/;"	f	class:RTPInterface
fAuxReadHandlerClientData	include/RTPInterface.hh	/^  void* fAuxReadHandlerClientData;$/;"	m	class:RTPInterface
fAuxReadHandlerFunc	include/RTPInterface.hh	/^  AuxHandlerFunc* fAuxReadHandlerFunc;$/;"	m	class:RTPInterface
fGS	include/RTPInterface.hh	/^  Groupsock* fGS;$/;"	m	class:RTPInterface
fNext	include/RTPInterface.hh	/^  tcpStreamRecord* fNext;$/;"	m	class:tcpStreamRecord
fNextTCPReadSize	include/RTPInterface.hh	/^  unsigned short fNextTCPReadSize;$/;"	m	class:RTPInterface
fNextTCPReadStreamChannelId	include/RTPInterface.hh	/^  unsigned char fNextTCPReadStreamChannelId;$/;"	m	class:RTPInterface
fNextTCPReadStreamSocketNum	include/RTPInterface.hh	/^  int fNextTCPReadStreamSocketNum;$/;"	m	class:RTPInterface
fOwner	include/RTPInterface.hh	/^  Medium* fOwner;$/;"	m	class:RTPInterface
fReadHandlerProc	include/RTPInterface.hh	/^  TaskScheduler::BackgroundHandlerProc* fReadHandlerProc; \/\/ if any$/;"	m	class:RTPInterface
fStreamChannelId	include/RTPInterface.hh	/^  unsigned char fStreamChannelId;$/;"	m	class:tcpStreamRecord
fStreamSocketNum	include/RTPInterface.hh	/^  int fStreamSocketNum;$/;"	m	class:tcpStreamRecord
fTCPStreams	include/RTPInterface.hh	/^  tcpStreamRecord* fTCPStreams; \/\/ optional, for RTP-over-TCP streaming\/receiving$/;"	m	class:RTPInterface
forgetOurGroupsock	include/RTPInterface.hh	/^  void forgetOurGroupsock() { fGS = NULL; }$/;"	f	class:RTPInterface
gs	include/RTPInterface.hh	/^  Groupsock* gs() const { return fGS; }$/;"	f	class:RTPInterface
setAuxilliaryReadHandler	include/RTPInterface.hh	/^  void setAuxilliaryReadHandler(AuxHandlerFunc* handlerFunc,$/;"	f	class:RTPInterface
tcpStreamRecord	include/RTPInterface.hh	/^class tcpStreamRecord {$/;"	c
Iterator	include/RTPSink.hh	/^  class Iterator {$/;"	c	class:RTPTransmissionStatsDB
RTPSink	include/RTPSink.hh	/^class RTPSink: public MediaSink {$/;"	c
RTPTransmissionStats	include/RTPSink.hh	/^class RTPTransmissionStats {$/;"	c
RTPTransmissionStatsDB	include/RTPSink.hh	/^class RTPTransmissionStatsDB {$/;"	c
SSRC	include/RTPSink.hh	/^  u_int32_t SSRC() const {return fSSRC;}$/;"	f	class:RTPSink
SSRC	include/RTPSink.hh	/^  u_int32_t SSRC() const {return fSSRC;}$/;"	f	class:RTPTransmissionStats
_RTP_SINK_HH	include/RTPSink.hh	22;"	d
addStreamSocket	include/RTPSink.hh	/^  void addStreamSocket(int sockNum, unsigned char streamChannelId) {$/;"	f	class:RTPSink
creationTime	include/RTPSink.hh	/^  struct timeval const& creationTime() const { return fCreationTime; }$/;"	f	class:RTPSink
currentSeqNo	include/RTPSink.hh	/^  u_int16_t currentSeqNo() const { return fSeqNo; }$/;"	f	class:RTPSink
diffSR_RRTime	include/RTPSink.hh	/^  unsigned diffSR_RRTime() const { return fDiffSR_RRTime; }$/;"	f	class:RTPTransmissionStats
enableRTCPReports	include/RTPSink.hh	/^  Boolean& enableRTCPReports() { return fEnableRTCPReports; }$/;"	f	class:RTPSink
estimatedBitrate	include/RTPSink.hh	/^  unsigned& estimatedBitrate() { return fEstimatedBitrate; } \/\/ kbps; usually 0 (i.e., unset)$/;"	f	class:RTPSink
fAtLeastTwoRRsHaveBeenReceived	include/RTPSink.hh	/^  Boolean fAtLeastTwoRRsHaveBeenReceived;$/;"	m	class:RTPTransmissionStats
fCreationTime	include/RTPSink.hh	/^  struct timeval fCreationTime;$/;"	m	class:RTPSink	typeref:struct:RTPSink::timeval
fCurrentTimestamp	include/RTPSink.hh	/^  u_int32_t fCurrentTimestamp;$/;"	m	class:RTPSink
fDiffSR_RRTime	include/RTPSink.hh	/^  unsigned fDiffSR_RRTime;$/;"	m	class:RTPTransmissionStats
fEnableRTCPReports	include/RTPSink.hh	/^  Boolean fEnableRTCPReports; \/\/ whether RTCP "SR" reports should be sent for this sink (default: True)$/;"	m	class:RTPSink
fEstimatedBitrate	include/RTPSink.hh	/^  unsigned fEstimatedBitrate; \/\/ set on creation if known; otherwise 0$/;"	m	class:RTPSink
fFirstPacket	include/RTPSink.hh	/^  Boolean fFirstPacket;$/;"	m	class:RTPTransmissionStats
fFirstPacketNumReported	include/RTPSink.hh	/^  unsigned fFirstPacketNumReported;$/;"	m	class:RTPTransmissionStats
fInitialPresentationTime	include/RTPSink.hh	/^  struct timeval fTotalOctetCountStartTime, fInitialPresentationTime, fMostRecentPresentationTime;$/;"	m	class:RTPSink	typeref:struct:RTPSink::
fIter	include/RTPSink.hh	/^    HashTable::Iterator* fIter;$/;"	m	class:RTPTransmissionStatsDB::Iterator
fJitter	include/RTPSink.hh	/^  unsigned fJitter;$/;"	m	class:RTPTransmissionStats
fLastFromAddress	include/RTPSink.hh	/^  struct sockaddr_in fLastFromAddress;$/;"	m	class:RTPTransmissionStats	typeref:struct:RTPTransmissionStats::sockaddr_in
fLastOctetCount	include/RTPSink.hh	/^  u_int32_t fLastOctetCount, fTotalOctetCount_hi, fTotalOctetCount_lo;$/;"	m	class:RTPTransmissionStats
fLastPacketCount	include/RTPSink.hh	/^  u_int32_t fLastPacketCount, fTotalPacketCount_hi, fTotalPacketCount_lo;$/;"	m	class:RTPTransmissionStats
fLastPacketNumReceived	include/RTPSink.hh	/^  unsigned fLastPacketNumReceived;$/;"	m	class:RTPTransmissionStats
fLastSRTime	include/RTPSink.hh	/^  unsigned fLastSRTime;$/;"	m	class:RTPTransmissionStats
fMostRecentPresentationTime	include/RTPSink.hh	/^  struct timeval fTotalOctetCountStartTime, fInitialPresentationTime, fMostRecentPresentationTime;$/;"	m	class:RTPSink	typeref:struct:RTPSink::
fNextTimestampHasBeenPreset	include/RTPSink.hh	/^  Boolean fNextTimestampHasBeenPreset;$/;"	m	class:RTPSink
fNumChannels	include/RTPSink.hh	/^  unsigned fNumChannels;$/;"	m	class:RTPSink
fNumReceivers	include/RTPSink.hh	/^  unsigned fNumReceivers;$/;"	m	class:RTPTransmissionStatsDB
fOctetCount	include/RTPSink.hh	/^  unsigned fPacketCount, fOctetCount, fTotalOctetCount \/*incl RTP hdr*\/;$/;"	m	class:RTPSink
fOldLastPacketNumReceived	include/RTPSink.hh	/^  unsigned fOldLastPacketNumReceived;$/;"	m	class:RTPTransmissionStats
fOldTotNumPacketsLost	include/RTPSink.hh	/^  unsigned fOldTotNumPacketsLost;$/;"	m	class:RTPTransmissionStats
fOurRTPSink	include/RTPSink.hh	/^  RTPSink& fOurRTPSink;$/;"	m	class:RTPTransmissionStats
fOurRTPSink	include/RTPSink.hh	/^  RTPSink& fOurRTPSink;$/;"	m	class:RTPTransmissionStatsDB
fPacketCount	include/RTPSink.hh	/^  unsigned fPacketCount, fOctetCount, fTotalOctetCount \/*incl RTP hdr*\/;$/;"	m	class:RTPSink
fPacketLossRatio	include/RTPSink.hh	/^  u_int8_t fPacketLossRatio;$/;"	m	class:RTPTransmissionStats
fRTPInterface	include/RTPSink.hh	/^  RTPInterface fRTPInterface;$/;"	m	class:RTPSink
fRTPPayloadFormatName	include/RTPSink.hh	/^  char const* fRTPPayloadFormatName;$/;"	m	class:RTPSink
fRTPPayloadType	include/RTPSink.hh	/^  unsigned char fRTPPayloadType;$/;"	m	class:RTPSink
fSSRC	include/RTPSink.hh	/^  u_int32_t fSSRC, fTimestampBase;$/;"	m	class:RTPSink
fSSRC	include/RTPSink.hh	/^  u_int32_t fSSRC;$/;"	m	class:RTPTransmissionStats
fSeqNo	include/RTPSink.hh	/^  u_int16_t fSeqNo;$/;"	m	class:RTPSink
fTable	include/RTPSink.hh	/^  HashTable* fTable;$/;"	m	class:RTPTransmissionStatsDB
fTimeCreated	include/RTPSink.hh	/^  struct timeval fTimeCreated, fTimeReceived;$/;"	m	class:RTPTransmissionStats	typeref:struct:RTPTransmissionStats::timeval
fTimeReceived	include/RTPSink.hh	/^  struct timeval fTimeCreated, fTimeReceived;$/;"	m	class:RTPTransmissionStats	typeref:struct:RTPTransmissionStats::
fTimestampBase	include/RTPSink.hh	/^  u_int32_t fSSRC, fTimestampBase;$/;"	m	class:RTPSink
fTimestampFrequency	include/RTPSink.hh	/^  unsigned fTimestampFrequency;$/;"	m	class:RTPSink
fTotNumPacketsLost	include/RTPSink.hh	/^  unsigned fTotNumPacketsLost;$/;"	m	class:RTPTransmissionStats
fTotalOctetCount	include/RTPSink.hh	/^  unsigned fPacketCount, fOctetCount, fTotalOctetCount \/*incl RTP hdr*\/;$/;"	m	class:RTPSink
fTotalOctetCountStartTime	include/RTPSink.hh	/^  struct timeval fTotalOctetCountStartTime, fInitialPresentationTime, fMostRecentPresentationTime;$/;"	m	class:RTPSink	typeref:struct:RTPSink::timeval
fTotalOctetCount_hi	include/RTPSink.hh	/^  u_int32_t fLastOctetCount, fTotalOctetCount_hi, fTotalOctetCount_lo;$/;"	m	class:RTPTransmissionStats
fTotalOctetCount_lo	include/RTPSink.hh	/^  u_int32_t fLastOctetCount, fTotalOctetCount_hi, fTotalOctetCount_lo;$/;"	m	class:RTPTransmissionStats
fTotalPacketCount_hi	include/RTPSink.hh	/^  u_int32_t fLastPacketCount, fTotalPacketCount_hi, fTotalPacketCount_lo;$/;"	m	class:RTPTransmissionStats
fTotalPacketCount_lo	include/RTPSink.hh	/^  u_int32_t fLastPacketCount, fTotalPacketCount_hi, fTotalPacketCount_lo;$/;"	m	class:RTPTransmissionStats
fTransmissionStatsDB	include/RTPSink.hh	/^  RTPTransmissionStatsDB* fTransmissionStatsDB;$/;"	m	class:RTPSink
firstPacketNumReported	include/RTPSink.hh	/^  unsigned firstPacketNumReported() const {return fFirstPacketNumReported;}$/;"	f	class:RTPTransmissionStats
groupsockBeingUsed	include/RTPSink.hh	/^  Groupsock const& groupsockBeingUsed() const { return *(fRTPInterface.gs()); }$/;"	f	class:RTPSink
groupsockBeingUsed	include/RTPSink.hh	/^  Groupsock& groupsockBeingUsed() { return *(fRTPInterface.gs()); }$/;"	f	class:RTPSink
initialPresentationTime	include/RTPSink.hh	/^  struct timeval const& initialPresentationTime() const { return fInitialPresentationTime; }$/;"	f	class:RTPSink
jitter	include/RTPSink.hh	/^  unsigned jitter() const {return fJitter;}$/;"	f	class:RTPTransmissionStats
lastFromAddress	include/RTPSink.hh	/^  struct sockaddr_in const& lastFromAddress() const {return fLastFromAddress;}$/;"	f	class:RTPTransmissionStats
lastPacketNumReceived	include/RTPSink.hh	/^  unsigned lastPacketNumReceived() const {return fLastPacketNumReceived;}$/;"	f	class:RTPTransmissionStats
lastSRTime	include/RTPSink.hh	/^  unsigned lastSRTime() const { return fLastSRTime; }$/;"	f	class:RTPTransmissionStats
lastTimeReceived	include/RTPSink.hh	/^  struct timeval const& lastTimeReceived() const {return fTimeReceived;}$/;"	f	class:RTPTransmissionStats
mostRecentPresentationTime	include/RTPSink.hh	/^  struct timeval const& mostRecentPresentationTime() const { return fMostRecentPresentationTime; }$/;"	f	class:RTPSink
nextTimestampHasBeenPreset	include/RTPSink.hh	/^  Boolean nextTimestampHasBeenPreset() const { return fNextTimestampHasBeenPreset; }$/;"	f	class:RTPSink
numChannels	include/RTPSink.hh	/^  unsigned numChannels() const { return fNumChannels; }$/;"	f	class:RTPSink
numReceivers	include/RTPSink.hh	/^  unsigned numReceivers() const { return fNumReceivers; }$/;"	f	class:RTPTransmissionStatsDB
octetCount	include/RTPSink.hh	/^  unsigned octetCount() const {return fOctetCount;}$/;"	f	class:RTPSink
packetCount	include/RTPSink.hh	/^  unsigned packetCount() const {return fPacketCount;}$/;"	f	class:RTPSink
packetLossRatio	include/RTPSink.hh	/^  u_int8_t packetLossRatio() const { return fPacketLossRatio; }$/;"	f	class:RTPTransmissionStats
removeStreamSocket	include/RTPSink.hh	/^  void removeStreamSocket(int sockNum, unsigned char streamChannelId) {$/;"	f	class:RTPSink
rtpPayloadFormatName	include/RTPSink.hh	/^  char const* rtpPayloadFormatName() const {return fRTPPayloadFormatName;}$/;"	f	class:RTPSink
rtpPayloadType	include/RTPSink.hh	/^  unsigned char rtpPayloadType() const { return fRTPPayloadType; }$/;"	f	class:RTPSink
rtpTimestampFrequency	include/RTPSink.hh	/^  unsigned rtpTimestampFrequency() const { return fTimestampFrequency; }$/;"	f	class:RTPSink
setRTPTimestampFrequency	include/RTPSink.hh	/^  void setRTPTimestampFrequency(unsigned freq) {$/;"	f	class:RTPSink
setStreamSocket	include/RTPSink.hh	/^  void setStreamSocket(int sockNum, unsigned char streamChannelId) {$/;"	f	class:RTPSink
timeCreated	include/RTPSink.hh	/^  struct timeval const& timeCreated() const {return fTimeCreated;}$/;"	f	class:RTPTransmissionStats
totNumPacketsLost	include/RTPSink.hh	/^  unsigned totNumPacketsLost() const {return fTotNumPacketsLost;}$/;"	f	class:RTPTransmissionStats
transmissionStatsDB	include/RTPSink.hh	/^  RTPTransmissionStatsDB& transmissionStatsDB() const {$/;"	f	class:RTPSink
Iterator	include/RTPSource.hh	/^  class Iterator {$/;"	c	class:RTPReceptionStatsDB
RTPReceptionStats	include/RTPSource.hh	/^class RTPReceptionStats {$/;"	c
RTPReceptionStatsDB	include/RTPSource.hh	/^class RTPReceptionStatsDB {$/;"	c
RTPSource	include/RTPSource.hh	/^class RTPSource: public FramedSource {$/;"	c
RTPgs	include/RTPSource.hh	/^  Groupsock* RTPgs() const { return fRTPInterface.gs(); }$/;"	f	class:RTPSource
SSRC	include/RTPSource.hh	/^  u_int32_t SSRC() const { return fSSRC; }$/;"	f	class:RTPReceptionStats
SSRC	include/RTPSource.hh	/^  u_int32_t SSRC() const { return fSSRC; }$/;"	f	class:RTPSource
_RTP_SOURCE_HH	include/RTPSource.hh	22;"	d
baseExtSeqNumReceived	include/RTPSource.hh	/^  unsigned baseExtSeqNumReceived() const { return fBaseExtSeqNumReceived; }$/;"	f	class:RTPReceptionStats
curPacketMarkerBit	include/RTPSource.hh	/^  Boolean curPacketMarkerBit() const { return fCurPacketMarkerBit; }$/;"	f	class:RTPSource
curPacketRTPSeqNum	include/RTPSource.hh	/^  u_int16_t curPacketRTPSeqNum() const { return fCurPacketRTPSeqNum; }$/;"	f	class:RTPSource
curPacketRTPTimestamp	include/RTPSource.hh	/^  u_int32_t curPacketRTPTimestamp() const { return fCurPacketRTPTimestamp; }$/;"	f	class:RTPSource
deregisterForMultiplexedRTCPPackets	include/RTPSource.hh	/^  void deregisterForMultiplexedRTCPPackets() { registerForMultiplexedRTCPPackets(NULL); }$/;"	f	class:RTPSource
enableRTCPReports	include/RTPSource.hh	/^  Boolean const& enableRTCPReports() const { return fEnableRTCPReports; }$/;"	f	class:RTPSource
enableRTCPReports	include/RTPSource.hh	/^  Boolean& enableRTCPReports() { return fEnableRTCPReports; }$/;"	f	class:RTPSource
fBaseExtSeqNumReceived	include/RTPSource.hh	/^  unsigned fBaseExtSeqNumReceived;$/;"	m	class:RTPReceptionStats
fCurPacketHasBeenSynchronizedUsingRTCP	include/RTPSource.hh	/^  Boolean fCurPacketHasBeenSynchronizedUsingRTCP;$/;"	m	class:RTPSource
fCurPacketMarkerBit	include/RTPSource.hh	/^  Boolean fCurPacketMarkerBit;$/;"	m	class:RTPSource
fCurPacketRTPSeqNum	include/RTPSource.hh	/^  u_int16_t fCurPacketRTPSeqNum;$/;"	m	class:RTPSource
fCurPacketRTPTimestamp	include/RTPSource.hh	/^  u_int32_t fCurPacketRTPTimestamp;$/;"	m	class:RTPSource
fEnableRTCPReports	include/RTPSource.hh	/^  Boolean fEnableRTCPReports; \/\/ whether RTCP "RR" reports should be sent for this source (default: True)$/;"	m	class:RTPSource
fHasBeenSynchronized	include/RTPSource.hh	/^  Boolean fHasBeenSynchronized;$/;"	m	class:RTPReceptionStats
fHaveSeenInitialSequenceNumber	include/RTPSource.hh	/^  Boolean fHaveSeenInitialSequenceNumber;$/;"	m	class:RTPReceptionStats
fHighestExtSeqNumReceived	include/RTPSource.hh	/^  unsigned fHighestExtSeqNumReceived;$/;"	m	class:RTPReceptionStats
fIter	include/RTPSource.hh	/^    HashTable::Iterator* fIter;$/;"	m	class:RTPReceptionStatsDB::Iterator
fJitter	include/RTPSource.hh	/^  double fJitter;$/;"	m	class:RTPReceptionStats
fLastPacketReceptionTime	include/RTPSource.hh	/^  struct timeval fLastPacketReceptionTime;$/;"	m	class:RTPReceptionStats	typeref:struct:RTPReceptionStats::timeval
fLastReceivedSR_NTPlsw	include/RTPSource.hh	/^  unsigned fLastReceivedSR_NTPlsw; \/\/ NTP timestamp (from SR), least-signif$/;"	m	class:RTPReceptionStats
fLastReceivedSR_NTPmsw	include/RTPSource.hh	/^  unsigned fLastReceivedSR_NTPmsw; \/\/ NTP timestamp (from SR), most-signif$/;"	m	class:RTPReceptionStats
fLastReceivedSR_time	include/RTPSource.hh	/^  struct timeval fLastReceivedSR_time;$/;"	m	class:RTPReceptionStats	typeref:struct:RTPReceptionStats::timeval
fLastReceivedSSRC	include/RTPSource.hh	/^  u_int32_t fLastReceivedSSRC;$/;"	m	class:RTPSource
fLastResetExtSeqNumReceived	include/RTPSource.hh	/^  unsigned fLastResetExtSeqNumReceived;$/;"	m	class:RTPReceptionStats
fLastTransit	include/RTPSource.hh	/^  int fLastTransit; \/\/ used in the jitter calculation$/;"	m	class:RTPReceptionStats
fMaxInterPacketGapUS	include/RTPSource.hh	/^  unsigned fMinInterPacketGapUS, fMaxInterPacketGapUS;$/;"	m	class:RTPReceptionStats
fMinInterPacketGapUS	include/RTPSource.hh	/^  unsigned fMinInterPacketGapUS, fMaxInterPacketGapUS;$/;"	m	class:RTPReceptionStats
fNumActiveSourcesSinceLastReset	include/RTPSource.hh	/^  unsigned fNumActiveSourcesSinceLastReset;$/;"	m	class:RTPReceptionStatsDB
fNumPacketsReceivedSinceLastReset	include/RTPSource.hh	/^  unsigned fNumPacketsReceivedSinceLastReset;$/;"	m	class:RTPReceptionStats
fPreviousPacketRTPTimestamp	include/RTPSource.hh	/^  u_int32_t fPreviousPacketRTPTimestamp;$/;"	m	class:RTPReceptionStats
fRTCPInstanceForMultiplexedRTCPPackets	include/RTPSource.hh	/^  class RTCPInstance* fRTCPInstanceForMultiplexedRTCPPackets;$/;"	m	class:RTPSource	typeref:class:RTPSource::RTCPInstance
fRTPInterface	include/RTPSource.hh	/^  RTPInterface fRTPInterface;$/;"	m	class:RTPSource
fRTPPayloadFormat	include/RTPSource.hh	/^  unsigned char fRTPPayloadFormat;$/;"	m	class:RTPSource
fReceptionStatsDB	include/RTPSource.hh	/^  RTPReceptionStatsDB* fReceptionStatsDB;$/;"	m	class:RTPSource
fSSRC	include/RTPSource.hh	/^  u_int32_t fSSRC;$/;"	m	class:RTPReceptionStats
fSSRC	include/RTPSource.hh	/^  u_int32_t fSSRC;$/;"	m	class:RTPSource
fSyncTime	include/RTPSource.hh	/^  struct timeval fSyncTime;$/;"	m	class:RTPReceptionStats	typeref:struct:RTPReceptionStats::timeval
fSyncTimestamp	include/RTPSource.hh	/^  u_int32_t fSyncTimestamp;$/;"	m	class:RTPReceptionStats
fTable	include/RTPSource.hh	/^  HashTable* fTable;$/;"	m	class:RTPReceptionStatsDB
fTimestampFrequency	include/RTPSource.hh	/^  unsigned fTimestampFrequency;$/;"	m	class:RTPSource
fTotBytesReceived_hi	include/RTPSource.hh	/^  u_int32_t fTotBytesReceived_hi, fTotBytesReceived_lo;$/;"	m	class:RTPReceptionStats
fTotBytesReceived_lo	include/RTPSource.hh	/^  u_int32_t fTotBytesReceived_hi, fTotBytesReceived_lo;$/;"	m	class:RTPReceptionStats
fTotNumPacketsReceived	include/RTPSource.hh	/^  unsigned fTotNumPacketsReceived; \/\/ for all SSRCs$/;"	m	class:RTPReceptionStatsDB
fTotNumPacketsReceived	include/RTPSource.hh	/^  unsigned fTotNumPacketsReceived;$/;"	m	class:RTPReceptionStats
fTotalInterPacketGaps	include/RTPSource.hh	/^  struct timeval fTotalInterPacketGaps;$/;"	m	class:RTPReceptionStats	typeref:struct:RTPReceptionStats::timeval
highestExtSeqNumReceived	include/RTPSource.hh	/^  unsigned highestExtSeqNumReceived() const {$/;"	f	class:RTPReceptionStats
lastReceivedSR_NTPlsw	include/RTPSource.hh	/^  unsigned lastReceivedSR_NTPlsw() const { return fLastReceivedSR_NTPlsw; }$/;"	f	class:RTPReceptionStats
lastReceivedSR_NTPmsw	include/RTPSource.hh	/^  unsigned lastReceivedSR_NTPmsw() const { return fLastReceivedSR_NTPmsw; }$/;"	f	class:RTPReceptionStats
lastReceivedSR_time	include/RTPSource.hh	/^  struct timeval const& lastReceivedSR_time() const {$/;"	f	class:RTPReceptionStats
lastReceivedSSRC	include/RTPSource.hh	/^  u_int32_t lastReceivedSSRC() const { return fLastReceivedSSRC; }$/;"	f	class:RTPSource
lastResetExtSeqNumReceived	include/RTPSource.hh	/^  unsigned lastResetExtSeqNumReceived() const {$/;"	f	class:RTPReceptionStats
maxInterPacketGapUS	include/RTPSource.hh	/^  unsigned maxInterPacketGapUS() const { return fMaxInterPacketGapUS; }$/;"	f	class:RTPReceptionStats
minInterPacketGapUS	include/RTPSource.hh	/^  unsigned minInterPacketGapUS() const { return fMinInterPacketGapUS; }$/;"	f	class:RTPReceptionStats
numActiveSourcesSinceLastReset	include/RTPSource.hh	/^  unsigned numActiveSourcesSinceLastReset() const {$/;"	f	class:RTPReceptionStatsDB
numPacketsReceivedSinceLastReset	include/RTPSource.hh	/^  unsigned numPacketsReceivedSinceLastReset() const {$/;"	f	class:RTPReceptionStats
receptionStatsDB	include/RTPSource.hh	/^  RTPReceptionStatsDB& receptionStatsDB() const {$/;"	f	class:RTPSource
registerForMultiplexedRTCPPackets	include/RTPSource.hh	/^  void registerForMultiplexedRTCPPackets(class RTCPInstance* rtcpInstance) {$/;"	f	class:RTPSource
rtpPayloadFormat	include/RTPSource.hh	/^  unsigned char rtpPayloadFormat() const { return fRTPPayloadFormat; }$/;"	f	class:RTPSource
setAuxilliaryReadHandler	include/RTPSource.hh	/^  void setAuxilliaryReadHandler(AuxHandlerFunc* handlerFunc,$/;"	f	class:RTPSource
setStreamSocket	include/RTPSource.hh	/^  void setStreamSocket(int sockNum, unsigned char streamChannelId) {$/;"	f	class:RTPSource
timestampFrequency	include/RTPSource.hh	/^  unsigned timestampFrequency() const {return fTimestampFrequency;}$/;"	f	class:RTPSource
totNumPacketsExpected	include/RTPSource.hh	/^  unsigned totNumPacketsExpected() const {$/;"	f	class:RTPReceptionStats
totNumPacketsReceived	include/RTPSource.hh	/^  unsigned totNumPacketsReceived() const { return fTotNumPacketsReceived; }$/;"	f	class:RTPReceptionStats
totNumPacketsReceived	include/RTPSource.hh	/^  unsigned totNumPacketsReceived() const { return fTotNumPacketsReceived; }$/;"	f	class:RTPReceptionStatsDB
totalInterPacketGaps	include/RTPSource.hh	/^  struct timeval const& totalInterPacketGaps() const {$/;"	f	class:RTPReceptionStats
HandlerServerForREGISTERCommand	include/RTSPClient.hh	/^class HandlerServerForREGISTERCommand: public RTSPServer {$/;"	c
RTSPClient	include/RTSPClient.hh	/^class RTSPClient: public Medium {$/;"	c
RequestQueue	include/RTSPClient.hh	/^  class RequestQueue {$/;"	c	class:RTSPClient
RequestRecord	include/RTSPClient.hh	/^  class RequestRecord {$/;"	c	class:RTSPClient
_RTSP_CLIENT_HH	include/RTSPClient.hh	22;"	d
absEndTime	include/RTSPClient.hh	/^    char const* absEndTime() const { return fAbsEndTime; }$/;"	f	class:RTSPClient::RequestRecord
absStartTime	include/RTSPClient.hh	/^    char const* absStartTime() const { return fAbsStartTime; }$/;"	f	class:RTSPClient::RequestRecord
booleanFlags	include/RTSPClient.hh	/^    u_int32_t booleanFlags() const { return fBooleanFlags; }$/;"	f	class:RTSPClient::RequestRecord
commandName	include/RTSPClient.hh	/^    char const* commandName() const { return fCommandName; }$/;"	f	class:RTSPClient::RequestRecord
contentStr	include/RTSPClient.hh	/^    char* contentStr() const { return fContentStr; }$/;"	f	class:RTSPClient::RequestRecord
cseq	include/RTSPClient.hh	/^    unsigned& cseq() { return fCSeq; }$/;"	f	class:RTSPClient::RequestRecord
desiredMaxIncomingPacketSize	include/RTSPClient.hh	/^  u_int16_t desiredMaxIncomingPacketSize;$/;"	m	class:RTSPClient
disallowBasicAuthentication	include/RTSPClient.hh	/^  void disallowBasicAuthentication() { fAllowBasicAuthentication = False; }$/;"	f	class:RTSPClient
end	include/RTSPClient.hh	/^    double end() const { return fEnd; }$/;"	f	class:RTSPClient::RequestRecord
fAbsEndTime	include/RTSPClient.hh	/^    char *fAbsStartTime, *fAbsEndTime; \/\/ used for optional 'absolute' (i.e., "time=") range specifications$/;"	m	class:RTSPClient::RequestRecord
fAbsStartTime	include/RTSPClient.hh	/^    char *fAbsStartTime, *fAbsEndTime; \/\/ used for optional 'absolute' (i.e., "time=") range specifications$/;"	m	class:RTSPClient::RequestRecord
fAllowBasicAuthentication	include/RTSPClient.hh	/^  Boolean fAllowBasicAuthentication;$/;"	m	class:RTSPClient
fApplicationName	include/RTSPClient.hh	/^  char* fApplicationName;$/;"	m	class:HandlerServerForREGISTERCommand
fBaseURL	include/RTSPClient.hh	/^  char* fBaseURL;$/;"	m	class:RTSPClient
fBooleanFlags	include/RTSPClient.hh	/^    u_int32_t fBooleanFlags;$/;"	m	class:RTSPClient::RequestRecord
fCSeq	include/RTSPClient.hh	/^    unsigned fCSeq;$/;"	m	class:RTSPClient::RequestRecord
fCSeq	include/RTSPClient.hh	/^  unsigned fCSeq; \/\/ sequence number, used in consecutive requests$/;"	m	class:RTSPClient
fCommandName	include/RTSPClient.hh	/^    char const* fCommandName;$/;"	m	class:RTSPClient::RequestRecord
fContentStr	include/RTSPClient.hh	/^    char* fContentStr;$/;"	m	class:RTSPClient::RequestRecord
fCreationFunc	include/RTSPClient.hh	/^  onRTSPClientCreationFunc* fCreationFunc;$/;"	m	class:HandlerServerForREGISTERCommand
fCurrentAuthenticator	include/RTSPClient.hh	/^  Authenticator fCurrentAuthenticator;$/;"	m	class:RTSPClient
fEnd	include/RTSPClient.hh	/^    double fStart, fEnd;$/;"	m	class:RTSPClient::RequestRecord
fHTTPTunnelingConnectionIsPending	include/RTSPClient.hh	/^  Boolean fHTTPTunnelingConnectionIsPending;$/;"	m	class:RTSPClient
fHandler	include/RTSPClient.hh	/^    responseHandler* fHandler;$/;"	m	class:RTSPClient::RequestRecord
fHead	include/RTSPClient.hh	/^    RequestRecord* fHead;$/;"	m	class:RTSPClient::RequestQueue
fInputSocketNum	include/RTSPClient.hh	/^  int fInputSocketNum, fOutputSocketNum;$/;"	m	class:RTSPClient
fLastSessionId	include/RTSPClient.hh	/^  char* fLastSessionId;$/;"	m	class:RTSPClient
fNext	include/RTSPClient.hh	/^    RequestRecord* fNext;$/;"	m	class:RTSPClient::RequestRecord
fOutputSocketNum	include/RTSPClient.hh	/^  int fInputSocketNum, fOutputSocketNum;$/;"	m	class:RTSPClient
fRequestsAwaitingConnection	include/RTSPClient.hh	/^  RequestQueue fRequestsAwaitingConnection, fRequestsAwaitingHTTPTunneling, fRequestsAwaitingResponse;$/;"	m	class:RTSPClient
fRequestsAwaitingHTTPTunneling	include/RTSPClient.hh	/^  RequestQueue fRequestsAwaitingConnection, fRequestsAwaitingHTTPTunneling, fRequestsAwaitingResponse;$/;"	m	class:RTSPClient
fRequestsAwaitingResponse	include/RTSPClient.hh	/^  RequestQueue fRequestsAwaitingConnection, fRequestsAwaitingHTTPTunneling, fRequestsAwaitingResponse;$/;"	m	class:RTSPClient
fResponseBuffer	include/RTSPClient.hh	/^  char* fResponseBuffer;$/;"	m	class:RTSPClient
fResponseBufferBytesLeft	include/RTSPClient.hh	/^  unsigned fResponseBytesAlreadySeen, fResponseBufferBytesLeft;$/;"	m	class:RTSPClient
fResponseBytesAlreadySeen	include/RTSPClient.hh	/^  unsigned fResponseBytesAlreadySeen, fResponseBufferBytesLeft;$/;"	m	class:RTSPClient
fScale	include/RTSPClient.hh	/^    float fScale;$/;"	m	class:RTSPClient::RequestRecord
fServerAddress	include/RTSPClient.hh	/^  netAddressBits fServerAddress;$/;"	m	class:RTSPClient
fSession	include/RTSPClient.hh	/^    MediaSession* fSession;$/;"	m	class:RTSPClient::RequestRecord
fSessionCookie	include/RTSPClient.hh	/^  char fSessionCookie[33];$/;"	m	class:RTSPClient
fSessionCookieCounter	include/RTSPClient.hh	/^  unsigned fSessionCookieCounter;$/;"	m	class:RTSPClient
fSessionTimeoutParameter	include/RTSPClient.hh	/^  unsigned fSessionTimeoutParameter; \/\/ optionally set in response "Session:" headers$/;"	m	class:RTSPClient
fStart	include/RTSPClient.hh	/^    double fStart, fEnd;$/;"	m	class:RTSPClient::RequestRecord
fSubsession	include/RTSPClient.hh	/^    MediaSubsession* fSubsession;$/;"	m	class:RTSPClient::RequestRecord
fTCPStreamIdCount	include/RTSPClient.hh	/^  unsigned char fTCPStreamIdCount; \/\/ used for (optional) RTP\/TCP$/;"	m	class:RTSPClient
fTail	include/RTSPClient.hh	/^    RequestRecord* fTail;$/;"	m	class:RTSPClient::RequestQueue
fTunnelOverHTTPPortNum	include/RTSPClient.hh	/^  portNumBits fTunnelOverHTTPPortNum;$/;"	m	class:RTSPClient
fUserAgentHeaderStr	include/RTSPClient.hh	/^  char* fUserAgentHeaderStr;$/;"	m	class:RTSPClient
fUserAgentHeaderStrLen	include/RTSPClient.hh	/^  unsigned fUserAgentHeaderStrLen;$/;"	m	class:RTSPClient
fVerbosityLevel	include/RTSPClient.hh	/^  int fVerbosityLevel;$/;"	m	class:HandlerServerForREGISTERCommand
fVerbosityLevel	include/RTSPClient.hh	/^  int fVerbosityLevel;$/;"	m	class:RTSPClient
handler	include/RTSPClient.hh	/^    responseHandler*& handler() { return fHandler; }$/;"	f	class:RTSPClient::RequestRecord
isEmpty	include/RTSPClient.hh	/^    Boolean isEmpty() const { return fHead == NULL; }$/;"	f	class:RTSPClient::RequestQueue
next	include/RTSPClient.hh	/^    RequestRecord*& next() { return fNext; }$/;"	f	class:RTSPClient::RequestRecord
onRTSPClientCreationFunc	include/RTSPClient.hh	/^typedef void onRTSPClientCreationFunc(RTSPClient* newRTSPClient, Boolean requestStreamingOverTCP);$/;"	t
responseBufferSize	include/RTSPClient.hh	/^  static unsigned responseBufferSize;$/;"	m	class:RTSPClient
responseHandler	include/RTSPClient.hh	/^  typedef void (responseHandler)(RTSPClient* rtspClient,$/;"	t	class:RTSPClient
scale	include/RTSPClient.hh	/^    float scale() const { return fScale; }$/;"	f	class:RTSPClient::RequestRecord
serverPortNum	include/RTSPClient.hh	/^  portNumBits serverPortNum() const { return ntohs(fServerPort.num()); }$/;"	f	class:HandlerServerForREGISTERCommand
session	include/RTSPClient.hh	/^    MediaSession* session() const { return fSession; }$/;"	f	class:RTSPClient::RequestRecord
sessionTimeoutParameter	include/RTSPClient.hh	/^  unsigned sessionTimeoutParameter() const { return fSessionTimeoutParameter; }$/;"	f	class:RTSPClient
socketNum	include/RTSPClient.hh	/^  int socketNum() const { return fInputSocketNum; }$/;"	f	class:RTSPClient
start	include/RTSPClient.hh	/^    double start() const { return fStart; }$/;"	f	class:RTSPClient::RequestRecord
subsession	include/RTSPClient.hh	/^    MediaSubsession* subsession() const { return fSubsession; }$/;"	f	class:RTSPClient::RequestRecord
url	include/RTSPClient.hh	/^  char const* url() const { return fBaseURL; }$/;"	f	class:RTSPClient
RTSP_PARAM_STRING_MAX	include/RTSPCommon.hh	39;"	d
_RTSP_COMMON_HH	include/RTSPCommon.hh	22;"	d
_strncasecmp	include/RTSPCommon.hh	33;"	d
_strncasecmp	include/RTSPCommon.hh	36;"	d
snprintf	include/RTSPCommon.hh	34;"	d
RTSPRegisterSender	include/RTSPRegisterSender.hh	/^class RTSPRegisterSender: public RTSPClient {$/;"	c
RequestRecord_REGISTER	include/RTSPRegisterSender.hh	/^  class RequestRecord_REGISTER: public RTSPClient::RequestRecord {$/;"	c	class:RTSPRegisterSender
_RTSP_REGISTER_SENDER_HH	include/RTSPRegisterSender.hh	22;"	d
fProxyURLSuffix	include/RTSPRegisterSender.hh	/^    char* fProxyURLSuffix;$/;"	m	class:RTSPRegisterSender::RequestRecord_REGISTER
fRTSPURLToRegister	include/RTSPRegisterSender.hh	/^    char* fRTSPURLToRegister;$/;"	m	class:RTSPRegisterSender::RequestRecord_REGISTER
fRemoteClientPortNum	include/RTSPRegisterSender.hh	/^  portNumBits fRemoteClientPortNum;$/;"	m	class:RTSPRegisterSender
fRequestStreamingViaTCP	include/RTSPRegisterSender.hh	/^    Boolean fReuseConnection, fRequestStreamingViaTCP;$/;"	m	class:RTSPRegisterSender::RequestRecord_REGISTER
fReuseConnection	include/RTSPRegisterSender.hh	/^    Boolean fReuseConnection, fRequestStreamingViaTCP;$/;"	m	class:RTSPRegisterSender::RequestRecord_REGISTER
proxyURLSuffix	include/RTSPRegisterSender.hh	/^    char const* proxyURLSuffix() const { return fProxyURLSuffix; }$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
requestStreamingViaTCP	include/RTSPRegisterSender.hh	/^    Boolean requestStreamingViaTCP() const { return fRequestStreamingViaTCP; }$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
reuseConnection	include/RTSPRegisterSender.hh	/^    Boolean reuseConnection() const { return fReuseConnection; }$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
rtspURLToRegister	include/RTSPRegisterSender.hh	/^    char const* rtspURLToRegister() const { return fRTSPURLToRegister; }$/;"	f	class:RTSPRegisterSender::RequestRecord_REGISTER
ParamsForREGISTER	include/RTSPServer.hh	/^    class ParamsForREGISTER {$/;"	c	class:RTSPServer::RTSPClientConnection
RTSPClientConnection	include/RTSPServer.hh	/^  class RTSPClientConnection: public GenericMediaServer::ClientConnection {$/;"	c	class:RTSPServer
RTSPClientSession	include/RTSPServer.hh	/^  class RTSPClientSession: public GenericMediaServer::ClientSession {$/;"	c	class:RTSPServer
RTSPServer	include/RTSPServer.hh	/^class RTSPServer: public GenericMediaServer {$/;"	c
RTSPServerWithREGISTERProxying	include/RTSPServer.hh	/^class RTSPServerWithREGISTERProxying: public RTSPServer {$/;"	c
_RTSP_SERVER_HH	include/RTSPServer.hh	22;"	d
disableStreamingRTPOverTCP	include/RTSPServer.hh	/^  void disableStreamingRTPOverTCP() {$/;"	f	class:RTSPServer
fAllowStreamingRTPOverTCP	include/RTSPServer.hh	/^  Boolean fAllowStreamingRTPOverTCP; \/\/ by default, True$/;"	m	class:RTSPServer
fAllowedCommandNames	include/RTSPServer.hh	/^  char* fAllowedCommandNames;$/;"	m	class:RTSPServerWithREGISTERProxying
fAuthDB	include/RTSPServer.hh	/^  UserAuthenticationDatabase* fAuthDB;$/;"	m	class:RTSPServer
fAuthDBForREGISTER	include/RTSPServer.hh	/^  UserAuthenticationDatabase* fAuthDBForREGISTER;$/;"	m	class:RTSPServerWithREGISTERProxying
fBase64RemainderCount	include/RTSPServer.hh	/^    unsigned fBase64RemainderCount; \/\/ used for optional RTSP-over-HTTP tunneling (possible values: 0,1,2,3)$/;"	m	class:RTSPServer::RTSPClientConnection
fClientConnectionsForHTTPTunneling	include/RTSPServer.hh	/^  HashTable* fClientConnectionsForHTTPTunneling; \/\/ maps client-supplied 'session cookie' strings to "RTSPClientConnection"s$/;"	m	class:RTSPServer
fClientInputSocket	include/RTSPServer.hh	/^    int& fClientInputSocket; \/\/ aliased to ::fOurSocket$/;"	m	class:RTSPServer::RTSPClientConnection
fClientOutputSocket	include/RTSPServer.hh	/^    int fClientOutputSocket;$/;"	m	class:RTSPServer::RTSPClientConnection
fCurrentAuthenticator	include/RTSPServer.hh	/^    Authenticator fCurrentAuthenticator; \/\/ used if access control is needed$/;"	m	class:RTSPServer::RTSPClientConnection
fCurrentCSeq	include/RTSPServer.hh	/^    char const* fCurrentCSeq;$/;"	m	class:RTSPServer::RTSPClientConnection
fDeliverViaTCP	include/RTSPServer.hh	/^      Boolean fReuseConnection, fDeliverViaTCP;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fHTTPServerPort	include/RTSPServer.hh	/^  Port fHTTPServerPort; \/\/ ditto$/;"	m	class:RTSPServer
fHTTPServerSocket	include/RTSPServer.hh	/^  int fHTTPServerSocket; \/\/ for optional RTSP-over-HTTP tunneling$/;"	m	class:RTSPServer
fIsActive	include/RTSPServer.hh	/^    Boolean fIsActive;$/;"	m	class:RTSPServer::RTSPClientConnection
fIsMulticast	include/RTSPServer.hh	/^    Boolean fIsMulticast, fStreamAfterSETUP;$/;"	m	class:RTSPServer::RTSPClientSession
fLastCRLF	include/RTSPServer.hh	/^    unsigned char* fLastCRLF;$/;"	m	class:RTSPServer::RTSPClientConnection
fNumStreamStates	include/RTSPServer.hh	/^    unsigned fNumStreamStates;$/;"	m	class:RTSPServer::RTSPClientSession
fOurConnection	include/RTSPServer.hh	/^      RTSPClientConnection* fOurConnection;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fOurRTSPServer	include/RTSPServer.hh	/^    RTSPServer& fOurRTSPServer; \/\/ same as ::fOurServer$/;"	m	class:RTSPServer::RTSPClientConnection
fOurRTSPServer	include/RTSPServer.hh	/^    RTSPServer& fOurRTSPServer; \/\/ same as ::fOurServer$/;"	m	class:RTSPServer::RTSPClientSession
fOurSessionCookie	include/RTSPServer.hh	/^    char* fOurSessionCookie; \/\/ used for optional RTSP-over-HTTP tunneling$/;"	m	class:RTSPServer::RTSPClientConnection
fPendingRegisterRequests	include/RTSPServer.hh	/^  HashTable* fPendingRegisterRequests;$/;"	m	class:RTSPServer
fProxyURLSuffix	include/RTSPServer.hh	/^      char* fProxyURLSuffix;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fRecursionCount	include/RTSPServer.hh	/^    unsigned fRecursionCount;$/;"	m	class:RTSPServer::RTSPClientConnection
fRegisterRequestCounter	include/RTSPServer.hh	/^  unsigned fRegisterRequestCounter;$/;"	m	class:RTSPServer
fRegisteredProxyCounter	include/RTSPServer.hh	/^  unsigned fRegisteredProxyCounter;$/;"	m	class:RTSPServerWithREGISTERProxying
fReuseConnection	include/RTSPServer.hh	/^      Boolean fReuseConnection, fDeliverViaTCP;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fStreamAfterSETUP	include/RTSPServer.hh	/^    Boolean fIsMulticast, fStreamAfterSETUP;$/;"	m	class:RTSPServer::RTSPClientSession
fStreamRTPOverTCP	include/RTSPServer.hh	/^  Boolean fStreamRTPOverTCP;$/;"	m	class:RTSPServerWithREGISTERProxying
fStreamStates	include/RTSPServer.hh	/^    } * fStreamStates;$/;"	m	class:RTSPServer::RTSPClientSession	typeref:struct:RTSPServer::RTSPClientSession::streamState
fTCPStreamIdCount	include/RTSPServer.hh	/^    unsigned char fTCPStreamIdCount; \/\/ used for (optional) RTP\/TCP$/;"	m	class:RTSPServer::RTSPClientSession
fTCPStreamingDatabase	include/RTSPServer.hh	/^  HashTable* fTCPStreamingDatabase;$/;"	m	class:RTSPServer
fURL	include/RTSPServer.hh	/^      char* fURL;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fURLSuffix	include/RTSPServer.hh	/^      char* fURLSuffix;$/;"	m	class:RTSPServer::RTSPClientConnection::ParamsForREGISTER
fVerbosityLevelForProxying	include/RTSPServer.hh	/^  int fVerbosityLevelForProxying;$/;"	m	class:RTSPServerWithREGISTERProxying
isMulticast	include/RTSPServer.hh	/^    Boolean isMulticast() const { return fIsMulticast; }$/;"	f	class:RTSPServer::RTSPClientSession
responseHandlerForREGISTER	include/RTSPServer.hh	/^  typedef void (responseHandlerForREGISTER)(RTSPServer* rtspServer, unsigned requestId, int resultCode, char* resultString);$/;"	t	class:RTSPServer
setRTSPResponse	include/RTSPServer.hh	/^    void setRTSPResponse(RTSPClientConnection* ourClientConnection, char const* responseStr) { ourClientConnection->setRTSPResponse(responseStr); }$/;"	f	class:RTSPServer::RTSPClientSession
setRTSPResponse	include/RTSPServer.hh	/^    void setRTSPResponse(RTSPClientConnection* ourClientConnection, char const* responseStr, char const* contentStr) { ourClientConnection->setRTSPResponse(responseStr, contentStr); }$/;"	f	class:RTSPServer::RTSPClientSession
setRTSPResponse	include/RTSPServer.hh	/^    void setRTSPResponse(RTSPClientConnection* ourClientConnection, char const* responseStr, u_int32_t sessionId) { ourClientConnection->setRTSPResponse(responseStr, sessionId); }$/;"	f	class:RTSPServer::RTSPClientSession
setRTSPResponse	include/RTSPServer.hh	/^    void setRTSPResponse(RTSPClientConnection* ourClientConnection, char const* responseStr, u_int32_t sessionId, char const* contentStr) { ourClientConnection->setRTSPResponse(responseStr, sessionId, contentStr); }$/;"	f	class:RTSPServer::RTSPClientSession
streamState	include/RTSPServer.hh	/^    struct streamState {$/;"	s	class:RTSPServer::RTSPClientSession
streamToken	include/RTSPServer.hh	/^      void* streamToken;$/;"	m	struct:RTSPServer::RTSPClientSession::streamState
subsession	include/RTSPServer.hh	/^      ServerMediaSubsession* subsession;$/;"	m	struct:RTSPServer::RTSPClientSession::streamState
tcpSocketNum	include/RTSPServer.hh	/^      int tcpSocketNum;$/;"	m	struct:RTSPServer::RTSPClientSession::streamState
usesTCPTransport	include/RTSPServer.hh	/^    Boolean usesTCPTransport() const { return fTCPStreamIdCount > 0; }$/;"	f	class:RTSPServer::RTSPClientSession
RTSPClientConnectionSupportingHTTPStreaming	include/RTSPServerSupportingHTTPStreaming.hh	/^  class RTSPClientConnectionSupportingHTTPStreaming: public RTSPServer::RTSPClientConnection {$/;"	c	class:RTSPServerSupportingHTTPStreaming
RTSPServerSupportingHTTPStreaming	include/RTSPServerSupportingHTTPStreaming.hh	/^class RTSPServerSupportingHTTPStreaming: public RTSPServer {$/;"	c
_RTSP_SERVER_SUPPORTING_HTTP_STREAMING_HH	include/RTSPServerSupportingHTTPStreaming.hh	22;"	d
fClientSessionId	include/RTSPServerSupportingHTTPStreaming.hh	/^    u_int32_t fClientSessionId;$/;"	m	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
fPlaylistSource	include/RTSPServerSupportingHTTPStreaming.hh	/^    ByteStreamMemoryBufferSource* fPlaylistSource;$/;"	m	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
fStreamSource	include/RTSPServerSupportingHTTPStreaming.hh	/^    FramedSource* fStreamSource;$/;"	m	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
fTCPSink	include/RTSPServerSupportingHTTPStreaming.hh	/^    TCPStreamSink* fTCPSink;$/;"	m	class:RTSPServerSupportingHTTPStreaming::RTSPClientConnectionSupportingHTTPStreaming
setHTTPPort	include/RTSPServerSupportingHTTPStreaming.hh	/^  Boolean setHTTPPort(Port httpPort) { return setUpTunnelingOverHTTP(httpPort); }$/;"	f	class:RTSPServerSupportingHTTPStreaming
Calling	include/SIPClient.hh	/^enum inviteClientState { Calling, Proceeding, Completed, Terminated };$/;"	e	enum:inviteClientState
Completed	include/SIPClient.hh	/^enum inviteClientState { Calling, Proceeding, Completed, Terminated };$/;"	e	enum:inviteClientState
Proceeding	include/SIPClient.hh	/^enum inviteClientState { Calling, Proceeding, Completed, Terminated };$/;"	e	enum:inviteClientState
SIPClient	include/SIPClient.hh	/^class SIPClient: public Medium {$/;"	c
Terminated	include/SIPClient.hh	/^enum inviteClientState { Calling, Proceeding, Completed, Terminated };$/;"	e	enum:inviteClientState
_SIP_CLIENT_HH	include/SIPClient.hh	22;"	d
fApplicationName	include/SIPClient.hh	/^  char const* fApplicationName;$/;"	m	class:SIPClient
fApplicationNameSize	include/SIPClient.hh	/^  unsigned fApplicationNameSize;$/;"	m	class:SIPClient
fCSeq	include/SIPClient.hh	/^  unsigned fCSeq; \/\/ sequence number, used in consecutive requests$/;"	m	class:SIPClient
fCallId	include/SIPClient.hh	/^  unsigned fCallId, fFromTag; \/\/ set by us$/;"	m	class:SIPClient
fClientStartPortNum	include/SIPClient.hh	/^  portNumBits fClientStartPortNum; \/\/ in host order$/;"	m	class:SIPClient
fDesiredAudioRTPPayloadFormat	include/SIPClient.hh	/^  unsigned char fDesiredAudioRTPPayloadFormat;$/;"	m	class:SIPClient
fEventLoopStopFlag	include/SIPClient.hh	/^  char fEventLoopStopFlag;$/;"	m	class:SIPClient
fFromTag	include/SIPClient.hh	/^  unsigned fCallId, fFromTag; \/\/ set by us$/;"	m	class:SIPClient
fInviteClientState	include/SIPClient.hh	/^  inviteClientState fInviteClientState;$/;"	m	class:SIPClient
fInviteCmd	include/SIPClient.hh	/^  char* fInviteCmd;$/;"	m	class:SIPClient
fInviteCmdSize	include/SIPClient.hh	/^  unsigned fInviteCmdSize;$/;"	m	class:SIPClient
fInviteSDPDescription	include/SIPClient.hh	/^  char* fInviteSDPDescription;$/;"	m	class:SIPClient
fInviteSDPDescriptionReturned	include/SIPClient.hh	/^  char* fInviteSDPDescriptionReturned;$/;"	m	class:SIPClient
fMIMESubtype	include/SIPClient.hh	/^  char* fMIMESubtype;$/;"	m	class:SIPClient
fMIMESubtypeSize	include/SIPClient.hh	/^  unsigned fMIMESubtypeSize;$/;"	m	class:SIPClient
fOurAddressStr	include/SIPClient.hh	/^  char const* fOurAddressStr;$/;"	m	class:SIPClient
fOurAddressStrSize	include/SIPClient.hh	/^  unsigned fOurAddressStrSize;$/;"	m	class:SIPClient
fOurPortNum	include/SIPClient.hh	/^  portNumBits fOurPortNum;$/;"	m	class:SIPClient
fOurSocket	include/SIPClient.hh	/^  Groupsock* fOurSocket;$/;"	m	class:SIPClient
fServerAddress	include/SIPClient.hh	/^  struct in_addr fServerAddress;$/;"	m	class:SIPClient	typeref:struct:SIPClient::in_addr
fServerPortNum	include/SIPClient.hh	/^  portNumBits fServerPortNum; \/\/ in host order$/;"	m	class:SIPClient
fT1	include/SIPClient.hh	/^  unsigned const fT1; \/\/ in microseconds$/;"	m	class:SIPClient
fTimerA	include/SIPClient.hh	/^  TaskToken fTimerA, fTimerB, fTimerD;$/;"	m	class:SIPClient
fTimerACount	include/SIPClient.hh	/^  unsigned fTimerACount;$/;"	m	class:SIPClient
fTimerALen	include/SIPClient.hh	/^  unsigned fTimerALen; \/\/ in microseconds; initially fT1, then doubles$/;"	m	class:SIPClient
fTimerB	include/SIPClient.hh	/^  TaskToken fTimerA, fTimerB, fTimerD;$/;"	m	class:SIPClient
fTimerD	include/SIPClient.hh	/^  TaskToken fTimerA, fTimerB, fTimerD;$/;"	m	class:SIPClient
fToTagStr	include/SIPClient.hh	/^  char const* fToTagStr; \/\/ set by the responder$/;"	m	class:SIPClient
fToTagStrSize	include/SIPClient.hh	/^  unsigned fToTagStrSize;$/;"	m	class:SIPClient
fURL	include/SIPClient.hh	/^  char const* fURL;$/;"	m	class:SIPClient
fURLSize	include/SIPClient.hh	/^  unsigned fURLSize;$/;"	m	class:SIPClient
fUserAgentHeaderStr	include/SIPClient.hh	/^  char* fUserAgentHeaderStr;$/;"	m	class:SIPClient
fUserAgentHeaderStrLen	include/SIPClient.hh	/^  unsigned fUserAgentHeaderStrLen;$/;"	m	class:SIPClient
fUserName	include/SIPClient.hh	/^  char const* fUserName; \/\/ 'user' name used in "From:" & "Contact:" lines$/;"	m	class:SIPClient
fUserNameSize	include/SIPClient.hh	/^  unsigned fUserNameSize;$/;"	m	class:SIPClient
fValidAuthenticator	include/SIPClient.hh	/^  Authenticator fValidAuthenticator;$/;"	m	class:SIPClient
fVerbosityLevel	include/SIPClient.hh	/^  int fVerbosityLevel;$/;"	m	class:SIPClient
fWorkingAuthenticator	include/SIPClient.hh	/^  Authenticator* fWorkingAuthenticator;$/;"	m	class:SIPClient
getInviteSdpReply	include/SIPClient.hh	/^  char const* getInviteSdpReply() const { return fInviteSDPDescriptionReturned; }$/;"	f	class:SIPClient
inviteClientState	include/SIPClient.hh	/^enum inviteClientState { Calling, Proceeding, Completed, Terminated };$/;"	g
setClientStartPortNum	include/SIPClient.hh	/^  void setClientStartPortNum(portNumBits clientStartPortNum) {$/;"	f	class:SIPClient
ServerMediaSession	include/ServerMediaSession.hh	/^class ServerMediaSession: public Medium {$/;"	c
ServerMediaSubsession	include/ServerMediaSession.hh	/^class ServerMediaSubsession: public Medium {$/;"	c
ServerMediaSubsessionIterator	include/ServerMediaSession.hh	/^class ServerMediaSubsessionIterator {$/;"	c
_SERVER_MEDIA_SESSION_HH	include/ServerMediaSession.hh	25;"	d
decrementReferenceCount	include/ServerMediaSession.hh	/^  void decrementReferenceCount() { if (fReferenceCount > 0) --fReferenceCount; }$/;"	f	class:ServerMediaSession
deleteWhenUnreferenced	include/ServerMediaSession.hh	/^  Boolean& deleteWhenUnreferenced() { return fDeleteWhenUnreferenced; }$/;"	f	class:ServerMediaSession
fCreationTime	include/ServerMediaSession.hh	/^  struct timeval fCreationTime;$/;"	m	class:ServerMediaSession	typeref:struct:ServerMediaSession::timeval
fDeleteWhenUnreferenced	include/ServerMediaSession.hh	/^  Boolean fDeleteWhenUnreferenced;$/;"	m	class:ServerMediaSession
fDescriptionSDPString	include/ServerMediaSession.hh	/^  char* fDescriptionSDPString;$/;"	m	class:ServerMediaSession
fInfoSDPString	include/ServerMediaSession.hh	/^  char* fInfoSDPString;$/;"	m	class:ServerMediaSession
fIsSSM	include/ServerMediaSession.hh	/^  Boolean fIsSSM;$/;"	m	class:ServerMediaSession
fMiscSDPLines	include/ServerMediaSession.hh	/^  char* fMiscSDPLines;$/;"	m	class:ServerMediaSession
fNext	include/ServerMediaSession.hh	/^  ServerMediaSubsession* fNext;$/;"	m	class:ServerMediaSubsession
fNextPtr	include/ServerMediaSession.hh	/^  ServerMediaSubsession* fNextPtr;$/;"	m	class:ServerMediaSubsessionIterator
fOurSession	include/ServerMediaSession.hh	/^  ServerMediaSession& fOurSession;$/;"	m	class:ServerMediaSubsessionIterator
fParentSession	include/ServerMediaSession.hh	/^  ServerMediaSession* fParentSession;$/;"	m	class:ServerMediaSubsession
fPortNumForSDP	include/ServerMediaSession.hh	/^  portNumBits fPortNumForSDP;$/;"	m	class:ServerMediaSubsession
fReferenceCount	include/ServerMediaSession.hh	/^  unsigned fReferenceCount;$/;"	m	class:ServerMediaSession
fServerAddressForSDP	include/ServerMediaSession.hh	/^  netAddressBits fServerAddressForSDP;$/;"	m	class:ServerMediaSubsession
fStreamName	include/ServerMediaSession.hh	/^  char* fStreamName;$/;"	m	class:ServerMediaSession
fSubsessionCounter	include/ServerMediaSession.hh	/^  unsigned fSubsessionCounter;$/;"	m	class:ServerMediaSession
fSubsessionsHead	include/ServerMediaSession.hh	/^  ServerMediaSubsession* fSubsessionsHead;$/;"	m	class:ServerMediaSession
fSubsessionsTail	include/ServerMediaSession.hh	/^  ServerMediaSubsession* fSubsessionsTail;$/;"	m	class:ServerMediaSession
fTrackId	include/ServerMediaSession.hh	/^  char const* fTrackId;$/;"	m	class:ServerMediaSubsession
fTrackNumber	include/ServerMediaSession.hh	/^  unsigned fTrackNumber; \/\/ within an enclosing ServerMediaSession$/;"	m	class:ServerMediaSubsession
incrementReferenceCount	include/ServerMediaSession.hh	/^  void incrementReferenceCount() { ++fReferenceCount; }$/;"	f	class:ServerMediaSession
numSubsessions	include/ServerMediaSession.hh	/^  unsigned numSubsessions() const { return fSubsessionCounter; }$/;"	f	class:ServerMediaSession
referenceCount	include/ServerMediaSession.hh	/^  unsigned referenceCount() const { return fReferenceCount; }$/;"	f	class:ServerMediaSession
streamName	include/ServerMediaSession.hh	/^  char const* streamName() const { return fStreamName; }$/;"	f	class:ServerMediaSession
trackNumber	include/ServerMediaSession.hh	/^  unsigned trackNumber() const { return fTrackNumber; }$/;"	f	class:ServerMediaSubsession
SimpleRTPSink	include/SimpleRTPSink.hh	/^class SimpleRTPSink: public MultiFramedRTPSink {$/;"	c
_SIMPLE_RTP_SINK_HH	include/SimpleRTPSink.hh	23;"	d
fAllowMultipleFramesPerPacket	include/SimpleRTPSink.hh	/^  Boolean fAllowMultipleFramesPerPacket;$/;"	m	class:SimpleRTPSink
fSDPMediaTypeString	include/SimpleRTPSink.hh	/^  char const* fSDPMediaTypeString;$/;"	m	class:SimpleRTPSink
fSetMBitOnLastFrames	include/SimpleRTPSink.hh	/^  Boolean fSetMBitOnLastFrames, fSetMBitOnNextPacket;$/;"	m	class:SimpleRTPSink
fSetMBitOnNextPacket	include/SimpleRTPSink.hh	/^  Boolean fSetMBitOnLastFrames, fSetMBitOnNextPacket;$/;"	m	class:SimpleRTPSink
setMBitOnNextPacket	include/SimpleRTPSink.hh	/^  void setMBitOnNextPacket() { fSetMBitOnNextPacket = True; } \/\/ hack for optionally setting the RTP 'M' bit from outside the class$/;"	f	class:SimpleRTPSink
SimpleRTPSource	include/SimpleRTPSource.hh	/^class SimpleRTPSource: public MultiFramedRTPSource {$/;"	c
_SIMPLE_RTP_SOURCE_HH	include/SimpleRTPSource.hh	26;"	d
fMIMEtypeString	include/SimpleRTPSource.hh	/^  char const* fMIMEtypeString;$/;"	m	class:SimpleRTPSource
fOffset	include/SimpleRTPSource.hh	/^  unsigned fOffset;$/;"	m	class:SimpleRTPSource
fUseMBitForFrameEnd	include/SimpleRTPSource.hh	/^  Boolean fUseMBitForFrameEnd;$/;"	m	class:SimpleRTPSource
StreamReplicator	include/StreamReplicator.hh	/^class StreamReplicator: public Medium {$/;"	c
_STREAM_REPLICATOR_HH	include/StreamReplicator.hh	22;"	d
detachInputSource	include/StreamReplicator.hh	/^  void detachInputSource() { fInputSource = NULL; }$/;"	f	class:StreamReplicator
fDeleteWhenLastReplicaDies	include/StreamReplicator.hh	/^  Boolean fDeleteWhenLastReplicaDies, fInputSourceHasClosed; $/;"	m	class:StreamReplicator
fFrameIndex	include/StreamReplicator.hh	/^  int fFrameIndex; \/\/ 0 or 1; used to figure out if a replica is requesting the current frame, or the next frame$/;"	m	class:StreamReplicator
fInputSource	include/StreamReplicator.hh	/^  FramedSource* fInputSource;$/;"	m	class:StreamReplicator
fInputSourceHasClosed	include/StreamReplicator.hh	/^  Boolean fDeleteWhenLastReplicaDies, fInputSourceHasClosed; $/;"	m	class:StreamReplicator
fMasterReplica	include/StreamReplicator.hh	/^  StreamReplica* fMasterReplica; \/\/ the first replica that requests each frame.  We use its buffer when copying to the others.$/;"	m	class:StreamReplicator
fNumActiveReplicas	include/StreamReplicator.hh	/^  unsigned fNumReplicas, fNumActiveReplicas, fNumDeliveriesMadeSoFar;$/;"	m	class:StreamReplicator
fNumDeliveriesMadeSoFar	include/StreamReplicator.hh	/^  unsigned fNumReplicas, fNumActiveReplicas, fNumDeliveriesMadeSoFar;$/;"	m	class:StreamReplicator
fNumReplicas	include/StreamReplicator.hh	/^  unsigned fNumReplicas, fNumActiveReplicas, fNumDeliveriesMadeSoFar;$/;"	m	class:StreamReplicator
fReplicasAwaitingCurrentFrame	include/StreamReplicator.hh	/^  StreamReplica* fReplicasAwaitingCurrentFrame; \/\/ other than the 'master' replica$/;"	m	class:StreamReplicator
fReplicasAwaitingNextFrame	include/StreamReplicator.hh	/^  StreamReplica* fReplicasAwaitingNextFrame; \/\/ replicas that have already received the current frame, and have asked for the next$/;"	m	class:StreamReplicator
inputSource	include/StreamReplicator.hh	/^  FramedSource* inputSource() const { return fInputSource; }$/;"	f	class:StreamReplicator
numReplicas	include/StreamReplicator.hh	/^  unsigned numReplicas() const { return fNumReplicas; }$/;"	f	class:StreamReplicator
T140IdleFilter	include/T140TextRTPSink.hh	/^class T140IdleFilter: public FramedFilter {$/;"	c
T140TextRTPSink	include/T140TextRTPSink.hh	/^class T140TextRTPSink: public TextRTPSink {$/;"	c
_T140_TEXT_RTP_SINK_HH	include/T140TextRTPSink.hh	22;"	d
fAreInIdlePeriod	include/T140TextRTPSink.hh	/^  Boolean fAreInIdlePeriod;$/;"	m	class:T140TextRTPSink
fBuffer	include/T140TextRTPSink.hh	/^  char* fBuffer;$/;"	m	class:T140IdleFilter
fBufferSize	include/T140TextRTPSink.hh	/^  unsigned fBufferSize, fNumBufferedBytes;$/;"	m	class:T140IdleFilter
fBufferedDataDurationInMicroseconds	include/T140TextRTPSink.hh	/^  unsigned fBufferedDataDurationInMicroseconds;$/;"	m	class:T140IdleFilter
fBufferedDataPresentationTime	include/T140TextRTPSink.hh	/^  struct timeval fBufferedDataPresentationTime;$/;"	m	class:T140IdleFilter	typeref:struct:T140IdleFilter::timeval
fBufferedNumTruncatedBytes	include/T140TextRTPSink.hh	/^  unsigned fBufferedNumTruncatedBytes; \/\/ a count of truncated bytes from the upstream$/;"	m	class:T140IdleFilter
fIdleTimerTask	include/T140TextRTPSink.hh	/^  TaskToken fIdleTimerTask;$/;"	m	class:T140IdleFilter
fNumBufferedBytes	include/T140TextRTPSink.hh	/^  unsigned fBufferSize, fNumBufferedBytes;$/;"	m	class:T140IdleFilter
fOurIdleFilter	include/T140TextRTPSink.hh	/^  T140IdleFilter* fOurIdleFilter;$/;"	m	class:T140TextRTPSink
TCPStreamSink	include/TCPStreamSink.hh	/^class TCPStreamSink: public MediaSink {$/;"	c
TCP_STREAM_SINK_BUFFER_SIZE	include/TCPStreamSink.hh	28;"	d
_TCP_STREAM_SINK_HH	include/TCPStreamSink.hh	22;"	d
fBuffer	include/TCPStreamSink.hh	/^  unsigned char fBuffer[TCP_STREAM_SINK_BUFFER_SIZE];$/;"	m	class:TCPStreamSink
fInputSourceIsOpen	include/TCPStreamSink.hh	/^  Boolean fInputSourceIsOpen, fOutputSocketIsWritable;$/;"	m	class:TCPStreamSink
fOutputSocketIsWritable	include/TCPStreamSink.hh	/^  Boolean fInputSourceIsOpen, fOutputSocketIsWritable;$/;"	m	class:TCPStreamSink
fOutputSocketNum	include/TCPStreamSink.hh	/^  int fOutputSocketNum;$/;"	m	class:TCPStreamSink
fUnwrittenBytesEnd	include/TCPStreamSink.hh	/^  unsigned fUnwrittenBytesStart, fUnwrittenBytesEnd;$/;"	m	class:TCPStreamSink
fUnwrittenBytesStart	include/TCPStreamSink.hh	/^  unsigned fUnwrittenBytesStart, fUnwrittenBytesEnd;$/;"	m	class:TCPStreamSink
freeBufferSpace	include/TCPStreamSink.hh	/^  unsigned freeBufferSpace() const { return TCP_STREAM_SINK_BUFFER_SIZE - fUnwrittenBytesEnd; }$/;"	f	class:TCPStreamSink
numUnwrittenBytes	include/TCPStreamSink.hh	/^  unsigned numUnwrittenBytes() const { return fUnwrittenBytesEnd - fUnwrittenBytesStart; }$/;"	f	class:TCPStreamSink
TextRTPSink	include/TextRTPSink.hh	/^class TextRTPSink: public MultiFramedRTPSink {$/;"	c
_TEXT_RTP_SINK_HH	include/TextRTPSink.hh	22;"	d
TheoraVideoRTPSink	include/TheoraVideoRTPSink.hh	/^class TheoraVideoRTPSink: public VideoRTPSink {$/;"	c
_THEORA_VIDEO_RTP_SINK_HH	include/TheoraVideoRTPSink.hh	22;"	d
fFmtpSDPLine	include/TheoraVideoRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:TheoraVideoRTPSink
fIdent	include/TheoraVideoRTPSink.hh	/^  u_int32_t fIdent; \/\/ "Ident" field used by this stream.  (Only the low 24 bits of this are used.)$/;"	m	class:TheoraVideoRTPSink
TheoraVideoRTPSource	include/TheoraVideoRTPSource.hh	/^class TheoraVideoRTPSource: public MultiFramedRTPSource {$/;"	c
_THEORA_VIDEO_RTP_SOURCE_HH	include/TheoraVideoRTPSource.hh	22;"	d
curPacketIdent	include/TheoraVideoRTPSource.hh	/^  u_int32_t curPacketIdent() const { return fCurPacketIdent; } \/\/ The current "Ident" field; only the low-order 24 bits are used$/;"	f	class:TheoraVideoRTPSource
fCurPacketIdent	include/TheoraVideoRTPSource.hh	/^  u_int32_t fCurPacketIdent; \/\/ only the low-order 24 bits are used$/;"	m	class:TheoraVideoRTPSource
VP8VideoRTPSink	include/VP8VideoRTPSink.hh	/^class VP8VideoRTPSink: public VideoRTPSink {$/;"	c
_VP8_VIDEO_RTP_SINK_HH	include/VP8VideoRTPSink.hh	22;"	d
VP8VideoRTPSource	include/VP8VideoRTPSource.hh	/^class VP8VideoRTPSource: public MultiFramedRTPSource {$/;"	c
_VP8_VIDEO_RTP_SOURCE_HH	include/VP8VideoRTPSource.hh	22;"	d
VP9VideoRTPSink	include/VP9VideoRTPSink.hh	/^class VP9VideoRTPSink: public VideoRTPSink {$/;"	c
_VP9_VIDEO_RTP_SINK_HH	include/VP9VideoRTPSink.hh	22;"	d
VP9VideoRTPSource	include/VP9VideoRTPSource.hh	/^class VP9VideoRTPSource: public MultiFramedRTPSource {$/;"	c
_VP9_VIDEO_RTP_SOURCE_HH	include/VP9VideoRTPSource.hh	22;"	d
VideoRTPSink	include/VideoRTPSink.hh	/^class VideoRTPSink: public MultiFramedRTPSink {$/;"	c
_VIDEO_RTP_SINK_HH	include/VideoRTPSink.hh	22;"	d
VorbisAudioRTPSink	include/VorbisAudioRTPSink.hh	/^class VorbisAudioRTPSink: public AudioRTPSink {$/;"	c
_VORBIS_AUDIO_RTP_SINK_HH	include/VorbisAudioRTPSink.hh	22;"	d
fFmtpSDPLine	include/VorbisAudioRTPSink.hh	/^  char* fFmtpSDPLine;$/;"	m	class:VorbisAudioRTPSink
fIdent	include/VorbisAudioRTPSink.hh	/^  u_int32_t fIdent; \/\/ "Ident" field used by this stream.  (Only the low 24 bits of this are used.)$/;"	m	class:VorbisAudioRTPSink
VorbisAudioRTPSource	include/VorbisAudioRTPSource.hh	/^class VorbisAudioRTPSource: public MultiFramedRTPSource {$/;"	c
_VORBIS_AUDIO_RTP_SOURCE_HH	include/VorbisAudioRTPSource.hh	22;"	d
curPacketIdent	include/VorbisAudioRTPSource.hh	/^  u_int32_t curPacketIdent() const { return fCurPacketIdent; } \/\/ The current "Ident" field; only the low-order 24 bits are used$/;"	f	class:VorbisAudioRTPSource
fCurPacketIdent	include/VorbisAudioRTPSource.hh	/^  u_int32_t fCurPacketIdent; \/\/ only the low-order 24 bits are used$/;"	m	class:VorbisAudioRTPSource
WAVAudioFileServerMediaSubsession	include/WAVAudioFileServerMediaSubsession.hh	/^class WAVAudioFileServerMediaSubsession: public FileServerMediaSubsession{$/;"	c
_WAV_AUDIO_FILE_SERVER_MEDIA_SUBSESSION_HH	include/WAVAudioFileServerMediaSubsession.hh	23;"	d
fAudioFormat	include/WAVAudioFileServerMediaSubsession.hh	/^  unsigned char fAudioFormat;$/;"	m	class:WAVAudioFileServerMediaSubsession
fBitsPerSample	include/WAVAudioFileServerMediaSubsession.hh	/^  unsigned char fBitsPerSample;$/;"	m	class:WAVAudioFileServerMediaSubsession
fConvertToULaw	include/WAVAudioFileServerMediaSubsession.hh	/^  Boolean fConvertToULaw;$/;"	m	class:WAVAudioFileServerMediaSubsession
fFileDuration	include/WAVAudioFileServerMediaSubsession.hh	/^  float fFileDuration;$/;"	m	class:WAVAudioFileServerMediaSubsession
fNumChannels	include/WAVAudioFileServerMediaSubsession.hh	/^  unsigned fNumChannels;$/;"	m	class:WAVAudioFileServerMediaSubsession
fSamplingFrequency	include/WAVAudioFileServerMediaSubsession.hh	/^  unsigned fSamplingFrequency;$/;"	m	class:WAVAudioFileServerMediaSubsession
WAVAudioFileSource	include/WAVAudioFileSource.hh	/^class WAVAudioFileSource: public AudioInputDevice {$/;"	c
WAV_AUDIO_FORMAT	include/WAVAudioFileSource.hh	/^} WAV_AUDIO_FORMAT;$/;"	t	typeref:enum:__anon11
WA_IMA_ADPCM	include/WAVAudioFileSource.hh	/^  WA_IMA_ADPCM = 0x11,$/;"	e	enum:__anon11
WA_PCM	include/WAVAudioFileSource.hh	/^  WA_PCM = 0x01,$/;"	e	enum:__anon11
WA_PCMA	include/WAVAudioFileSource.hh	/^  WA_PCMA = 0x06,$/;"	e	enum:__anon11
WA_PCMU	include/WAVAudioFileSource.hh	/^  WA_PCMU = 0x07,$/;"	e	enum:__anon11
WA_UNKNOWN	include/WAVAudioFileSource.hh	/^  WA_UNKNOWN$/;"	e	enum:__anon11
_WAV_AUDIO_FILE_SOURCE_HH	include/WAVAudioFileSource.hh	24;"	d
fAudioFormat	include/WAVAudioFileSource.hh	/^  unsigned char fAudioFormat;$/;"	m	class:WAVAudioFileSource
fFid	include/WAVAudioFileSource.hh	/^  FILE* fFid;$/;"	m	class:WAVAudioFileSource
fFidIsSeekable	include/WAVAudioFileSource.hh	/^  Boolean fFidIsSeekable;$/;"	m	class:WAVAudioFileSource
fFileSize	include/WAVAudioFileSource.hh	/^  unsigned fFileSize;$/;"	m	class:WAVAudioFileSource
fHaveStartedReading	include/WAVAudioFileSource.hh	/^  Boolean fHaveStartedReading;$/;"	m	class:WAVAudioFileSource
fLastPlayTime	include/WAVAudioFileSource.hh	/^  unsigned fLastPlayTime; \/\/ useconds$/;"	m	class:WAVAudioFileSource
fLimitNumBytesToStream	include/WAVAudioFileSource.hh	/^  Boolean fLimitNumBytesToStream;$/;"	m	class:WAVAudioFileSource
fNumBytesToStream	include/WAVAudioFileSource.hh	/^  unsigned fNumBytesToStream; \/\/ used iff "fLimitNumBytesToStream" is True$/;"	m	class:WAVAudioFileSource
fPlayTimePerSample	include/WAVAudioFileSource.hh	/^  double fPlayTimePerSample; \/\/ useconds$/;"	m	class:WAVAudioFileSource
fPreferredFrameSize	include/WAVAudioFileSource.hh	/^  unsigned fPreferredFrameSize;$/;"	m	class:WAVAudioFileSource
fScaleFactor	include/WAVAudioFileSource.hh	/^  int fScaleFactor;$/;"	m	class:WAVAudioFileSource
fWAVHeaderSize	include/WAVAudioFileSource.hh	/^  unsigned fWAVHeaderSize;$/;"	m	class:WAVAudioFileSource
_LIVEMEDIA_HH	include/liveMedia.hh	25;"	d
LIVEMEDIA_LIBRARY_VERSION_INT	include/liveMedia_version.hh	8;"	d
LIVEMEDIA_LIBRARY_VERSION_STRING	include/liveMedia_version.hh	7;"	d
_LIVEMEDIA_VERSION_HH	include/liveMedia_version.hh	5;"	d
_OUR_MD5_HH	include/ourMD5.hh	23;"	d
EndianSwap16	include/uLawAudioFilter.hh	/^class EndianSwap16: public FramedFilter {$/;"	c
EndianSwap24	include/uLawAudioFilter.hh	/^class EndianSwap24: public FramedFilter {$/;"	c
HostFromNetworkOrder16	include/uLawAudioFilter.hh	/^class HostFromNetworkOrder16: public FramedFilter {$/;"	c
NetworkFromHostOrder16	include/uLawAudioFilter.hh	/^class NetworkFromHostOrder16: public FramedFilter {$/;"	c
PCMFromuLawAudioSource	include/uLawAudioFilter.hh	/^class PCMFromuLawAudioSource: public FramedFilter {$/;"	c
_ULAW_AUDIO_FILTER_HH	include/uLawAudioFilter.hh	22;"	d
fByteOrdering	include/uLawAudioFilter.hh	/^  int fByteOrdering;$/;"	m	class:uLawFromPCMAudioSource
fInputBuffer	include/uLawAudioFilter.hh	/^  unsigned char* fInputBuffer;$/;"	m	class:PCMFromuLawAudioSource
fInputBuffer	include/uLawAudioFilter.hh	/^  unsigned char* fInputBuffer;$/;"	m	class:uLawFromPCMAudioSource
fInputBufferSize	include/uLawAudioFilter.hh	/^  unsigned fInputBufferSize;$/;"	m	class:PCMFromuLawAudioSource
fInputBufferSize	include/uLawAudioFilter.hh	/^  unsigned fInputBufferSize;$/;"	m	class:uLawFromPCMAudioSource
uLawFromPCMAudioSource	include/uLawAudioFilter.hh	/^class uLawFromPCMAudioSource: public FramedFilter {$/;"	c
DIGEST_SIZE_AS_STRING	ourMD5.cpp	28;"	d	file:
DIGEST_SIZE_IN_BYTES	ourMD5.cpp	26;"	d	file:
DIGEST_SIZE_IN_HEX_DIGITS	ourMD5.cpp	27;"	d	file:
F	ourMD5.cpp	208;"	d	file:
FF	ourMD5.cpp	217;"	d	file:
G	ourMD5.cpp	209;"	d	file:
GG	ourMD5.cpp	222;"	d	file:
H	ourMD5.cpp	210;"	d	file:
HH	ourMD5.cpp	227;"	d	file:
I	ourMD5.cpp	211;"	d	file:
II	ourMD5.cpp	232;"	d	file:
MD5Context	ourMD5.cpp	/^MD5Context::MD5Context()$/;"	f	class:MD5Context
MD5Context	ourMD5.cpp	/^class MD5Context {$/;"	c	file:
PADDING	ourMD5.cpp	/^static unsigned char const PADDING[64] = {$/;"	v	file:
ROTATE_LEFT	ourMD5.cpp	214;"	d	file:
S11	ourMD5.cpp	190;"	d	file:
S12	ourMD5.cpp	191;"	d	file:
S13	ourMD5.cpp	192;"	d	file:
S14	ourMD5.cpp	193;"	d	file:
S21	ourMD5.cpp	194;"	d	file:
S22	ourMD5.cpp	195;"	d	file:
S23	ourMD5.cpp	196;"	d	file:
S24	ourMD5.cpp	197;"	d	file:
S31	ourMD5.cpp	198;"	d	file:
S32	ourMD5.cpp	199;"	d	file:
S33	ourMD5.cpp	200;"	d	file:
S34	ourMD5.cpp	201;"	d	file:
S41	ourMD5.cpp	202;"	d	file:
S42	ourMD5.cpp	203;"	d	file:
S43	ourMD5.cpp	204;"	d	file:
S44	ourMD5.cpp	205;"	d	file:
addData	ourMD5.cpp	/^void MD5Context::addData(unsigned char const* inputData, unsigned inputDataSize) {$/;"	f	class:MD5Context
end	ourMD5.cpp	/^void MD5Context::end(char* outputDigest) {$/;"	f	class:MD5Context
fBitCount	ourMD5.cpp	/^  u_int64_t fBitCount; \/\/ number of bits, modulo 2^64$/;"	m	class:MD5Context	file:
fState	ourMD5.cpp	/^  u_int32_t fState[4]; \/\/ ABCD$/;"	m	class:MD5Context	file:
fWorkingBuffer	ourMD5.cpp	/^  unsigned char fWorkingBuffer[64];$/;"	m	class:MD5Context	file:
finalize	ourMD5.cpp	/^void MD5Context::finalize(unsigned char* outputDigestInBytes) {$/;"	f	class:MD5Context
our_MD5Data	ourMD5.cpp	/^char* our_MD5Data(unsigned char const* data, unsigned dataSize, char* outputDigest) {$/;"	f
our_MD5DataRaw	ourMD5.cpp	/^unsigned char* our_MD5DataRaw(unsigned char const* data, unsigned dataSize,$/;"	f
transform64Bytes	ourMD5.cpp	/^void MD5Context::transform64Bytes(unsigned char const block[64]) {$/;"	f	class:MD5Context
unpack32	ourMD5.cpp	/^static void unpack32(unsigned char out[4], u_int32_t in) {$/;"	f	file:
unpack64	ourMD5.cpp	/^static void unpack64(unsigned char out[8], u_int64_t in) {$/;"	f	file:
zeroize	ourMD5.cpp	/^void MD5Context::zeroize() {$/;"	f	class:MD5Context
~MD5Context	ourMD5.cpp	/^MD5Context::~MD5Context() {$/;"	f	class:MD5Context
OnExpire	rtcp_from_spec.c	/^   void OnExpire(event e,$/;"	f
OnReceive	rtcp_from_spec.c	/^   void OnReceive(packet p,$/;"	f
rtcp_interval	rtcp_from_spec.c	/^   double rtcp_interval(int members,$/;"	f
EVENT_BYE	rtcp_from_spec.h	31;"	d
EVENT_REPORT	rtcp_from_spec.h	30;"	d
EVENT_UNKNOWN	rtcp_from_spec.h	29;"	d
EXTERN	rtcp_from_spec.h	21;"	d
EXTERN	rtcp_from_spec.h	23;"	d
FALSE	rtcp_from_spec.h	52;"	d
PACKET_BYE	rtcp_from_spec.h	42;"	d
PACKET_RTCP_APP	rtcp_from_spec.h	43;"	d
PACKET_RTCP_REPORT	rtcp_from_spec.h	41;"	d
PACKET_RTP	rtcp_from_spec.h	40;"	d
PACKET_UNKNOWN_TYPE	rtcp_from_spec.h	39;"	d
TRUE	rtcp_from_spec.h	55;"	d
_ANSI_ARGS_	rtcp_from_spec.h	14;"	d
_ANSI_ARGS_	rtcp_from_spec.h	16;"	d
_ANSI_ARGS_	rtcp_from_spec.h	18;"	d
_RTCP_FROM_SPEC_H	rtcp_from_spec.h	7;"	d
drand48	rtcp_from_spec.h	46;"	d
event	rtcp_from_spec.h	/^typedef void* event;$/;"	t
exit	rtcp_from_spec.h	49;"	d
packet	rtcp_from_spec.h	/^typedef void* packet;$/;"	t
time_tp	rtcp_from_spec.h	/^typedef double time_tp;$/;"	t
BIAS	uLawAudioFilter.cpp	71;"	d	file:
CLIP	uLawAudioFilter.cpp	72;"	d	file:
EndianSwap16	uLawAudioFilter.cpp	/^EndianSwap16::EndianSwap16(UsageEnvironment& env,$/;"	f	class:EndianSwap16
EndianSwap24	uLawAudioFilter.cpp	/^EndianSwap24::EndianSwap24(UsageEnvironment& env,$/;"	f	class:EndianSwap24
HostFromNetworkOrder16	uLawAudioFilter.cpp	/^::HostFromNetworkOrder16(UsageEnvironment& env,$/;"	f	class:HostFromNetworkOrder16
NetworkFromHostOrder16	uLawAudioFilter.cpp	/^::NetworkFromHostOrder16(UsageEnvironment& env,$/;"	f	class:NetworkFromHostOrder16
PCMFromuLawAudioSource	uLawAudioFilter.cpp	/^::PCMFromuLawAudioSource(UsageEnvironment& env,$/;"	f	class:PCMFromuLawAudioSource
afterGettingFrame	uLawAudioFilter.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:HostFromNetworkOrder16
afterGettingFrame	uLawAudioFilter.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:NetworkFromHostOrder16
afterGettingFrame	uLawAudioFilter.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:PCMFromuLawAudioSource
afterGettingFrame	uLawAudioFilter.cpp	/^::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:uLawFromPCMAudioSource
afterGettingFrame	uLawAudioFilter.cpp	/^void EndianSwap16::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:EndianSwap16
afterGettingFrame	uLawAudioFilter.cpp	/^void EndianSwap24::afterGettingFrame(void* clientData, unsigned frameSize,$/;"	f	class:EndianSwap24
afterGettingFrame1	uLawAudioFilter.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:HostFromNetworkOrder16
afterGettingFrame1	uLawAudioFilter.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:NetworkFromHostOrder16
afterGettingFrame1	uLawAudioFilter.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:PCMFromuLawAudioSource
afterGettingFrame1	uLawAudioFilter.cpp	/^::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:uLawFromPCMAudioSource
afterGettingFrame1	uLawAudioFilter.cpp	/^void EndianSwap16::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:EndianSwap16
afterGettingFrame1	uLawAudioFilter.cpp	/^void EndianSwap24::afterGettingFrame1(unsigned frameSize, unsigned numTruncatedBytes,$/;"	f	class:EndianSwap24
createNew	uLawAudioFilter.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:HostFromNetworkOrder16
createNew	uLawAudioFilter.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:NetworkFromHostOrder16
createNew	uLawAudioFilter.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:PCMFromuLawAudioSource
createNew	uLawAudioFilter.cpp	/^::createNew(UsageEnvironment& env, FramedSource* inputSource, int byteOrdering) {$/;"	f	class:uLawFromPCMAudioSource
createNew	uLawAudioFilter.cpp	/^EndianSwap16::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:EndianSwap16
createNew	uLawAudioFilter.cpp	/^EndianSwap24::createNew(UsageEnvironment& env, FramedSource* inputSource) {$/;"	f	class:EndianSwap24
doGetNextFrame	uLawAudioFilter.cpp	/^void EndianSwap16::doGetNextFrame() {$/;"	f	class:EndianSwap16
doGetNextFrame	uLawAudioFilter.cpp	/^void EndianSwap24::doGetNextFrame() {$/;"	f	class:EndianSwap24
doGetNextFrame	uLawAudioFilter.cpp	/^void HostFromNetworkOrder16::doGetNextFrame() {$/;"	f	class:HostFromNetworkOrder16
doGetNextFrame	uLawAudioFilter.cpp	/^void NetworkFromHostOrder16::doGetNextFrame() {$/;"	f	class:NetworkFromHostOrder16
doGetNextFrame	uLawAudioFilter.cpp	/^void PCMFromuLawAudioSource::doGetNextFrame() {$/;"	f	class:PCMFromuLawAudioSource
doGetNextFrame	uLawAudioFilter.cpp	/^void uLawFromPCMAudioSource::doGetNextFrame() {$/;"	f	class:uLawFromPCMAudioSource
linear16FromuLaw	uLawAudioFilter.cpp	/^static u_int16_t linear16FromuLaw(unsigned char uLawByte) {$/;"	f	file:
uLawFrom16BitLinear	uLawAudioFilter.cpp	/^static unsigned char uLawFrom16BitLinear(u_int16_t sample) {$/;"	f	file:
uLawFromPCMAudioSource	uLawAudioFilter.cpp	/^::uLawFromPCMAudioSource(UsageEnvironment& env, FramedSource* inputSource,$/;"	f	class:uLawFromPCMAudioSource
~EndianSwap16	uLawAudioFilter.cpp	/^EndianSwap16::~EndianSwap16() {$/;"	f	class:EndianSwap16
~EndianSwap24	uLawAudioFilter.cpp	/^EndianSwap24::~EndianSwap24() {$/;"	f	class:EndianSwap24
~HostFromNetworkOrder16	uLawAudioFilter.cpp	/^HostFromNetworkOrder16::~HostFromNetworkOrder16() {$/;"	f	class:HostFromNetworkOrder16
~NetworkFromHostOrder16	uLawAudioFilter.cpp	/^NetworkFromHostOrder16::~NetworkFromHostOrder16() {$/;"	f	class:NetworkFromHostOrder16
~PCMFromuLawAudioSource	uLawAudioFilter.cpp	/^PCMFromuLawAudioSource::~PCMFromuLawAudioSource() {$/;"	f	class:PCMFromuLawAudioSource
~uLawFromPCMAudioSource	uLawAudioFilter.cpp	/^uLawFromPCMAudioSource::~uLawFromPCMAudioSource() {$/;"	f	class:uLawFromPCMAudioSource
