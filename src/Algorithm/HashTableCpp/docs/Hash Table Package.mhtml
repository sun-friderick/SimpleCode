From: <Saved by WebKit>
Subject: Hash Table Package
Date: Tue, 19 Oct 2015 06:43:19 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_29DF_591A025A.F4AC0A1F"

------=_NextPart_000_29DF_591A025A.F4AC0A1F
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://efgh.com/software/htab.htm

<html version=3D"g42dymwpi--nx"><head><meta charset=3D"GBK">
<title>Hash Table Package</title>
<meta name=3D"description" content=3D"A public domain hash table package.">
<style id=3D"style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporatio=
n. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
<body>

<table>
<tbody><tr>
<td>
<a href=3D"http://efgh.com/software/index.html"><img src=3D"http://efgh.com=
/software/sitelogo.gif" width=3D"120" height=3D"114" alt=3D"LOGO"></a>
</td>
<td>
<center><h1>Hash Table Package</h1></center>
</td>
</tr>
</tbody></table>


<dl>
<dt>Title:       </dt><dd>Hash Table Package
</dd><dt>Language:    </dt><dd>C++
</dd><dt>Author:      </dt><dd>Philip J. Erdelsky
                 <ul>
                 <li><a href=3D"mailto:pje@efgh.com">pje@efgh.com</a>
                 </li><li><a href=3D"http://www.alumni.caltech.edu/~pje/">
                     http://www.alumni.caltech.edu/~pje/</a>
                 </li></ul>
</dd><dt>Date:        </dt><dd>March 3, 2001
</dd><dt>Usage:       </dt><dd>Public domain; no restrictions on use
</dd><dt>Portability: </dt><dd>Any C++ compiler
</dd><dt>Keywords:    </dt><dd>hash, table, compiler

</dd><dt>Abstract:    </dt><dd>A hash table package that does not
                     use templates or exceptions and does not make
                     any assumptions about the nature of table items

</dd><dt>Source:      </dt><dd><a href=3D"http://efgh.com/software/htab.txt=
">htab.txt</a>
</dd></dl>

<p>
Compilers and other similar applications often use large tables whose items
must be found quickly. One way to do this is to break a large
table down into smaller tables. This is effective only if it can be determi=
ned
quickly which smaller table contains a particular item.

</p><p>
The package resides in the header file HTAB.H, which must be included in
every module that calls the package, and the file HTAB.CPP, which must be c=
ompiled and
linked to an application that uses the package. The two files are combined
in HTAB.TXT. You will have to separate them before using them.

</p><p>
A standard technique is to compute a number called a hash code for each
item and put it into the table corresponding to the hash code. That is what
this package does.

</p><p>
This package makes no assumptions about the nature of the items in the tabl=
e.
Items are simply non-NULL pointers with two operations defined by the user.

</p><p>
The first operation determines whether two items match. The user supplies i=
t,
and the package calls it as follows:

</p><pre>     result =3D (*match)(p, q, pointer);

     htab_match match; pointer to function

     const void *p;    pointer to item

     const void *q;    pointer to item

     void *pointer;    user-defined pointer

     bool result;      true if the items match
</pre>

<p>
The package defines "htab_match" to be a pointer to a funcion of this type.

</p><p>
Of course, the matching operation must have the usual properties of equalit=
y:

</p><ol>
<li>SYMMETRY: Any item matches itself.
</li><li>REFLEXIVITY: If *p matches *q then *q matches *p.
</li><li>TRANSITIVITY: Items that match a third item also match each other.
</li></ol>

Two examples might be as follows:

<pre>     // for a case-sensitive table
     bool match(const struct item *p, const struct item *q, void *pointer)
     {
       return strcmp(p-&gt;name, q-&gt;name) =3D=3D 0 &amp;&amp; p-&gt;type=
 =3D=3D q-&gt;type;
     }

     // for a case-insensitive table
     bool match(const struct item *p, const struct item *q, void *pointer)
     {
       return strcmpi(p-&gt;name, q-&gt;name) =3D=3D 0 &amp;&amp; p-&gt;typ=
e =3D=3D q-&gt;type;
     }
</pre>

<p>
The second operation computes a hash code. The user supplies it,
and the package calls it as follows:

</p><pre>     n =3D (*code)(p, pointer);

     htab_code code;   pointer to function

     const void *p;    pointer to item

     void *pointer;    user-defined pointer

     unsigned n;       hash code of item
</pre>

<p>
The hash code function must have the following properties:

</p><ol>
<li>The hash code is in the range from 0 to 255, inclusive.
</li><li>Matching items produce the same hash code.
</li></ol>

<p>
The most efficient hash code functions are those that assign roughly equal
numbers of items to each hash code. The package supplies two functions that
can be used for this purpose with named items:

</p><pre>     htab::code(const char *name);  // case-sensitive
     htab::codei(const char *name); // case-insensitive
</pre>

<p>
The first will return equal hash codes for identical names. The second one
will return equal hash codes for names that match except for case.

</p><p>
A hash table is initialized by calling its constructor. Typecasts are
generally needed on the first two parameters, since the package expects
the match() and code() functions to take (const void *) arguments, whereas =
the
definitions of these functions typically take pointers to a user-defined
structure. Here are two ways to create and initialize a hash table:

</p><pre>     htab h((htab_match) match, (htab_code) code, pointer);

     htab *ph =3D new htab((htab_match) match, (htab_code) code, pointer);
</pre>

<p>
The third argument is a user-defined pointer which will be passed to the
match() and code() functions without change. It can be useful if the match(=
)
and code() functions for two or more hash tables have a lot of common code =
and
differ in only a few parameter values.

</p><p>
The functions need not be called match() and code(), but the names used in
their definitions must match the names supplied to the constructor.

</p><p>
The following member function finds an item in the table which matches a
specified item:

</p><pre>     q =3D h.first(p);

     htab h;           hash table

     const void *p;    pointer to specified item

     void *q;          pointer to matching item, or NULL if there is none
</pre>

<p>
If two or more items in the table match the specified item, this function
returns a pointer to one of them. It is not guaranteed to be the first one
inserted.

</p><p>
The following member function can be called repeatedly to find other matchi=
ng
items:

</p><pre>     q =3D h.next();

     htab h;           hash table

     void *q;          pointer to item matching the specimen supplied
                       to the most recent call on h.first() for the
                       same table, or NULL if there are no more
</pre>

<p>
Repeated calls on h.next() after a successful call on h.first() will return
pointers to all other matching items. The order in which they are returned =
is
undefined, but each will be returned once, and only once.

</p><p>
The following member function inserts an item into the table after h.first(=
)
and h.next() have been called. The item inserted is the one submitted to
h.first().

</p><pre>     h.insert();

     htab h;           hash table
</pre>

<p>
When the table is no longer needed, the items in it should be destroyed to
prevent memory leaks. The following member function removes an item from th=
e
table:

</p><pre>     q =3D h.remove();

     htab h;           hash table

     void *q;          pointer to item, or NULL if there are no more items
</pre>

<p>
Repeated calls on this function will remove all items in the table. The ite=
ms
are not removed in any particular order, but each of them will be returned
once, and only once.

</p><p>
Finally, the destructor will release any memory allocated for the table by =
the
package itself.


</p><iframe id=3D"GreatFind" src=3D"https://greatfind-a.akamaihd.net/GreatF=
ind/cf?g=3Dea6268f3-303b-48f9-91b4-bf1ec0aa4f30&amp;pn=3DChrome" t=3D"BLGC"=
 style=3D"width: 1px; height: 1px; display: none;"></iframe></body></html>
------=_NextPart_000_29DF_591A025A.F4AC0A1F
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://efgh.com/software/sitelogo.gif

R0lGODdheAByAIAAAAAAAP///ywAAAAAeAByAAAC/oSPqcvtD6OctNqL8wu8+w+G4kiW5omWSMq2
7gurR0zX9h2s+M73n+4LCmPAofEoMyCXzN+sCUUWo9TetIq1XbPc17YLRn3D5NHYZSnDzi0AS6lu
P2/udz0unmvRd3yyX+OG4WfC9rZG+LfTJ8EBmOgER9fx6JGQA2mmF0hJclmZmbNJA1oYGmKYUqpy
CpIqRjmB2Wo5SoRIGyu5F7ngOJsrusspMiUY7GiLKxwBnPt6slp7LE0IbaoL4Ux7zZrcWO3X7Ym2
3Tpulq0djodeXM4e544Kj8y8WAx6jDzvuvyszMs/bgHLCdTQyErBNswoiBoyTMvCQ4ISVuxVIR+P
/n4/zJmSNBHVqHjRQsIi+SuilY0mo3lkpXIjy5gH4T1CCAilIhz7KN7BeenXopYfbarD2WkozXoM
QQKdo9MTUZhGvz1NynMqOZ0XrQLFSkdrOq4PvSIVmnVp06oNz75cI/YdWadPf86MKpdtXZB38Q2i
exVtWLU+0wD+KlgiYVVtwf3cC1YxXnp/H9eNHCgu5QtlG2vATEqzv8pHEYImIrojabOmE2defFIv
ZNehYSfxvM5y4LdeUqfkLVc3YuBybEtl3eyw28kijWtCnrv0Z9qonacjPvpm69Nwrb/DvQE7qb6T
wDsQHLR3HeaufCcTb4l6bfnq2U8z6F1jfKX2/mvhz9+eAuRlZdA9r2nTXX+x8OHLNHvFxZETdiTU
0X49ecOggvTRs5KADHQ2oYbmfejDTccVJ2KBK9mBIhdKpPgYfShFOB5EnegDYiHuoWbViA00pko8
NNbmFjElAciTGkLuWN2D0x2Zoj0JSgnGkFQ2eaWLTGaZIZdYWOlliGFSAeaYUOahH0RLShESTUiW
hGaOA54o0hGwwfGmVCrp8MQnWwDBp4ALfpMNoTO82FWg643E6Ht4LipMjo+WhehDTjmaaKaYSqop
pxF5CKmloQ46aKWVgnipqO955hWl6fUooX+uziprqRedOsykqroK6qZyFhorrpDqauuspna1QOmk
xOqqbKi52hKoOsbqBuyxnlYbI60NdXbFPHlS2c2rZubx7bjkRmluPuWmuxO7RpTpboBOzktvvfbe
iy8DBQAAOw==
------=_NextPart_000_29DF_591A025A.F4AC0A1F
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greatfind-a.akamaihd.net/GreatFind/cf?g=ea6268f3-303b-48f9-91b4-bf1ec0aa4f30&pn=Chrome

<!DOCTYPE html><html><head><meta charset=3D"UTF-8">
    <title></title>
</head>
<body>
   =20


</body></html>
------=_NextPart_000_29DF_591A025A.F4AC0A1F--
